{"id":466,"fid":466,"name":"Count The Repetitions","slug":"count-the-repetitions","link":"https://leetcode.com/problems/count-the-repetitions/description/","percent":27.139800285306706,"level":"Hard","category":"algorithms","totalAC":"6.8K","totalSubmit":"25.2K","desc":"Define S = [s,n] as the string S which consists of n connected strings s. For example, [\"abc\", 3] =\"abcabcabc\". \r\nOn the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc”  can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”.\r\nYou are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. Now consider the strings S1 and S2, where S1=[s1,n1] and S2=[s2,n2]. Find the maximum integer M such that [S2,M] can be obtained from S1.\r\n\r\nExample:\r\n\r\nInput:\r\ns1=\"acb\", n1=4\r\ns2=\"ab\", n2=2\r\n\r\nReturn:\r\n2\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int getMaxRepetitions(string s1, int n1, string s2, int n2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def getMaxRepetitions(self, s1, n1, s2, n2):\r\n        \"\"\"\r\n        :type s1: str\r\n        :type n1: int\r\n        :type s2: str\r\n        :type n2: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def getMaxRepetitions(self, s1, n1, s2, n2):\r\n        \"\"\"\r\n        :type s1: str\r\n        :type n1: int\r\n        :type s2: str\r\n        :type n2: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int getMaxRepetitions(char* s1, int n1, char* s2, int n2) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int GetMaxRepetitions(string s1, int n1, string s2, int n2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s1\r\n * @param {number} n1\r\n * @param {string} s2\r\n * @param {number} n2\r\n * @return {number}\r\n */\r\nvar getMaxRepetitions = function(s1, n1, s2, n2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s1\r\n# @param {Integer} n1\r\n# @param {String} s2\r\n# @param {Integer} n2\r\n# @return {Integer}\r\ndef get_max_repetitions(s1, n1, s2, n2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getMaxRepetitions(_ s1: String, _ n1: Int, _ s2: String, _ n2: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func getMaxRepetitions(s1 string, n1 int, s2 string, n2 int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def getMaxRepetitions(s1: String, n1: Int, s2: String, n2: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun getMaxRepetitions(s1: String, n1: Int, s2: String, n2: Int): Int {\n        \n    }\n}"}],"testcase":"\"acb\"\n4\n\"ab\"\n2","testable":true,"templateMeta":{"name":"getMaxRepetitions","params":[{"name":"s1","type":"string"},{"name":"n1","type":"integer"},{"name":"s2","type":"string"},{"name":"n2","type":"integer"}],"return":{"type":"integer"}}}