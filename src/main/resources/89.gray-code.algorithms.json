{"id":89,"fid":89,"name":"Gray Code","slug":"gray-code","link":"https://leetcode.com/problems/gray-code/description/","percent":43.9298318301877,"level":"Medium","category":"algorithms","totalAC":"118.8K","totalSubmit":"270.3K","desc":"The gray code is a binary numeral system where two successive values differ in only one bit.\r\n\r\nGiven a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.\r\n\r\nExample 1:\r\n\r\n\r\nInput: 2\r\nOutput: [0,1,3,2]\r\nExplanation:\r\n00 - 0\r\n01 - 1\r\n11 - 3\r\n10 - 2\r\n\r\nFor a given n, a gray code sequence may not be uniquely defined.\r\nFor example, [0,2,3,1] is also a valid gray code sequence.\r\n\r\n00 - 0\r\n10 - 2\r\n11 - 3\r\n01 - 1\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: 0\r\nOutput: [0]\r\nExplanation: We define the gray code sequence to begin with 0.\r\n             A gray code sequence of n has size = 2n, which for n = 0 the size is 20 = 1.\r\n             Therefore, for n = 0 the gray code sequence is [0].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> grayCode(int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> grayCode(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def grayCode(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def grayCode(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* grayCode(int n, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> GrayCode(int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @return {number[]}\r\n */\r\nvar grayCode = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @return {Integer[]}\r\ndef gray_code(n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func grayCode(_ n: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func grayCode(n int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def grayCode(n: Int): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun grayCode(n: Int): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"2","testable":true,"templateMeta":{"name":"grayCode","params":[{"name":"n","type":"integer"}],"return":{"type":"list<integer>"}}}