{"id":119,"fid":119,"name":"Pascal's Triangle II","slug":"pascals-triangle-ii","link":"https://leetcode.com/problems/pascals-triangle-ii/description/","percent":40.35666851802661,"level":"Easy","category":"algorithms","totalAC":"167.1K","totalSubmit":"414.1K","desc":"Given a non-negative index k where k ≤ 33, return the kth index row of the Pascal's triangle.\r\n\r\nNote that the row index starts from 0.\r\n\r\n\r\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\r\n\r\nExample:\r\n\r\n\r\nInput: 3\r\nOutput: [1,3,3,1]\r\n\r\n\r\nFollow up:\r\n\r\nCould you optimize your algorithm to use only O(k) extra space?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> getRow(int rowIndex) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> getRow(int rowIndex) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def getRow(self, rowIndex):\r\n        \"\"\"\r\n        :type rowIndex: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def getRow(self, rowIndex):\r\n        \"\"\"\r\n        :type rowIndex: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* getRow(int rowIndex, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> GetRow(int rowIndex) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} rowIndex\r\n * @return {number[]}\r\n */\r\nvar getRow = function(rowIndex) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} row_index\r\n# @return {Integer[]}\r\ndef get_row(row_index)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getRow(_ rowIndex: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func getRow(rowIndex int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def getRow(rowIndex: Int): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun getRow(rowIndex: Int): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"getRow","params":[{"name":"rowIndex","type":"integer"}],"return":{"type":"list<integer>"}}}