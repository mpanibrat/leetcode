{"id":866,"fid":836,"name":"Rectangle Overlap","slug":"rectangle-overlap","link":"https://leetcode.com/problems/rectangle-overlap/description/","percent":44.34535039275546,"level":"Easy","category":"algorithms","totalAC":"12.9K","totalSubmit":"29.2K","desc":"A rectangle is represented as a list [x1, y1, x2, y2], where (x1, y1) are the coordinates of its bottom-left corner, and (x2, y2) are the coordinates of its top-right corner.\r\n\r\nTwo rectangles overlap if the area of their intersection is positive.  To be clear, two rectangles that only touch at the corner or edges do not overlap.\r\n\r\nGiven two (axis-aligned) rectangles, return whether they overlap.\r\n\r\nExample 1:\r\n\r\n\r\nInput: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\r\nOutput: true\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\r\nOutput: false\r\n\r\n\r\nNotes:\r\n\r\n\r\n\tBoth rectangles rec1 and rec2 are lists of 4 integers.\r\n\tAll coordinates in rectangles will be between -10^9 and 10^9.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isRectangleOverlap(vector<int>& rec1, vector<int>& rec2) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isRectangleOverlap(int[] rec1, int[] rec2) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isRectangleOverlap(self, rec1, rec2):\n        \"\"\"\n        :type rec1: List[int]\n        :type rec2: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isRectangleOverlap(self, rec1, rec2):\n        \"\"\"\n        :type rec1: List[int]\n        :type rec2: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool isRectangleOverlap(int* rec1, int rec1Size, int* rec2, int rec2Size) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsRectangleOverlap(int[] rec1, int[] rec2) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} rec1\n * @param {number[]} rec2\n * @return {boolean}\n */\nvar isRectangleOverlap = function(rec1, rec2) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} rec1\n# @param {Integer[]} rec2\n# @return {Boolean}\ndef is_rectangle_overlap(rec1, rec2)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isRectangleOverlap(_ rec1: [Int], _ rec2: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isRectangleOverlap(rec1 []int, rec2 []int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isRectangleOverlap(rec1: Array[Int], rec2: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isRectangleOverlap(rec1: IntArray, rec2: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[0,0,2,2]\n[1,1,3,3]","testable":true,"templateMeta":{"name":"isRectangleOverlap","params":[{"name":"rec1","type":"integer[]"},{"name":"rec2","type":"integer[]"}],"return":{"type":"boolean"}}}