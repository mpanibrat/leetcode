{"id":667,"fid":667,"name":"Beautiful Arrangement II","slug":"beautiful-arrangement-ii","link":"https://leetcode.com/problems/beautiful-arrangement-ii/description/","percent":50.81732947614235,"level":"Medium","category":"algorithms","totalAC":"14.6K","totalSubmit":"28.7K","desc":"\r\nGiven two integers n and k, you need to construct a list which contains n different positive integers ranging from 1 to n and obeys the following requirement: \r\n\r\nSuppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.\r\n\r\n\r\n\r\nIf there are multiple answers, print any of them.\r\n\r\n\r\nExample 1:\r\n\r\nInput: n = 3, k = 1\r\nOutput: [1, 2, 3]\r\nExplanation: The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: n = 3, k = 2\r\nOutput: [1, 3, 2]\r\nExplanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe n and k are in the range 1 4.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> constructArray(int n, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] constructArray(int n, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def constructArray(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def constructArray(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* constructArray(int n, int k, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] ConstructArray(int n, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @param {number} k\n * @return {number[]}\n */\nvar constructArray = function(n, k) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @param {Integer} k\n# @return {Integer[]}\ndef construct_array(n, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func constructArray(_ n: Int, _ k: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func constructArray(n int, k int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def constructArray(n: Int, k: Int): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun constructArray(n: Int, k: Int): IntArray {\n        \n    }\n}"}],"testcase":"3\n2","testable":true,"templateMeta":{"name":"constructArray","params":[{"name":"n","type":"integer"},{"name":"k","type":"integer"}],"return":{"type":"integer[]"}}}