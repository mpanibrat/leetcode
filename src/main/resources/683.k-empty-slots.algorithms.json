{"id":683,"fid":683,"name":"K Empty Slots","slug":"k-empty-slots","link":"https://leetcode.com/problems/k-empty-slots/description/","percent":33.33538552466324,"level":"Hard","category":"algorithms","totalAC":"27.1K","totalSubmit":"81.2K","desc":"\r\nThere is a garden with N slots. In each slot, there is a flower. The N flowers will bloom one by one in N days. In each day, there will be exactly one flower blooming and it will be in the status of blooming since then.\r\n\r\n\r\n\r\nGiven an array flowers consists of number from 1 to N. Each number in the array represents the place where the flower will open in that day.\r\n\r\n\r\n\r\nFor example, flowers[i] = x means that the unique flower that blooms at day i will be at position x, where i and x will be in the range from 1 to N.\r\n\r\n\r\n\r\nAlso given an integer k, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is k and these flowers are not blooming.\r\n\r\n\r\n\r\nIf there isn't such day, output -1.\r\n\r\n\r\nExample 1:\r\n\r\nInput: \r\nflowers: [1,3,2]\r\nk: 1\r\nOutput: 2\r\nExplanation: In the second day, the first and the third flower have become blooming.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: \r\nflowers: [1,2,3]\r\nk: 1\r\nOutput: -1\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nThe given array will be in the range [1, 20000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int kEmptySlots(vector<int>& flowers, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int kEmptySlots(int[] flowers, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def kEmptySlots(self, flowers, k):\n        \"\"\"\n        :type flowers: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def kEmptySlots(self, flowers, k):\n        \"\"\"\n        :type flowers: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int kEmptySlots(int* flowers, int flowersSize, int k) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int KEmptySlots(int[] flowers, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} flowers\n * @param {number} k\n * @return {number}\n */\nvar kEmptySlots = function(flowers, k) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} flowers\n# @param {Integer} k\n# @return {Integer}\ndef k_empty_slots(flowers, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func kEmptySlots(_ flowers: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func kEmptySlots(flowers []int, k int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def kEmptySlots(flowers: Array[Int], k: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun kEmptySlots(flowers: IntArray, k: Int): Int {\n        \n    }\n}"}],"testcase":"[1,3,2]\n1","testable":true,"templateMeta":{"name":"kEmptySlots","params":[{"name":"flowers","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}