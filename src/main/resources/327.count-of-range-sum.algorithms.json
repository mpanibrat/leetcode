{"id":327,"fid":327,"name":"Count of Range Sum","slug":"count-of-range-sum","link":"https://leetcode.com/problems/count-of-range-sum/description/","percent":31.32088440829419,"level":"Hard","category":"algorithms","totalAC":"27.3K","totalSubmit":"87.3K","desc":"Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.\r\nRange sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i â‰¤ j), inclusive.\r\n\r\nNote:\r\nA naive algorithm of O(n2) is trivial. You MUST do better than that.\r\n\r\nExample:\r\n\r\n\r\nInput: nums = [-2,5,-1], lower = -2, upper = 2,\r\nOutput: 3 \r\nExplanation: The three ranges are : [0,0], [2,2], [0,2] and their respective sums are: -2, -1, 2.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int countRangeSum(vector<int>& nums, int lower, int upper) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int countRangeSum(int[] nums, int lower, int upper) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def countRangeSum(self, nums, lower, upper):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type lower: int\r\n        :type upper: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def countRangeSum(self, nums, lower, upper):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type lower: int\r\n        :type upper: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int countRangeSum(int* nums, int numsSize, int lower, int upper) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int CountRangeSum(int[] nums, int lower, int upper) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} lower\r\n * @param {number} upper\r\n * @return {number}\r\n */\r\nvar countRangeSum = function(nums, lower, upper) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} lower\r\n# @param {Integer} upper\r\n# @return {Integer}\r\ndef count_range_sum(nums, lower, upper)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countRangeSum(_ nums: [Int], _ lower: Int, _ upper: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func countRangeSum(nums []int, lower int, upper int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def countRangeSum(nums: Array[Int], lower: Int, upper: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun countRangeSum(nums: IntArray, lower: Int, upper: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[-2,5,-1]\n-2\n2","testable":true,"templateMeta":{"name":"countRangeSum","params":[{"name":"nums","type":"integer[]"},{"name":"lower","type":"integer"},{"name":"upper","type":"integer"}],"return":{"type":"integer"}}}