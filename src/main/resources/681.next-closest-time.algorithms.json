{"id":681,"fid":681,"name":"Next Closest Time","slug":"next-closest-time","link":"https://leetcode.com/problems/next-closest-time/description/","percent":40.98605640759362,"level":"Medium","category":"algorithms","totalAC":"32.4K","totalSubmit":"79K","desc":"Given a time represented in the format \"HH:MM\", form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.\r\n\r\nYou may assume the given input string is always valid. For example, \"01:34\", \"12:09\" are all valid. \"1:34\", \"12:9\" are all invalid.\r\n\r\nExample 1:\r\n\r\nInput: \"19:34\"\r\nOutput: \"19:39\"\r\nExplanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.  It is not 19:33, because this occurs 23 hours and 59 minutes later.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: \"23:59\"\r\nOutput: \"22:22\"\r\nExplanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22. It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string nextClosestTime(string time) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String nextClosestTime(String time) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def nextClosestTime(self, time):\n        \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def nextClosestTime(self, time):\n        \"\"\"\n        :type time: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* nextClosestTime(char* time) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string NextClosestTime(string time) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} time\n * @return {string}\n */\nvar nextClosestTime = function(time) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} time\n# @return {String}\ndef next_closest_time(time)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func nextClosestTime(_ time: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func nextClosestTime(time string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def nextClosestTime(time: String): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun nextClosestTime(time: String): String {\n        \n    }\n}"}],"testcase":"\"19:34\"","testable":true,"templateMeta":{"name":"nextClosestTime","params":[{"name":"time","type":"string"}],"return":{"type":"string"}}}