{"id":803,"fid":787,"name":"Cheapest Flights Within K Stops","slug":"cheapest-flights-within-k-stops","link":"https://leetcode.com/problems/cheapest-flights-within-k-stops/description/","percent":31.347000417724367,"level":"Medium","category":"algorithms","totalAC":"19.5K","totalSubmit":"62.2K","desc":"There are n cities connected by m flights. Each fight starts from city u and arrives at v with a price w.\r\n\r\nNow given all the cities and flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with up to k stops. If there is no such route, output -1.\r\n\r\n\r\nExample 1:\r\nInput: \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 1\r\nOutput: 200\r\nExplanation: \r\nThe graph looks like this:\r\n\r\n\r\nThe cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.\r\n\r\n\r\nExample 2:\r\nInput: \r\nn = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]\r\nsrc = 0, dst = 2, k = 0\r\nOutput: 500\r\nExplanation: \r\nThe graph looks like this:\r\n\r\n\r\nThe cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.\r\n\r\nNote:\r\n\r\n\r\n\tThe number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.\r\n\tThe size of flights will be in range [0, n * (n - 1) / 2].\r\n\tThe format of each flight will be (src, dst, price).\r\n\tThe price of each flight will be in the range [1, 10000].\r\n\tk is in the range of [0, n - 1].\r\n\tThere will not be any duplicated flights or self cycles.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findCheapestPrice(self, n, flights, src, dst, K):\r\n        \"\"\"\r\n        :type n: int\r\n        :type flights: List[List[int]]\r\n        :type src: int\r\n        :type dst: int\r\n        :type K: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findCheapestPrice(self, n, flights, src, dst, K):\r\n        \"\"\"\r\n        :type n: int\r\n        :type flights: List[List[int]]\r\n        :type src: int\r\n        :type dst: int\r\n        :type K: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findCheapestPrice(int n, int** flights, int flightsRowSize, int *flightsColSizes, int src, int dst, int K) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @param {number[][]} flights\r\n * @param {number} src\r\n * @param {number} dst\r\n * @param {number} K\r\n * @return {number}\r\n */\r\nvar findCheapestPrice = function(n, flights, src, dst, K) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @param {Integer[][]} flights\r\n# @param {Integer} src\r\n# @param {Integer} dst\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef find_cheapest_price(n, flights, src, dst, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func findCheapestPrice(_ n: Int, _ flights: [[Int]], _ src: Int, _ dst: Int, _ K: Int) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func findCheapestPrice(n int, flights [][]int, src int, dst int, K int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findCheapestPrice(n: Int, flights: Array[Array[Int]], src: Int, dst: Int, K: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findCheapestPrice(n: Int, flights: Array<IntArray>, src: Int, dst: Int, K: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"3\n[[0,1,100],[1,2,100],[0,2,500]]\n0\n2\n1","testable":true,"templateMeta":{"name":"findCheapestPrice","params":[{"name":"n","type":"integer"},{"name":"flights","type":"integer[][]"},{"name":"src","type":"integer"},{"name":"dst","type":"integer"},{"name":"K","type":"integer"}],"return":{"type":"integer"}}}