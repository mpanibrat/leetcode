{"id":379,"fid":379,"name":"Design Phone Directory","slug":"design-phone-directory","link":"https://leetcode.com/problems/design-phone-directory/description/","percent":38.366423933113424,"level":"Medium","category":"algorithms","totalAC":"18.5K","totalSubmit":"48.2K","desc":"Design a Phone Directory which supports the following operations:\r\n\r\n\r\n\r\nget: Provide a number which is not assigned to anyone.\r\ncheck: Check if a number is available or not.\r\nrelease: Recycle or release a number.\r\n\r\n\r\n\r\nExample:\r\n\r\n// Init a phone directory containing a total of 3 numbers: 0, 1, and 2.\r\nPhoneDirectory directory = new PhoneDirectory(3);\r\n\r\n// It can return any available phone number. Here we assume it returns 0.\r\ndirectory.get();\r\n\r\n// Assume it returns 1.\r\ndirectory.get();\r\n\r\n// The number 2 is available, so return true.\r\ndirectory.check(2);\r\n\r\n// It returns 2, the only number that is left.\r\ndirectory.get();\r\n\r\n// The number 2 is no longer available, so return false.\r\ndirectory.check(2);\r\n\r\n// Release number 2 back to the pool.\r\ndirectory.release(2);\r\n\r\n// Number 2 is available again, return true.\r\ndirectory.check(2);\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class PhoneDirectory {\r\npublic:\r\n    /** Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\r\n    PhoneDirectory(int maxNumbers) {\r\n        \r\n    }\r\n    \r\n    /** Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available. */\r\n    int get() {\r\n        \r\n    }\r\n    \r\n    /** Check if a number is available or not. */\r\n    bool check(int number) {\r\n        \r\n    }\r\n    \r\n    /** Recycle or release a number. */\r\n    void release(int number) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your PhoneDirectory object will be instantiated and called as such:\r\n * PhoneDirectory obj = new PhoneDirectory(maxNumbers);\r\n * int param_1 = obj.get();\r\n * bool param_2 = obj.check(number);\r\n * obj.release(number);\r\n */"},{"value":"java","text":"Java","defaultCode":"class PhoneDirectory {\r\n\r\n    /** Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\r\n    public PhoneDirectory(int maxNumbers) {\r\n        \r\n    }\r\n    \r\n    /** Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available. */\r\n    public int get() {\r\n        \r\n    }\r\n    \r\n    /** Check if a number is available or not. */\r\n    public boolean check(int number) {\r\n        \r\n    }\r\n    \r\n    /** Recycle or release a number. */\r\n    public void release(int number) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your PhoneDirectory object will be instantiated and called as such:\r\n * PhoneDirectory obj = new PhoneDirectory(maxNumbers);\r\n * int param_1 = obj.get();\r\n * boolean param_2 = obj.check(number);\r\n * obj.release(number);\r\n */"},{"value":"python","text":"Python","defaultCode":"class PhoneDirectory(object):\r\n\r\n    def __init__(self, maxNumbers):\r\n        \"\"\"\r\n        Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory.\r\n        :type maxNumbers: int\r\n        \"\"\"\r\n        \r\n\r\n    def get(self):\r\n        \"\"\"\r\n        Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def check(self, number):\r\n        \"\"\"\r\n        Check if a number is available or not.\r\n        :type number: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def release(self, number):\r\n        \"\"\"\r\n        Recycle or release a number.\r\n        :type number: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your PhoneDirectory object will be instantiated and called as such:\r\n# obj = PhoneDirectory(maxNumbers)\r\n# param_1 = obj.get()\r\n# param_2 = obj.check(number)\r\n# obj.release(number)"},{"value":"python3","text":"Python3","defaultCode":"class PhoneDirectory:\r\n\r\n    def __init__(self, maxNumbers):\r\n        \"\"\"\r\n        Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory.\r\n        :type maxNumbers: int\r\n        \"\"\"\r\n        \r\n\r\n    def get(self):\r\n        \"\"\"\r\n        Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def check(self, number):\r\n        \"\"\"\r\n        Check if a number is available or not.\r\n        :type number: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def release(self, number):\r\n        \"\"\"\r\n        Recycle or release a number.\r\n        :type number: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your PhoneDirectory object will be instantiated and called as such:\r\n# obj = PhoneDirectory(maxNumbers)\r\n# param_1 = obj.get()\r\n# param_2 = obj.check(number)\r\n# obj.release(number)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} PhoneDirectory;\r\n\r\n/** Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\r\nPhoneDirectory* phoneDirectoryCreate(int maxNumbers) {\r\n    \r\n}\r\n\r\n/** Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available. */\r\nint phoneDirectoryGet(PhoneDirectory* obj) {\r\n    \r\n}\r\n\r\n/** Check if a number is available or not. */\r\nbool phoneDirectoryCheck(PhoneDirectory* obj, int number) {\r\n    \r\n}\r\n\r\n/** Recycle or release a number. */\r\nvoid phoneDirectoryRelease(PhoneDirectory* obj, int number) {\r\n    \r\n}\r\n\r\nvoid phoneDirectoryFree(PhoneDirectory* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your PhoneDirectory struct will be instantiated and called as such:\r\n * struct PhoneDirectory* obj = phoneDirectoryCreate(maxNumbers);\r\n * int param_1 = phoneDirectoryGet(obj);\r\n * bool param_2 = phoneDirectoryCheck(obj, number);\r\n * phoneDirectoryRelease(obj, number);\r\n * phoneDirectoryFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class PhoneDirectory {\r\n\r\n    /** Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\r\n    public PhoneDirectory(int maxNumbers) {\r\n        \r\n    }\r\n    \r\n    /** Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available. */\r\n    public int Get() {\r\n        \r\n    }\r\n    \r\n    /** Check if a number is available or not. */\r\n    public bool Check(int number) {\r\n        \r\n    }\r\n    \r\n    /** Recycle or release a number. */\r\n    public void Release(int number) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your PhoneDirectory object will be instantiated and called as such:\r\n * PhoneDirectory obj = new PhoneDirectory(maxNumbers);\r\n * int param_1 = obj.Get();\r\n * bool param_2 = obj.Check(number);\r\n * obj.Release(number);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory.\r\n * @param {number} maxNumbers\r\n */\r\nvar PhoneDirectory = function(maxNumbers) {\r\n    \r\n};\r\n\r\n/**\r\n * Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available.\r\n * @return {number}\r\n */\r\nPhoneDirectory.prototype.get = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Check if a number is available or not. \r\n * @param {number} number\r\n * @return {boolean}\r\n */\r\nPhoneDirectory.prototype.check = function(number) {\r\n    \r\n};\r\n\r\n/**\r\n * Recycle or release a number. \r\n * @param {number} number\r\n * @return {void}\r\n */\r\nPhoneDirectory.prototype.release = function(number) {\r\n    \r\n};\r\n\r\n/** \r\n * Your PhoneDirectory object will be instantiated and called as such:\r\n * var obj = Object.create(PhoneDirectory).createNew(maxNumbers)\r\n * var param_1 = obj.get()\r\n * var param_2 = obj.check(number)\r\n * obj.release(number)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class PhoneDirectory\r\n\r\n=begin\r\n    Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory.\r\n    :type max_numbers: Integer\r\n=end\r\n    def initialize(max_numbers)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available.\r\n    :rtype: Integer\r\n=end\r\n    def get()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Check if a number is available or not.\r\n    :type number: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def check(number)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Recycle or release a number.\r\n    :type number: Integer\r\n    :rtype: Void\r\n=end\r\n    def release(number)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your PhoneDirectory object will be instantiated and called as such:\r\n# obj = PhoneDirectory.new(max_numbers)\r\n# param_1 = obj.get()\r\n# param_2 = obj.check(number)\r\n# obj.release(number)"},{"value":"swift","text":"Swift","defaultCode":"\nclass PhoneDirectory {\n\n    /** Initialize your data structure here\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\n    init(_ maxNumbers: Int) {\n        \n    }\n    \n    /** Provide a number which is not assigned to anyone.\n        @return - Return an available number. Return -1 if none is available. */\n    func get() -> Int {\n      \n    }\n    \n    /** Check if a number is available or not. */\n    func check(_ number: Int) -> Bool {\n      \n    }\n    \n    /** Recycle or release a number. */\n    func release(_ number: Int) {\n      \n    }\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * let obj = PhoneDirectory(maxNumbers)\n * let ret_1: Int = obj.get()\n * let ret_2: Bool = obj.check(number)\n * obj.release(number)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type PhoneDirectory struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here\r\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\r\nfunc Constructor(maxNumbers int) PhoneDirectory {\r\n    \r\n}\r\n\r\n\r\n/** Provide a number which is not assigned to anyone.\r\n        @return - Return an available number. Return -1 if none is available. */\r\nfunc (this *PhoneDirectory) Get() int {\r\n    \r\n}\r\n\r\n\r\n/** Check if a number is available or not. */\r\nfunc (this *PhoneDirectory) Check(number int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Recycle or release a number. */\r\nfunc (this *PhoneDirectory) Release(number int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your PhoneDirectory object will be instantiated and called as such:\r\n * obj := Constructor(maxNumbers);\r\n * param_1 := obj.Get();\r\n * param_2 := obj.Check(number);\r\n * obj.Release(number);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class PhoneDirectory(_maxNumbers: Int) {\n\n    /** Initialize your data structure here\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\n    \n\n    /** Provide a number which is not assigned to anyone.\n        @return - Return an available number. Return -1 if none is available. */\n    def get(): Int = {\n        \n    }\n\n    /** Check if a number is available or not. */\n    def check(number: Int): Boolean = {\n        \n    }\n\n    /** Recycle or release a number. */\n    def release(number: Int) {\n        \n    }\n\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * var obj = new PhoneDirectory(maxNumbers)\n * var param_1 = obj.get()\n * var param_2 = obj.check(number)\n * obj.release(number)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class PhoneDirectory(maxNumbers: Int) {\n\n    /** Initialize your data structure here\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory. */\n    \n\n    /** Provide a number which is not assigned to anyone.\n        @return - Return an available number. Return -1 if none is available. */\n    fun get(): Int {\n        \n    }\n\n    /** Check if a number is available or not. */\n    fun check(number: Int): Boolean {\n        \n    }\n\n    /** Recycle or release a number. */\n    fun release(number: Int) {\n        \n    }\n\n}\n\n/**\n * Your PhoneDirectory object will be instantiated and called as such:\n * var obj = PhoneDirectory(maxNumbers)\n * var param_1 = obj.get()\n * var param_2 = obj.check(number)\n * obj.release(number)\n */"}],"testcase":"[\"PhoneDirectory\",\"get\",\"get\",\"check\",\"get\",\"check\",\"release\",\"check\"]\n[[3],[],[],[2],[],[2],[2],[2]]","testable":true,"templateMeta":{"classname":"PhoneDirectory","constructor":{"params":[{"type":"integer","name":"maxNumbers"}],"comment":"Initialize your data structure here\n        @param maxNumbers - The maximum numbers that can be stored in the phone directory."},"methods":[{"name":"get","params":[],"return":{"type":"integer"},"comment":"Provide a number which is not assigned to anyone.\n        @return - Return an available number. Return -1 if none is available."},{"name":"check","params":[{"type":"integer","name":"number"}],"return":{"type":"boolean"},"comment":"Check if a number is available or not."},{"name":"release","params":[{"type":"integer","name":"number"}],"return":{"type":"void"},"comment":"Recycle or release a number."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}