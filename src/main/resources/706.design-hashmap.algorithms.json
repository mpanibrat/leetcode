{"id":817,"fid":706,"name":"Design HashMap","slug":"design-hashmap","link":"https://leetcode.com/problems/design-hashmap/description/","percent":48.79749615638041,"level":"Easy","category":"algorithms","totalAC":"8.9K","totalSubmit":"18.2K","desc":"Design a HashMap without using any built-in hash table libraries.\r\n\r\nTo be specific, your design should include these functions:\r\n\r\n\r\n\tput(key, value) : Insert a (key, value) pair into the HashMap. If the value already exists in the HashMap, update the value.\r\n\tget(key): Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.\r\n\tremove(key) : Remove the mapping for the value key if this map contains the mapping for the key.\r\n\r\n\r\n\r\nExample:\r\n\r\n\r\nMyHashMap hashMap = new MyHashMap();\r\nhashMap.put(1, 1);          \r\nhashMap.put(2, 2);         \r\nhashMap.get(1);            // returns 1\r\nhashMap.get(3);            // returns -1 (not found)\r\nhashMap.put(2, 1);          // update the existing value\r\nhashMap.get(2);            // returns 1 \r\nhashMap.remove(2);          // remove the mapping for 2\r\nhashMap.get(2);            // returns -1 (not found) \r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\tAll keys and values will be in the range of [0, 1000000].\r\n\tThe number of operations will be in the range of [1, 10000].\r\n\tPlease do not use the built-in HashMap library.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyHashMap {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyHashMap() {\r\n        \r\n    }\r\n    \r\n    /** value will always be non-negative. */\r\n    void put(int key, int value) {\r\n        \r\n    }\r\n    \r\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\r\n    int get(int key) {\r\n        \r\n    }\r\n    \r\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\r\n    void remove(int key) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyHashMap object will be instantiated and called as such:\r\n * MyHashMap obj = new MyHashMap();\r\n * obj.put(key,value);\r\n * int param_2 = obj.get(key);\r\n * obj.remove(key);\r\n */"},{"value":"java","text":"Java","defaultCode":"class MyHashMap {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyHashMap() {\r\n        \r\n    }\r\n    \r\n    /** value will always be non-negative. */\r\n    public void put(int key, int value) {\r\n        \r\n    }\r\n    \r\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\r\n    public int get(int key) {\r\n        \r\n    }\r\n    \r\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\r\n    public void remove(int key) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyHashMap object will be instantiated and called as such:\r\n * MyHashMap obj = new MyHashMap();\r\n * obj.put(key,value);\r\n * int param_2 = obj.get(key);\r\n * obj.remove(key);\r\n */"},{"value":"python","text":"Python","defaultCode":"class MyHashMap(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def put(self, key, value):\r\n        \"\"\"\r\n        value will always be non-negative.\r\n        :type key: int\r\n        :type value: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def get(self, key):\r\n        \"\"\"\r\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\r\n        :type key: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def remove(self, key):\r\n        \"\"\"\r\n        Removes the mapping of the specified value key if this map contains a mapping for the key\r\n        :type key: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyHashMap object will be instantiated and called as such:\r\n# obj = MyHashMap()\r\n# obj.put(key,value)\r\n# param_2 = obj.get(key)\r\n# obj.remove(key)"},{"value":"python3","text":"Python3","defaultCode":"class MyHashMap:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def put(self, key, value):\r\n        \"\"\"\r\n        value will always be non-negative.\r\n        :type key: int\r\n        :type value: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def get(self, key):\r\n        \"\"\"\r\n        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\r\n        :type key: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def remove(self, key):\r\n        \"\"\"\r\n        Removes the mapping of the specified value key if this map contains a mapping for the key\r\n        :type key: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyHashMap object will be instantiated and called as such:\r\n# obj = MyHashMap()\r\n# obj.put(key,value)\r\n# param_2 = obj.get(key)\r\n# obj.remove(key)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MyHashMap;\r\n\r\n/** Initialize your data structure here. */\r\nMyHashMap* myHashMapCreate() {\r\n    \r\n}\r\n\r\n/** value will always be non-negative. */\r\nvoid myHashMapPut(MyHashMap* obj, int key, int value) {\r\n    \r\n}\r\n\r\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\r\nint myHashMapGet(MyHashMap* obj, int key) {\r\n    \r\n}\r\n\r\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\r\nvoid myHashMapRemove(MyHashMap* obj, int key) {\r\n    \r\n}\r\n\r\nvoid myHashMapFree(MyHashMap* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MyHashMap struct will be instantiated and called as such:\r\n * struct MyHashMap* obj = myHashMapCreate();\r\n * myHashMapPut(obj, key, value);\r\n * int param_2 = myHashMapGet(obj, key);\r\n * myHashMapRemove(obj, key);\r\n * myHashMapFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyHashMap {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyHashMap() {\r\n        \r\n    }\r\n    \r\n    /** value will always be non-negative. */\r\n    public void Put(int key, int value) {\r\n        \r\n    }\r\n    \r\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\r\n    public int Get(int key) {\r\n        \r\n    }\r\n    \r\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\r\n    public void Remove(int key) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyHashMap object will be instantiated and called as such:\r\n * MyHashMap obj = new MyHashMap();\r\n * obj.Put(key,value);\r\n * int param_2 = obj.Get(key);\r\n * obj.Remove(key);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MyHashMap = function() {\r\n    \r\n};\r\n\r\n/**\r\n * value will always be non-negative. \r\n * @param {number} key \r\n * @param {number} value\r\n * @return {void}\r\n */\r\nMyHashMap.prototype.put = function(key, value) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key \r\n * @param {number} key\r\n * @return {number}\r\n */\r\nMyHashMap.prototype.get = function(key) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes the mapping of the specified value key if this map contains a mapping for the key \r\n * @param {number} key\r\n * @return {void}\r\n */\r\nMyHashMap.prototype.remove = function(key) {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyHashMap object will be instantiated and called as such:\r\n * var obj = Object.create(MyHashMap).createNew()\r\n * obj.put(key,value)\r\n * var param_2 = obj.get(key)\r\n * obj.remove(key)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyHashMap\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    value will always be non-negative.\r\n    :type key: Integer\r\n    :type value: Integer\r\n    :rtype: Void\r\n=end\r\n    def put(key, value)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key\r\n    :type key: Integer\r\n    :rtype: Integer\r\n=end\r\n    def get(key)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes the mapping of the specified value key if this map contains a mapping for the key\r\n    :type key: Integer\r\n    :rtype: Void\r\n=end\r\n    def remove(key)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyHashMap object will be instantiated and called as such:\r\n# obj = MyHashMap.new()\r\n# obj.put(key, value)\r\n# param_2 = obj.get(key)\r\n# obj.remove(key)"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyHashMap {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** value will always be non-negative. */\n    func put(_ key: Int, _ value: Int) {\n      \n    }\n    \n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\n    func get(_ key: Int) -> Int {\n      \n    }\n    \n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\n    func remove(_ key: Int) {\n      \n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * let obj = MyHashMap()\n * obj.put(key, value)\n * let ret_2: Int = obj.get(key)\n * obj.remove(key)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MyHashMap struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyHashMap {\r\n    \r\n}\r\n\r\n\r\n/** value will always be non-negative. */\r\nfunc (this *MyHashMap) Put(key int, value int)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\r\nfunc (this *MyHashMap) Get(key int) int {\r\n    \r\n}\r\n\r\n\r\n/** Removes the mapping of the specified value key if this map contains a mapping for the key */\r\nfunc (this *MyHashMap) Remove(key int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyHashMap object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Put(key,value);\r\n * param_2 := obj.Get(key);\r\n * obj.Remove(key);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyHashMap() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** value will always be non-negative. */\r\n    def put(key: Int, value: Int) {\r\n        \r\n    }\r\n\r\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\r\n    def get(key: Int): Int = {\r\n        \r\n    }\r\n\r\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\r\n    def remove(key: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyHashMap object will be instantiated and called as such:\r\n * var obj = new MyHashMap()\r\n * obj.put(key,value)\r\n * var param_2 = obj.get(key)\r\n * obj.remove(key)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyHashMap() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** value will always be non-negative. */\r\n    fun put(key: Int, value: Int) {\r\n        \r\n    }\r\n\r\n    /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */\r\n    fun get(key: Int): Int {\r\n        \r\n    }\r\n\r\n    /** Removes the mapping of the specified value key if this map contains a mapping for the key */\r\n    fun remove(key: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyHashMap object will be instantiated and called as such:\r\n * var obj = MyHashMap()\r\n * obj.put(key,value)\r\n * var param_2 = obj.get(key)\r\n * obj.remove(key)\r\n */"}],"testcase":"[\"MyHashMap\",\"put\",\"put\",\"get\",\"get\",\"put\",\"get\", \"remove\", \"get\"]\n[[],[1,1],[2,2],[1],[3],[2,1],[2],[2],[2]]","testable":true,"templateMeta":{"classname":"MyHashMap","maxbytesperline":400000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"put","params":[{"type":"integer","name":"key"},{"type":"integer","name":"value"}],"return":{"type":"void"},"comment":"value will always be non-negative."},{"name":"get","params":[{"type":"integer","name":"key"}],"return":{"type":"integer"},"comment":"Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key"},{"name":"remove","params":[{"type":"integer","name":"key"}],"return":{"type":"void"},"comment":"Removes the mapping of the specified value key if this map contains a mapping for the key"}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}