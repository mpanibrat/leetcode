{"id":923,"fid":887,"name":"Super Egg Drop","slug":"super-egg-drop","link":"https://leetcode.com/problems/super-egg-drop/description/","percent":22.94480227162546,"level":"Hard","category":"algorithms","totalAC":"3.3K","totalSubmit":"14.4K","desc":"You are given K eggs, and you have access to a building with N floors from 1 to N. \r\n\r\nEach egg is identical in function, and if an egg breaks, you cannot drop it again.\r\n\r\nYou know that there exists a floor F with 0 <= F <= N such that any egg dropped at a floor higher than F will break, and any egg dropped at or below floor F will not break.\r\n\r\nEach move, you may take an egg (if you have an unbroken one) and drop it from any floor X (with 1 <= X <= N). \r\n\r\nYour goal is to know with certainty what the value of F is.\r\n\r\nWhat is the minimum number of moves that you need to know with certainty what F is, regardless of the initial value of F?\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: K = 1, N = 2\r\nOutput: 2\r\nExplanation: \r\nDrop the egg from floor 1.  If it breaks, we know with certainty that F = 0.\r\nOtherwise, drop the egg from floor 2.  If it breaks, we know with certainty that F = 1.\r\nIf it didn't break, then we know with certainty F = 2.\r\nHence, we needed 2 moves in the worst case to know what F is with certainty.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: K = 2, N = 6\r\nOutput: 3\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: K = 3, N = 14\r\nOutput: 4\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= K <= 100\r\n\t1 <= N <= 10000\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int superEggDrop(int K, int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int superEggDrop(int K, int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def superEggDrop(self, K, N):\n        \"\"\"\n        :type K: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def superEggDrop(self, K, N):\n        \"\"\"\n        :type K: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int superEggDrop(int K, int N) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SuperEggDrop(int K, int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} K\n * @param {number} N\n * @return {number}\n */\nvar superEggDrop = function(K, N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} k\n# @param {Integer} n\n# @return {Integer}\ndef super_egg_drop(k, n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func superEggDrop(_ K: Int, _ N: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func superEggDrop(K int, N int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def superEggDrop(K: Int, N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun superEggDrop(K: Int, N: Int): Int {\n        \n    }\n}"}],"testcase":"1\n2","testable":true,"templateMeta":{"name":"superEggDrop","params":[{"name":"K","type":"integer"},{"name":"N","type":"integer"}],"return":{"type":"integer"}}}