{"id":457,"fid":457,"name":"Circular Array Loop","slug":"circular-array-loop","link":"https://leetcode.com/problems/circular-array-loop/description/","percent":25.407373024210294,"level":"Medium","category":"algorithms","totalAC":"10.4K","totalSubmit":"40.9K","desc":"You are given an array of positive and negative integers. If a number n at an index is positive, then move forward n steps. Conversely, if it's negative (-n), move backward n steps. Assume the first element of the array is forward next to the last element, and the last element is backward next to the first element. Determine if there is a loop in this array. A loop starts and ends at a particular index with more than 1 element along the loop. The loop must be \"forward\" or \"backward'.\r\n\r\nExample 1: Given the array [2, -1, 1, 2, 2], there is a loop, from index 0 -> 2 -> 3 -> 0.\r\n\r\nExample 2: Given the array [-1, 2], there is no loop.\r\n\r\nNote: The given array is guaranteed to contain no element \"0\".\r\n\r\nCan you do it in O(n) time complexity and O(1) space complexity?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool circularArrayLoop(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean circularArrayLoop(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def circularArrayLoop(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool circularArrayLoop(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CircularArrayLoop(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar circularArrayLoop = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef circular_array_loop(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func circularArrayLoop(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func circularArrayLoop(nums []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def circularArrayLoop(nums: Array[Int]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun circularArrayLoop(nums: IntArray): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[2, -1, 1, 2, 2]","testable":true,"templateMeta":{"name":"circularArrayLoop","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}