{"id":729,"fid":729,"name":"My Calendar I","slug":"my-calendar-i","link":"https://leetcode.com/problems/my-calendar-i/description/","percent":44.64505191777919,"level":"Medium","category":"algorithms","totalAC":"21.1K","totalSubmit":"47.2K","desc":"\r\nImplement a MyCalendar class to store your events. A new event can be added if adding the event will not cause a double booking.\r\n\r\nYour class will have the method, book(int start, int end).  Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start .\r\n\r\nA double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)\r\n\r\nFor each call to the method MyCalendar.book, return true if the event can be added to the calendar successfully without causing a double booking.  Otherwise, return false and do not add the event to the calendar.\r\n\r\n\r\nYour class will be called like this:\r\nMyCalendar cal = new MyCalendar();\r\nMyCalendar.book(start, end)\r\n\r\nExample 1:\r\n\r\nMyCalendar();\r\nMyCalendar.book(10, 20); // returns true\r\nMyCalendar.book(15, 25); // returns false\r\nMyCalendar.book(20, 30); // returns true\r\nExplanation: \r\nThe first event can be booked.  The second can't because time 15 is already booked by another event.\r\nThe third event can be booked, as the first event takes every time less than 20, but not including 20.\r\n\r\n\r\n\r\nNote:\r\nThe number of calls to MyCalendar.book per test case will be at most 1000.\r\nIn calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyCalendar {\npublic:\n    MyCalendar() {\n        \n    }\n    \n    bool book(int start, int end) {\n        \n    }\n};\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * bool param_1 = obj.book(start,end);\n */"},{"value":"java","text":"Java","defaultCode":"class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public boolean book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * boolean param_1 = obj.book(start,end);\n */"},{"value":"python","text":"Python","defaultCode":"class MyCalendar(object):\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)"},{"value":"python3","text":"Python3","defaultCode":"class MyCalendar:\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar()\n# param_1 = obj.book(start,end)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} MyCalendar;\n\nMyCalendar* myCalendarCreate() {\n    \n}\n\nbool myCalendarBook(MyCalendar* obj, int start, int end) {\n    \n}\n\nvoid myCalendarFree(MyCalendar* obj) {\n    \n}\n\n/**\n * Your MyCalendar struct will be instantiated and called as such:\n * struct MyCalendar* obj = myCalendarCreate();\n * bool param_1 = myCalendarBook(obj, start, end);\n * myCalendarFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyCalendar {\n\n    public MyCalendar() {\n        \n    }\n    \n    public bool Book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * MyCalendar obj = new MyCalendar();\n * bool param_1 = obj.Book(start,end);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar MyCalendar = function() {\n    \n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {boolean}\n */\nMyCalendar.prototype.book = function(start, end) {\n    \n};\n\n/** \n * Your MyCalendar object will be instantiated and called as such:\n * var obj = Object.create(MyCalendar).createNew()\n * var param_1 = obj.book(start,end)\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyCalendar\n    def initialize()\n        \n    end\n\n\n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Boolean\n=end\n    def book(start, end)\n        \n    end\n\n\nend\n\n# Your MyCalendar object will be instantiated and called as such:\n# obj = MyCalendar.new()\n# param_1 = obj.book(start, end)"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyCalendar {\n\n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Bool {\n      \n    }\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * let obj = MyCalendar()\n * let ret_1: Bool = obj.book(start, end)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MyCalendar struct {\n    \n}\n\n\nfunc Constructor() MyCalendar {\n    \n}\n\n\nfunc (this *MyCalendar) Book(start int, end int) bool {\n    \n}\n\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyCalendar() {\n\n    def book(start: Int, end: Int): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = new MyCalendar()\n * var param_1 = obj.book(start,end)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyCalendar() {\n\n    fun book(start: Int, end: Int): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MyCalendar object will be instantiated and called as such:\n * var obj = MyCalendar()\n * var param_1 = obj.book(start,end)\n */"}],"testcase":"[\"MyCalendar\",\"book\",\"book\",\"book\"]\n[[],[10,20],[15,25],[20,30]]","testable":true,"templateMeta":{"classname":"MyCalendar","constructor":{"params":[]},"methods":[{"name":"book","params":[{"type":"integer","name":"start"},{"type":"integer","name":"end"}],"return":{"type":"boolean"}}],"systemdesign":true,"params":[{"name":"starts","type":"integer[]"},{"name":"ends","type":"integer[]"}],"return":{"type":"list<boolean>","dealloc":true}}}