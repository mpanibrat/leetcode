{"id":271,"fid":271,"name":"Encode and Decode Strings","slug":"encode-and-decode-strings","link":"https://leetcode.com/problems/encode-and-decode-strings/description/","percent":25.776090330827525,"level":"Medium","category":"algorithms","totalAC":"33.9K","totalSubmit":"131.4K","desc":"\r\nDesign an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.\r\n\r\n\r\nMachine 1 (sender) has the function:\r\n\r\nstring encode(vector<string> strs) {\r\n  // ... your code\r\n  return encoded_string;\r\n}\r\n\r\nMachine 2 (receiver) has the function:\r\n\r\nvector<string> decode(string s) {\r\n  //... your code\r\n  return strs;\r\n}\r\n\r\n\r\n\r\nSo Machine 1 does:\r\nstring encoded_string = encode(strs);\r\n\r\n\r\n\r\nand Machine 2 does:\r\nvector<string> strs2 = decode(encoded_string);\r\n\r\n\r\n\r\nstrs2 in Machine 2 should be the same as strs in Machine 1.\r\n\r\n\r\nImplement the encode and decode methods.\r\n\r\n\r\nNote:\r\n\r\nThe string may contain any possible characters out of 256 valid ascii characters. Your algorithm should be generalized enough to work on any possible characters.\r\nDo not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.\r\nDo not rely on any library method such as eval or serialize methods. You should implement your own encode/decode algorithm.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Codec {\r\npublic:\r\n\r\n    // Encodes a list of strings to a single string.\r\n    string encode(vector<string>& strs) {\r\n        \r\n    }\r\n\r\n    // Decodes a single string to a list of strings.\r\n    vector<string> decode(string s) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.decode(codec.encode(strs));"},{"value":"java","text":"Java","defaultCode":"public class Codec {\r\n\r\n    // Encodes a list of strings to a single string.\r\n    public String encode(List<String> strs) {\r\n        \r\n    }\r\n\r\n    // Decodes a single string to a list of strings.\r\n    public List<String> decode(String s) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(strs));"},{"value":"python","text":"Python","defaultCode":"class Codec:\r\n\r\n    def encode(self, strs):\r\n        \"\"\"Encodes a list of strings to a single string.\r\n        \r\n        :type strs: List[str]\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def decode(self, s):\r\n        \"\"\"Decodes a single string to a list of strings.\r\n        \r\n        :type s: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.decode(codec.encode(strs))"},{"value":"c","text":"C","defaultCode":"/** Encodes a list of strings to a single string */\r\nchar* encode(char** strs, int strsSize) {\r\n    \r\n}\r\n\r\n/**\r\n * Decodes a single string to a list of strings.\r\n *\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** decode(char* s, int* returnSize) {\r\n    \r\n}\r\n\r\n// Your functions will be called as such:\r\n// char* s = encode(strs, strsSize);\r\n// decode(s, &returnSize);"},{"value":"csharp","text":"C#","defaultCode":"public class Codec {\r\n\r\n    // Encodes a list of strings to a single string.\r\n    public string encode(IList<string> strs) {\r\n        \r\n    }\r\n\r\n    // Decodes a single string to a list of strings.\r\n    public IList<string> decode(string s) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(strs));"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Encodes a list of strings to a single string.\r\n *\r\n * @param {string[]} strs\r\n * @return {string}\r\n */\r\nvar encode = function(strs) {\r\n    \r\n};\r\n\r\n/**\r\n * Decodes a single string to a list of strings.\r\n *\r\n * @param {string} s\r\n * @return {string[]}\r\n */\r\nvar decode = function(s) {\r\n    \r\n};\r\n\r\n/**\r\n * Your functions will be called as such:\r\n * decode(encode(strs));\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"# Encodes a list of strings to a single string.\r\n#\r\n# @param {string[]} strs\r\n# @return {string}\r\ndef encode(strs)\r\n    \r\nend\r\n\r\n# Decodes a single string to a list of strings.\r\n#\r\n# @param {string} s\r\n# @return {string[]}\r\ndef decode(s)\r\n    \r\nend\r\n\r\n\r\n# Your functions will be called as such:\r\n# decode(encode(strs))"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func CodecDriver(_ strs: [String]) -> [String] {\n\n    }\n}"}],"testcase":"[]","testable":false,"templateMeta":{"name":"CodecDriver","params":[{"name":"strs","type":"list<string>"}],"return":{"type":"list<string>"},"generatedriver":false,"generatedefinition":false}}