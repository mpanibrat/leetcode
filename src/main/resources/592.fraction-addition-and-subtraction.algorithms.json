{"id":592,"fid":592,"name":"Fraction Addition and Subtraction","slug":"fraction-addition-and-subtraction","link":"https://leetcode.com/problems/fraction-addition-and-subtraction/description/","percent":46.07294317217981,"level":"Medium","category":"algorithms","totalAC":"10.9K","totalSubmit":"23.6K","desc":"Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be irreducible fraction. If your final result is an integer, say 2, you need to change it to the format of fraction that has denominator 1. So in this case, 2 should be converted to 2/1.\r\n\r\nExample 1:\r\n\r\nInput:\"-1/2+1/2\"\r\nOutput: \"0/1\"\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput:\"-1/2+1/2+1/3\"\r\nOutput: \"1/3\"\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput:\"1/3-1/2\"\r\nOutput: \"-1/6\"\r\n\r\n\r\n\r\nExample 4:\r\n\r\nInput:\"5/3+1/3\"\r\nOutput: \"2/1\"\r\n\r\n\r\n\r\nNote:\r\n\r\nThe input string only contains '0' to '9', '/', '+' and '-'. So does the output.\r\nEach fraction (input and output) has format Â±numerator/denominator. If the first input fraction or the output is positive, then '+' will be omitted.\r\nThe input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above. \r\nThe number of given fractions will be in the range [1,10].\r\nThe numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string fractionAddition(string expression) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String fractionAddition(String expression) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def fractionAddition(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def fractionAddition(self, expression):\n        \"\"\"\n        :type expression: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* fractionAddition(char* expression) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string FractionAddition(string expression) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} expression\n * @return {string}\n */\nvar fractionAddition = function(expression) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} expression\n# @return {String}\ndef fraction_addition(expression)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func fractionAddition(_ expression: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func fractionAddition(expression string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def fractionAddition(expression: String): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun fractionAddition(expression: String): String {\n        \n    }\n}"}],"testcase":"\"-1/2+1/2\"","testable":true,"templateMeta":{"name":"fractionAddition","params":[{"name":"expression","type":"string"}],"return":{"type":"string"}}}