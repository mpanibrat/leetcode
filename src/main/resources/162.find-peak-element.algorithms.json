{"id":162,"fid":162,"name":"Find Peak Element","slug":"find-peak-element","link":"https://leetcode.com/problems/find-peak-element/description/","percent":39.9637716021235,"level":"Medium","category":"algorithms","totalAC":"191.1K","totalSubmit":"478.1K","desc":"A peak element is an element that is greater than its neighbors.\r\n\r\nGiven an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.\r\n\r\nThe array may contain multiple peaks, in that case return the index to any one of the peaks is fine.\r\n\r\nYou may imagine that nums[-1] = nums[n] = -∞.\r\n\r\nExample 1:\r\n\r\n\r\nInput: nums = [1,2,3,1]\r\nOutput: 2\r\nExplanation: 3 is a peak element and your function should return the index number 2.\r\n\r\nExample 2:\r\n\r\n\r\nInput: nums = [1,2,1,3,5,6,4]\r\nOutput: 1 or 5 \r\nExplanation: Your function can return either index number 1 where the peak element is 2, \r\n             or index number 5 where the peak element is 6.\r\n\r\n\r\nNote:\r\n\r\nYour solution should be in logarithmic complexity.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findPeakElement(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int findPeakElement(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findPeakElement(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findPeakElement(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findPeakElement(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindPeakElement(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findPeakElement = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_peak_element(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findPeakElement(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findPeakElement(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findPeakElement(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findPeakElement(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3,1]","testable":true,"templateMeta":{"name":"findPeakElement","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}