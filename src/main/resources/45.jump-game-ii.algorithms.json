{"id":45,"fid":45,"name":"Jump Game II","slug":"jump-game-ii","link":"https://leetcode.com/problems/jump-game-ii/description/","percent":26.457085112119277,"level":"Hard","category":"algorithms","totalAC":"136.4K","totalSubmit":"515.6K","desc":"Given an array of non-negative integers, you are initially positioned at the first index of the array.\r\n\r\nEach element in the array represents your maximum jump length at that position.\r\n\r\nYour goal is to reach the last index in the minimum number of jumps.\r\n\r\nExample:\r\n\r\n\r\nInput: [2,3,1,1,4]\r\nOutput: 2\r\nExplanation: The minimum number of jumps to reach the last index is 2.\r\n    Jump 1 step from index 0 to 1, then 3 steps to the last index.\r\n\r\nNote:\r\n\r\nYou can assume that you can always reach the last index.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int jump(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int jump(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def jump(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def jump(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int jump(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int Jump(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar jump = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef jump(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func jump(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func jump(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def jump(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun jump(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[2,3,1,1,4]","testable":true,"templateMeta":{"name":"jump","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}