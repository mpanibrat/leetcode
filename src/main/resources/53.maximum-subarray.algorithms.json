{"id":53,"fid":53,"name":"Maximum Subarray","slug":"maximum-subarray","link":"https://leetcode.com/problems/maximum-subarray/description/","percent":41.62103165187681,"level":"Easy","category":"algorithms","totalAC":"394.7K","totalSubmit":"948.3K","desc":"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\r\n\r\nExample:\r\n\r\n\r\nInput: [-2,1,-3,4,-1,2,1,-5,4],\r\nOutput: 6\r\nExplanation: [4,-1,2,1] has the largest sum = 6.\r\n\r\n\r\nFollow up:\r\n\r\nIf you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maxSubArray(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int maxSubArray(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxSubArray(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maxSubArray(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int maxSubArray(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaxSubArray(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxSubArray = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_sub_array(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxSubArray(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxSubArray(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maxSubArray(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maxSubArray(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[-2,1,-3,4,-1,2,1,-5,4]","testable":true,"templateMeta":{"name":"maxSubArray","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}