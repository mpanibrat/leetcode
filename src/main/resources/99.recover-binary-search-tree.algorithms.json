{"id":99,"fid":99,"name":"Recover Binary Search Tree","slug":"recover-binary-search-tree","link":"https://leetcode.com/problems/recover-binary-search-tree/description/","percent":32.73559869200086,"level":"Hard","category":"algorithms","totalAC":"102K","totalSubmit":"311.6K","desc":"Two elements of a binary search tree (BST) are swapped by mistake.\r\n\r\nRecover the tree without changing its structure.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,3,null,null,2]\r\n\r\n   1\r\n  /\r\n 3\r\n  \\\r\n   2\r\n\r\nOutput: [3,1,null,null,2]\r\n\r\n   3\r\n  /\r\n 1\r\n  \\\r\n   2\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [3,1,4,null,null,2]\r\n\r\n  3\r\n / \\\r\n1   4\r\n   /\r\n  2\r\n\r\nOutput: [2,1,4,null,null,3]\r\n\r\n  2\r\n / \\\r\n1   4\r\n   /\r\n  3\r\n\r\n\r\nFollow up:\r\n\r\n\r\n\tA solution using O(n) space is pretty straight forward.\r\n\tCould you devise a constant space solution?\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void recoverTree(TreeNode* root) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public void recoverTree(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def recoverTree(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: void Do not return anything, modify root in-place instead.\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def recoverTree(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: void Do not return anything, modify root in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nvoid recoverTree(struct TreeNode* root) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void RecoverTree(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {void} Do not return anything, modify root in-place instead.\r\n */\r\nvar recoverTree = function(root) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {Void} Do not return anything, modify root in-place instead.\r\ndef recover_tree(root)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func recoverTree(_ root: TreeNode?) {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc recoverTree(root *TreeNode)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def recoverTree(root: TreeNode): Unit = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun recoverTree(root: TreeNode?): Unit {\r\n        \r\n    }\r\n}"}],"testcase":"[1,3,null,null,2]","testable":true,"templateMeta":{"name":"recoverTree","params":[{"name":"root","type":"TreeNode"}],"return":{"type":"void"},"output":{"paramindex":0}}}