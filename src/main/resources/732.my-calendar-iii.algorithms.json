{"id":732,"fid":732,"name":"My Calendar III","slug":"my-calendar-iii","link":"https://leetcode.com/problems/my-calendar-iii/description/","percent":50.87598116169545,"level":"Hard","category":"algorithms","totalAC":"8.1K","totalSubmit":"15.9K","desc":"Implement a MyCalendarThree class to store your events. A new event can always be added.\r\n\r\nYour class will have one method, book(int start, int end). Formally, this represents a booking on the half open interval [start, end), the range of real numbers x such that start <= x < end.\r\n\r\nA K-booking happens when K events have some non-empty intersection (ie., there is some time that is common to all K events.)\r\n\r\nFor each call to the method MyCalendar.book, return an integer K representing the largest integer such that there exists a K-booking in the calendar.\r\nYour class will be called like this: MyCalendarThree cal = new MyCalendarThree(); MyCalendarThree.book(start, end)\r\n\r\nExample 1:\r\n\r\n\r\nMyCalendarThree();\r\nMyCalendarThree.book(10, 20); // returns 1\r\nMyCalendarThree.book(50, 60); // returns 1\r\nMyCalendarThree.book(10, 40); // returns 2\r\nMyCalendarThree.book(5, 15); // returns 3\r\nMyCalendarThree.book(5, 10); // returns 3\r\nMyCalendarThree.book(25, 55); // returns 3\r\nExplanation: \r\nThe first two events can be booked and are disjoint, so the maximum K-booking is a 1-booking.\r\nThe third event [10, 40) intersects the first event, and the maximum K-booking is a 2-booking.\r\nThe remaining events cause the maximum K-booking to be only a 3-booking.\r\nNote that the last event locally causes a 2-booking, but the answer is still 3 because\r\neg. [10, 20), [10, 40), and [5, 15) are still triple booked.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe number of calls to MyCalendarThree.book per test case will be at most 400.\r\n\tIn calls to MyCalendarThree.book(start, end), start and end are integers in the range [0, 10^9].\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyCalendarThree {\npublic:\n    MyCalendarThree() {\n        \n    }\n    \n    int book(int start, int end) {\n        \n    }\n};\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * MyCalendarThree obj = new MyCalendarThree();\n * int param_1 = obj.book(start,end);\n */"},{"value":"java","text":"Java","defaultCode":"class MyCalendarThree {\n\n    public MyCalendarThree() {\n        \n    }\n    \n    public int book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * MyCalendarThree obj = new MyCalendarThree();\n * int param_1 = obj.book(start,end);\n */"},{"value":"python","text":"Python","defaultCode":"class MyCalendarThree(object):\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MyCalendarThree object will be instantiated and called as such:\n# obj = MyCalendarThree()\n# param_1 = obj.book(start,end)"},{"value":"python3","text":"Python3","defaultCode":"class MyCalendarThree:\n\n    def __init__(self):\n        \n\n    def book(self, start, end):\n        \"\"\"\n        :type start: int\n        :type end: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your MyCalendarThree object will be instantiated and called as such:\n# obj = MyCalendarThree()\n# param_1 = obj.book(start,end)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} MyCalendarThree;\n\nMyCalendarThree* myCalendarThreeCreate() {\n    \n}\n\nint myCalendarThreeBook(MyCalendarThree* obj, int start, int end) {\n    \n}\n\nvoid myCalendarThreeFree(MyCalendarThree* obj) {\n    \n}\n\n/**\n * Your MyCalendarThree struct will be instantiated and called as such:\n * struct MyCalendarThree* obj = myCalendarThreeCreate();\n * int param_1 = myCalendarThreeBook(obj, start, end);\n * myCalendarThreeFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyCalendarThree {\n\n    public MyCalendarThree() {\n        \n    }\n    \n    public int Book(int start, int end) {\n        \n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * MyCalendarThree obj = new MyCalendarThree();\n * int param_1 = obj.Book(start,end);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar MyCalendarThree = function() {\n    \n};\n\n/** \n * @param {number} start \n * @param {number} end\n * @return {number}\n */\nMyCalendarThree.prototype.book = function(start, end) {\n    \n};\n\n/** \n * Your MyCalendarThree object will be instantiated and called as such:\n * var obj = Object.create(MyCalendarThree).createNew()\n * var param_1 = obj.book(start,end)\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyCalendarThree\n    def initialize()\n        \n    end\n\n\n=begin\n    :type start: Integer\n    :type end: Integer\n    :rtype: Integer\n=end\n    def book(start, end)\n        \n    end\n\n\nend\n\n# Your MyCalendarThree object will be instantiated and called as such:\n# obj = MyCalendarThree.new()\n# param_1 = obj.book(start, end)"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyCalendarThree {\n\n    init() {\n        \n    }\n    \n    func book(_ start: Int, _ end: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * let obj = MyCalendarThree()\n * let ret_1: Int = obj.book(start, end)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MyCalendarThree struct {\n    \n}\n\n\nfunc Constructor() MyCalendarThree {\n    \n}\n\n\nfunc (this *MyCalendarThree) Book(start int, end int) int {\n    \n}\n\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Book(start,end);\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyCalendarThree() {\n\n    def book(start: Int, end: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * var obj = new MyCalendarThree()\n * var param_1 = obj.book(start,end)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyCalendarThree() {\n\n    fun book(start: Int, end: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your MyCalendarThree object will be instantiated and called as such:\n * var obj = MyCalendarThree()\n * var param_1 = obj.book(start,end)\n */"}],"testcase":"[\"MyCalendarThree\",\"book\",\"book\",\"book\",\"book\",\"book\",\"book\"]\n[[],[10,20],[50,60],[10,40],[5,15],[5,10],[25,55]]","testable":true,"templateMeta":{"classname":"MyCalendarThree","constructor":{"params":[]},"methods":[{"name":"book","params":[{"type":"integer","name":"start"},{"type":"integer","name":"end"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"starts","type":"integer[]"},{"name":"ends","type":"integer[]"}],"return":{"type":"list<boolean>","dealloc":true}}}