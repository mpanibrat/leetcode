{"id":677,"fid":677,"name":"Map Sum Pairs","slug":"map-sum-pairs","link":"https://leetcode.com/problems/map-sum-pairs/description/","percent":50.61644579621986,"level":"Medium","category":"algorithms","totalAC":"18.6K","totalSubmit":"36.8K","desc":"\r\nImplement a MapSum class with insert, and sum methods.\r\n\r\n\r\n\r\nFor the method insert, you'll be given a pair of (string, integer). The string represents the key and the integer represents the value. If the key already existed, then the original key-value pair will be overridden to the new one.\r\n\r\n\r\n\r\nFor the method sum, you'll be given a string representing the prefix, and you need to return the sum of all the pairs' value whose key starts with the prefix.\r\n\r\n\r\nExample 1:\r\n\r\nInput: insert(\"apple\", 3), Output: Null\r\nInput: sum(\"ap\"), Output: 3\r\nInput: insert(\"app\", 2), Output: Null\r\nInput: sum(\"ap\"), Output: 5\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MapSum {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MapSum() {\r\n        \r\n    }\r\n    \r\n    void insert(string key, int val) {\r\n        \r\n    }\r\n    \r\n    int sum(string prefix) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MapSum object will be instantiated and called as such:\r\n * MapSum obj = new MapSum();\r\n * obj.insert(key,val);\r\n * int param_2 = obj.sum(prefix);\r\n */"},{"value":"java","text":"Java","defaultCode":"class MapSum {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MapSum() {\r\n        \r\n    }\r\n    \r\n    public void insert(String key, int val) {\r\n        \r\n    }\r\n    \r\n    public int sum(String prefix) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MapSum object will be instantiated and called as such:\r\n * MapSum obj = new MapSum();\r\n * obj.insert(key,val);\r\n * int param_2 = obj.sum(prefix);\r\n */"},{"value":"python","text":"Python","defaultCode":"class MapSum(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def insert(self, key, val):\r\n        \"\"\"\r\n        :type key: str\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def sum(self, prefix):\r\n        \"\"\"\r\n        :type prefix: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MapSum object will be instantiated and called as such:\r\n# obj = MapSum()\r\n# obj.insert(key,val)\r\n# param_2 = obj.sum(prefix)"},{"value":"python3","text":"Python3","defaultCode":"class MapSum:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def insert(self, key, val):\r\n        \"\"\"\r\n        :type key: str\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def sum(self, prefix):\r\n        \"\"\"\r\n        :type prefix: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MapSum object will be instantiated and called as such:\r\n# obj = MapSum()\r\n# obj.insert(key,val)\r\n# param_2 = obj.sum(prefix)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MapSum;\r\n\r\n/** Initialize your data structure here. */\r\nMapSum* mapSumCreate() {\r\n    \r\n}\r\n\r\nvoid mapSumInsert(MapSum* obj, char* key, int val) {\r\n    \r\n}\r\n\r\nint mapSumSum(MapSum* obj, char* prefix) {\r\n    \r\n}\r\n\r\nvoid mapSumFree(MapSum* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MapSum struct will be instantiated and called as such:\r\n * struct MapSum* obj = mapSumCreate();\r\n * mapSumInsert(obj, key, val);\r\n * int param_2 = mapSumSum(obj, prefix);\r\n * mapSumFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MapSum {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MapSum() {\r\n        \r\n    }\r\n    \r\n    public void Insert(string key, int val) {\r\n        \r\n    }\r\n    \r\n    public int Sum(string prefix) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MapSum object will be instantiated and called as such:\r\n * MapSum obj = new MapSum();\r\n * obj.Insert(key,val);\r\n * int param_2 = obj.Sum(prefix);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MapSum = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {string} key \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nMapSum.prototype.insert = function(key, val) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {string} prefix\r\n * @return {number}\r\n */\r\nMapSum.prototype.sum = function(prefix) {\r\n    \r\n};\r\n\r\n/** \r\n * Your MapSum object will be instantiated and called as such:\r\n * var obj = Object.create(MapSum).createNew()\r\n * obj.insert(key,val)\r\n * var param_2 = obj.sum(prefix)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MapSum\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: String\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def insert(key, val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type prefix: String\r\n    :rtype: Integer\r\n=end\r\n    def sum(prefix)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MapSum object will be instantiated and called as such:\r\n# obj = MapSum.new()\r\n# obj.insert(key, val)\r\n# param_2 = obj.sum(prefix)"},{"value":"swift","text":"Swift","defaultCode":"\nclass MapSum {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func insert(_ key: String, _ val: Int) {\n      \n    }\n    \n    func sum(_ prefix: String) -> Int {\n      \n    }\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * let obj = MapSum()\n * obj.insert(key, val)\n * let ret_2: Int = obj.sum(prefix)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MapSum struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MapSum {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MapSum) Insert(key string, val int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MapSum) Sum(prefix string) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MapSum object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Insert(key,val);\r\n * param_2 := obj.Sum(prefix);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MapSum() {\n\n    /** Initialize your data structure here. */\n    \n\n    def insert(key: String, `val`: Int) {\n        \n    }\n\n    def sum(prefix: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * var obj = new MapSum()\n * obj.insert(key,`val`)\n * var param_2 = obj.sum(prefix)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MapSum() {\n\n    /** Initialize your data structure here. */\n    \n\n    fun insert(key: String, `val`: Int) {\n        \n    }\n\n    fun sum(prefix: String): Int {\n        \n    }\n\n}\n\n/**\n * Your MapSum object will be instantiated and called as such:\n * var obj = MapSum()\n * obj.insert(key,`val`)\n * var param_2 = obj.sum(prefix)\n */"}],"testcase":"[\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n[[], [\"apple\",3], [\"ap\"], [\"app\",2], [\"ap\"]]","testable":true,"templateMeta":{"classname":"MapSum","maxbytesperline":210000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"insert","params":[{"type":"string","name":"key"},{"type":"integer","name":"val"}],"return":{"type":"void"}},{"name":"sum","params":[{"type":"string","name":"prefix"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}