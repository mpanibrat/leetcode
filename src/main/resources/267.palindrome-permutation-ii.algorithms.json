{"id":267,"fid":267,"name":"Palindrome Permutation II","slug":"palindrome-permutation-ii","link":"https://leetcode.com/problems/palindrome-permutation-ii/description/","percent":32.5900617394953,"level":"Medium","category":"algorithms","totalAC":"21.7K","totalSubmit":"66.7K","desc":"Given a string s, return all the palindromic permutations (without duplicates) of it. Return an empty list if no palindromic permutation could be form.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \"aabb\"\r\nOutput: [\"abba\", \"baab\"]\r\n\r\nExample 2:\r\n\r\n\r\nInput: \"abc\"\r\nOutput: []\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> generatePalindromes(string s) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> generatePalindromes(String s) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def generatePalindromes(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def generatePalindromes(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** generatePalindromes(char* s, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> GeneratePalindromes(string s) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @return {string[]}\r\n */\r\nvar generatePalindromes = function(s) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {String[]}\r\ndef generate_palindromes(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generatePalindromes(_ s: String) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func generatePalindromes(s string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def generatePalindromes(s: String): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun generatePalindromes(s: String): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"\"aabb\"","testable":true,"templateMeta":{"name":"generatePalindromes","params":[{"name":"s","type":"string"}],"return":{"type":"list<string>"}}}