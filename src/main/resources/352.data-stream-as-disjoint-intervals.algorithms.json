{"id":352,"fid":352,"name":"Data Stream as Disjoint Intervals","slug":"data-stream-as-disjoint-intervals","link":"https://leetcode.com/problems/data-stream-as-disjoint-intervals/description/","percent":42.02735852979086,"level":"Hard","category":"algorithms","totalAC":"20.2K","totalSubmit":"48.1K","desc":"Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.\r\n\r\nFor example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:\r\n\r\n\r\n[1, 1]\r\n[1, 1], [3, 3]\r\n[1, 1], [3, 3], [7, 7]\r\n[1, 3], [7, 7]\r\n[1, 3], [6, 7]\r\n\r\n\r\nFollow up:\r\nWhat if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass SummaryRanges {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    SummaryRanges() {\r\n        \r\n    }\r\n    \r\n    void addNum(int val) {\r\n        \r\n    }\r\n    \r\n    vector<Interval> getIntervals() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * SummaryRanges obj = new SummaryRanges();\r\n * obj.addNum(val);\r\n * vector<Interval> param_2 = obj.getIntervals();\r\n */"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() { start = 0; end = 0; }\r\n *     Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\nclass SummaryRanges {\r\n\r\n    /** Initialize your data structure here. */\r\n    public SummaryRanges() {\r\n        \r\n    }\r\n    \r\n    public void addNum(int val) {\r\n        \r\n    }\r\n    \r\n    public List<Interval> getIntervals() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * SummaryRanges obj = new SummaryRanges();\r\n * obj.addNum(val);\r\n * List<Interval> param_2 = obj.getIntervals();\r\n */"},{"value":"python","text":"Python","defaultCode":"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass SummaryRanges(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def addNum(self, val):\r\n        \"\"\"\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def getIntervals(self):\r\n        \"\"\"\r\n        :rtype: List[Interval]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your SummaryRanges object will be instantiated and called as such:\r\n# obj = SummaryRanges()\r\n# obj.addNum(val)\r\n# param_2 = obj.getIntervals()"},{"value":"python3","text":"Python3","defaultCode":"# Definition for an interval.\r\n# class Interval:\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass SummaryRanges:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def addNum(self, val):\r\n        \"\"\"\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def getIntervals(self):\r\n        \"\"\"\r\n        :rtype: List[Interval]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your SummaryRanges object will be instantiated and called as such:\r\n# obj = SummaryRanges()\r\n# obj.addNum(val)\r\n# param_2 = obj.getIntervals()"},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n * };\r\n */\r\ntypedef struct {\r\n    \r\n} SummaryRanges;\r\n\r\n/** Initialize your data structure here. */\r\nSummaryRanges* summaryRangesCreate() {\r\n    \r\n}\r\n\r\nvoid summaryRangesAddNum(SummaryRanges* obj, int val) {\r\n    \r\n}\r\n\r\nstruct Interval* summaryRangesGetIntervals(SummaryRanges* obj, int *returnSize) {\r\n    \r\n}\r\n\r\nvoid summaryRangesFree(SummaryRanges* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your SummaryRanges struct will be instantiated and called as such:\r\n * struct SummaryRanges* obj = summaryRangesCreate();\r\n * summaryRangesAddNum(obj, val);\r\n * struct Interval* param_2 = summaryRangesGetIntervals(obj);\r\n * summaryRangesFree(obj);\r\n */"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for an interval.\n * public class Interval {\n *   public var start: Int\n *   public var end: Int\n *   public init(_ start: Int, _ end: Int) {\n *     self.start = start\n *     self.end = end\n *   }\n * }\n */\n\nclass SummaryRanges {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func addNum(_ val: Int) {\n      \n    }\n    \n    func getIntervals() -> [Interval] {\n      \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * let obj = SummaryRanges()\n * obj.addNum(val)\n * let ret_2: [Interval] = obj.getIntervals()\n */\n "},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for an interval.\r\n * type Interval struct {\r\n *\t   Start int\r\n *\t   End   int\r\n * }\r\n */\r\ntype SummaryRanges struct {\r\n\r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() SummaryRanges {\r\n\r\n}\r\n\r\n\r\nfunc (this *SummaryRanges) Addnum(val int)  {\r\n\r\n}\r\n\r\n\r\nfunc (this *SummaryRanges) Getintervals() []Interval {\r\n\r\n}\r\n\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Addnum(val);\r\n * param_2 := obj.Getintervals();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for an interval.\r\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\r\n *   var start: Int = _start\r\n *   var end: Int = _end\r\n * }\r\n */\r\nclass SummaryRanges() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    def addNum(`val`: Int) {\r\n        \r\n    }\r\n\r\n    def getIntervals(): List[Interval] = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * var obj = new SummaryRanges()\r\n * obj.addNum(`val`)\r\n * var param_2 = obj.getIntervals()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for an interval.\r\n * class Interval(\r\n *     var start: Int = 0,\r\n *     var end: Int = 0\r\n * )\r\n */\r\nclass SummaryRanges() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    fun addNum(`val`: Int) {\r\n        \r\n    }\r\n\r\n    fun getIntervals(): List<Interval> {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your SummaryRanges object will be instantiated and called as such:\r\n * var obj = SummaryRanges()\r\n * obj.addNum(`val`)\r\n * var param_2 = obj.getIntervals()\r\n */"}],"testcase":"[\"SummaryRanges\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\",\"addNum\",\"getIntervals\"]\n[[],[1],[],[3],[],[7],[],[2],[],[6],[]]","testable":true,"templateMeta":{"classname":"SummaryRanges","constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"addNum","params":[{"type":"integer","name":"val"}],"return":{"type":"void"}},{"name":"getIntervals","params":[],"return":{"type":"list<Interval>"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}