{"id":831,"fid":813,"name":"Largest Sum of Averages","slug":"largest-sum-of-averages","link":"https://leetcode.com/problems/largest-sum-of-averages/description/","percent":42.325487829410584,"level":"Medium","category":"algorithms","totalAC":"8.4K","totalSubmit":"19.9K","desc":"We partition a row of numbers A into at most K adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?\r\n\r\nNote that our partition must use every number in A, and that scores are not necessarily integers.\r\n\r\n\r\nExample:\r\nInput: \r\nA = [9,1,2,3,9]\r\nK = 3\r\nOutput: 20\r\nExplanation: \r\nThe best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\r\nWe could have also partitioned A into [9, 1], [2], [3, 9], for example.\r\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\r\n\r\n\r\n \r\n\r\nNote: \r\n\r\n\r\n\t1 <= A.length <= 100.\r\n\t1 <= A[i] <= 10000.\r\n\t1 <= K <= A.length.\r\n\tAnswers within 10^-6 of the correct answer will be accepted as correct.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    double largestSumOfAverages(vector<int>& A, int K) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double largestSumOfAverages(int[] A, int K) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def largestSumOfAverages(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def largestSumOfAverages(self, A, K):\n        \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"double largestSumOfAverages(int* A, int ASize, int K) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public double LargestSumOfAverages(int[] A, int K) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @param {number} K\n * @return {number}\n */\nvar largestSumOfAverages = function(A, K) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @param {Integer} k\n# @return {Float}\ndef largest_sum_of_averages(a, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func largestSumOfAverages(_ A: [Int], _ K: Int) -> Double {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func largestSumOfAverages(A []int, K int) float64 {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def largestSumOfAverages(A: Array[Int], K: Int): Double = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun largestSumOfAverages(A: IntArray, K: Int): Double {\n        \n    }\n}"}],"testcase":"[9,1,2,3,9]\n3","testable":true,"templateMeta":{"name":"largestSumOfAverages","params":[{"name":"A","type":"integer[]"},{"name":"K","type":"integer"}],"return":{"type":"double"}}}