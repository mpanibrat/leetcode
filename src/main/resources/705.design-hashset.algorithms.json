{"id":816,"fid":705,"name":"Design HashSet","slug":"design-hashset","link":"https://leetcode.com/problems/design-hashset/description/","percent":43.157596371882086,"level":"Easy","category":"algorithms","totalAC":"7.6K","totalSubmit":"17.6K","desc":"Design a HashSet without using any built-in hash table libraries.\r\n\r\nTo be specific, your design should include these functions:\r\n\r\n\r\n\tadd(value): Insert a value into the HashSet. \r\n\tcontains(value) : Return whether the value exists in the HashSet or not.\r\n\tremove(value): Remove a value in the HashSet. If the value does not exist in the HashSet, do nothing.\r\n\r\n\r\n\r\nExample:\r\n\r\n\r\nMyHashSet hashSet = new MyHashSet();\r\nhashSet.add(1);         \r\nhashSet.add(2);         \r\nhashSet.contains(1);    // returns true\r\nhashSet.contains(3);    // returns false (not found)\r\nhashSet.add(2);          \r\nhashSet.contains(2);    // returns true\r\nhashSet.remove(2);          \r\nhashSet.contains(2);    // returns false (already removed)\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\tAll values will be in the range of [0, 1000000].\r\n\tThe number of operations will be in the range of [1, 10000].\r\n\tPlease do not use the built-in HashSet library.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyHashSet {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyHashSet() {\r\n        \r\n    }\r\n    \r\n    void add(int key) {\r\n        \r\n    }\r\n    \r\n    void remove(int key) {\r\n        \r\n    }\r\n    \r\n    /** Returns true if this set contains the specified element */\r\n    bool contains(int key) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyHashSet object will be instantiated and called as such:\r\n * MyHashSet obj = new MyHashSet();\r\n * obj.add(key);\r\n * obj.remove(key);\r\n * bool param_3 = obj.contains(key);\r\n */"},{"value":"java","text":"Java","defaultCode":"class MyHashSet {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyHashSet() {\r\n        \r\n    }\r\n    \r\n    public void add(int key) {\r\n        \r\n    }\r\n    \r\n    public void remove(int key) {\r\n        \r\n    }\r\n    \r\n    /** Returns true if this set contains the specified element */\r\n    public boolean contains(int key) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyHashSet object will be instantiated and called as such:\r\n * MyHashSet obj = new MyHashSet();\r\n * obj.add(key);\r\n * obj.remove(key);\r\n * boolean param_3 = obj.contains(key);\r\n */"},{"value":"python","text":"Python","defaultCode":"class MyHashSet(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def add(self, key):\r\n        \"\"\"\r\n        :type key: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def remove(self, key):\r\n        \"\"\"\r\n        :type key: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def contains(self, key):\r\n        \"\"\"\r\n        Returns true if this set contains the specified element\r\n        :type key: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyHashSet object will be instantiated and called as such:\r\n# obj = MyHashSet()\r\n# obj.add(key)\r\n# obj.remove(key)\r\n# param_3 = obj.contains(key)"},{"value":"python3","text":"Python3","defaultCode":"class MyHashSet:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def add(self, key):\r\n        \"\"\"\r\n        :type key: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def remove(self, key):\r\n        \"\"\"\r\n        :type key: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def contains(self, key):\r\n        \"\"\"\r\n        Returns true if this set contains the specified element\r\n        :type key: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyHashSet object will be instantiated and called as such:\r\n# obj = MyHashSet()\r\n# obj.add(key)\r\n# obj.remove(key)\r\n# param_3 = obj.contains(key)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MyHashSet;\r\n\r\n/** Initialize your data structure here. */\r\nMyHashSet* myHashSetCreate() {\r\n    \r\n}\r\n\r\nvoid myHashSetAdd(MyHashSet* obj, int key) {\r\n    \r\n}\r\n\r\nvoid myHashSetRemove(MyHashSet* obj, int key) {\r\n    \r\n}\r\n\r\n/** Returns true if this set contains the specified element */\r\nbool myHashSetContains(MyHashSet* obj, int key) {\r\n    \r\n}\r\n\r\nvoid myHashSetFree(MyHashSet* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MyHashSet struct will be instantiated and called as such:\r\n * struct MyHashSet* obj = myHashSetCreate();\r\n * myHashSetAdd(obj, key);\r\n * myHashSetRemove(obj, key);\r\n * bool param_3 = myHashSetContains(obj, key);\r\n * myHashSetFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyHashSet {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyHashSet() {\r\n        \r\n    }\r\n    \r\n    public void Add(int key) {\r\n        \r\n    }\r\n    \r\n    public void Remove(int key) {\r\n        \r\n    }\r\n    \r\n    /** Returns true if this set contains the specified element */\r\n    public bool Contains(int key) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyHashSet object will be instantiated and called as such:\r\n * MyHashSet obj = new MyHashSet();\r\n * obj.Add(key);\r\n * obj.Remove(key);\r\n * bool param_3 = obj.Contains(key);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MyHashSet = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} key\r\n * @return {void}\r\n */\r\nMyHashSet.prototype.add = function(key) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} key\r\n * @return {void}\r\n */\r\nMyHashSet.prototype.remove = function(key) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns true if this set contains the specified element \r\n * @param {number} key\r\n * @return {boolean}\r\n */\r\nMyHashSet.prototype.contains = function(key) {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyHashSet object will be instantiated and called as such:\r\n * var obj = Object.create(MyHashSet).createNew()\r\n * obj.add(key)\r\n * obj.remove(key)\r\n * var param_3 = obj.contains(key)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyHashSet\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :rtype: Void\r\n=end\r\n    def add(key)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type key: Integer\r\n    :rtype: Void\r\n=end\r\n    def remove(key)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns true if this set contains the specified element\r\n    :type key: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def contains(key)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyHashSet object will be instantiated and called as such:\r\n# obj = MyHashSet.new()\r\n# obj.add(key)\r\n# obj.remove(key)\r\n# param_3 = obj.contains(key)"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyHashSet {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func add(_ key: Int) {\n      \n    }\n    \n    func remove(_ key: Int) {\n      \n    }\n    \n    /** Returns true if this set contains the specified element */\n    func contains(_ key: Int) -> Bool {\n      \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * let obj = MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * let ret_3: Bool = obj.contains(key)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MyHashSet struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyHashSet {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MyHashSet) Add(key int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MyHashSet) Remove(key int)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns true if this set contains the specified element */\r\nfunc (this *MyHashSet) Contains(key int) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyHashSet object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Add(key);\r\n * obj.Remove(key);\r\n * param_3 := obj.Contains(key);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyHashSet() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    def add(key: Int) {\r\n        \r\n    }\r\n\r\n    def remove(key: Int) {\r\n        \r\n    }\r\n\r\n    /** Returns true if this set contains the specified element */\r\n    def contains(key: Int): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyHashSet object will be instantiated and called as such:\r\n * var obj = new MyHashSet()\r\n * obj.add(key)\r\n * obj.remove(key)\r\n * var param_3 = obj.contains(key)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyHashSet() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    fun add(key: Int) {\r\n        \r\n    }\r\n\r\n    fun remove(key: Int) {\r\n        \r\n    }\r\n\r\n    /** Returns true if this set contains the specified element */\r\n    fun contains(key: Int): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyHashSet object will be instantiated and called as such:\r\n * var obj = MyHashSet()\r\n * obj.add(key)\r\n * obj.remove(key)\r\n * var param_3 = obj.contains(key)\r\n */"}],"testcase":"[\"MyHashSet\",\"add\",\"add\",\"contains\",\"contains\",\"add\",\"contains\",\"remove\",\"contains\"]\n[[],[1],[2],[1],[3],[2],[2],[2],[2]]","testable":true,"templateMeta":{"classname":"MyHashSet","maxbytesperline":400000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"add","params":[{"type":"integer","name":"key"}],"return":{"type":"void"}},{"name":"remove","params":[{"type":"integer","name":"key"}],"return":{"type":"void"}},{"name":"contains","params":[{"type":"integer","name":"key"}],"return":{"type":"boolean"},"comment":"Returns true if this set contains the specified element"}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}