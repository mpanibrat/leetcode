{"id":555,"fid":555,"name":"Split Concatenated Strings","slug":"split-concatenated-strings","link":"https://leetcode.com/problems/split-concatenated-strings/description/","percent":38.53344664319534,"level":"Medium","category":"algorithms","totalAC":"3.2K","totalSubmit":"8.2K","desc":"Given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. Among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one.\r\n\r\nSpecifically, to find the lexicographically biggest string, you need to experience two phases: \r\n\r\nConcatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.\r\nCut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. \r\n\r\n\r\n\r\nAnd your job is to find the lexicographically biggest one among all the possible regular strings.\r\n\r\n\r\nExample:\r\n\r\nInput: \"abc\", \"xyz\"\r\nOutput: \"zyxcba\"\r\nExplanation: You can get the looped string \"-abcxyz-\", \"-abczyx-\", \"-cbaxyz-\", \"-cbazyx-\", where '-' represents the looped status. The answer string came from the fourth looped one, where you could cut from the middle character 'a' and get \"zyxcba\".\r\n\r\n\r\n\r\nNote:\r\n\r\nThe input strings will only contain lowercase letters.\r\nThe total length of all the strings will not over 1,000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string splitLoopedString(vector<string>& strs) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String splitLoopedString(String[] strs) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def splitLoopedString(self, strs):\r\n        \"\"\"\r\n        :type strs: List[str]\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def splitLoopedString(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* splitLoopedString(char** strs, int strsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string SplitLoopedString(string[] strs) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} strs\r\n * @return {string}\r\n */\r\nvar splitLoopedString = function(strs) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} strs\r\n# @return {String}\r\ndef split_looped_string(strs)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func splitLoopedString(_ strs: [String]) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func splitLoopedString(strs []string) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def splitLoopedString(strs: Array[String]): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun splitLoopedString(strs: Array<String>): String {\n        \n    }\n}"}],"testcase":"[\"abc\",\"xyz\"]","testable":true,"templateMeta":{"name":"splitLoopedString","params":[{"name":"strs","type":"string[]"}],"return":{"type":"string"}}}