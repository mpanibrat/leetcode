{"id":410,"fid":410,"name":"Split Array Largest Sum","slug":"split-array-largest-sum","link":"https://leetcode.com/problems/split-array-largest-sum/description/","percent":40.36743408080286,"level":"Hard","category":"algorithms","totalAC":"29.7K","totalSubmit":"73.5K","desc":"Given an array which consists of non-negative integers and an integer m, you can split the array into m non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these m subarrays.\r\n\r\n\r\nNote:\r\nIf n is the length of array, assume the following constraints are satisfied:\r\n\r\n1 ≤ n ≤ 1000\r\n1 ≤ m ≤ min(50, n)\r\n\r\n\r\n\r\nExamples: \r\n\r\nInput:\r\nnums = [7,2,5,10,8]\r\nm = 2\r\n\r\nOutput:\r\n18\r\n\r\nExplanation:\r\nThere are four ways to split nums into two subarrays.\r\nThe best way is to split it into [7,2,5] and [10,8],\r\nwhere the largest sum among the two subarrays is only 18.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int splitArray(vector<int>& nums, int m) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int splitArray(int[] nums, int m) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def splitArray(self, nums, m):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type m: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def splitArray(self, nums, m):\n        \"\"\"\n        :type nums: List[int]\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int splitArray(int* nums, int numsSize, int m) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int SplitArray(int[] nums, int m) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} m\r\n * @return {number}\r\n */\r\nvar splitArray = function(nums, m) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} m\r\n# @return {Integer}\r\ndef split_array(nums, m)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func splitArray(_ nums: [Int], _ m: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func splitArray(nums []int, m int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def splitArray(nums: Array[Int], m: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun splitArray(nums: IntArray, m: Int): Int {\n        \n    }\n}"}],"testcase":"[7,2,5,10,8]\n2","testable":true,"templateMeta":{"name":"splitArray","params":[{"name":"nums","type":"integer[]"},{"name":"m","type":"integer"}],"return":{"type":"integer"}}}