{"id":906,"fid":874,"name":"Walking Robot Simulation","slug":"walking-robot-simulation","link":"https://leetcode.com/problems/walking-robot-simulation/description/","percent":28.30420608198386,"level":"Easy","category":"algorithms","totalAC":"5.3K","totalSubmit":"18.7K","desc":"A robot on an infinite grid starts at point (0, 0) and faces north.  The robot can receive one of three possible types of commands:\r\n\r\n\r\n\t-2: turn left 90 degrees\r\n\t-1: turn right 90 degrees\r\n\t1 <= x <= 9: move forward x units\r\n\r\n\r\nSome of the grid squares are obstacles. \r\n\r\nThe i-th obstacle is at grid point (obstacles[i][0], obstacles[i][1])\r\n\r\nIf the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)\r\n\r\nReturn the square of the maximum Euclidean distance that the robot will be from the origin.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: commands = [4,-1,3], obstacles = []\r\nOutput: 25\r\nExplanation: robot will go to (3, 4)\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\r\nOutput: 65\r\nExplanation: robot will be stuck at (1, 4) before turning left and going to (1, 8)\r\n\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t0 <= commands.length <= 10000\r\n\t0 <= obstacles.length <= 10000\r\n\t-30000 <= obstacle[i][0] <= 30000\r\n\t-30000 <= obstacle[i][1] <= 30000\r\n\tThe answer is guaranteed to be less than 2 ^ 31.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int robotSim(int[] commands, int[][] obstacles) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def robotSim(self, commands, obstacles):\n        \"\"\"\n        :type commands: List[int]\n        :type obstacles: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def robotSim(self, commands, obstacles):\n        \"\"\"\n        :type commands: List[int]\n        :type obstacles: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int robotSim(int* commands, int commandsSize, int** obstacles, int obstaclesRowSize, int *obstaclesColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int RobotSim(int[] commands, int[][] obstacles) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} commands\n * @param {number[][]} obstacles\n * @return {number}\n */\nvar robotSim = function(commands, obstacles) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} commands\n# @param {Integer[][]} obstacles\n# @return {Integer}\ndef robot_sim(commands, obstacles)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func robotSim(_ commands: [Int], _ obstacles: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func robotSim(commands []int, obstacles [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def robotSim(commands: Array[Int], obstacles: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun robotSim(commands: IntArray, obstacles: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[4,-1,3]\n[]","testable":true,"templateMeta":{"name":"robotSim","params":[{"name":"commands","type":"integer[]"},{"name":"obstacles","type":"integer[][]"}],"return":{"type":"integer"}}}