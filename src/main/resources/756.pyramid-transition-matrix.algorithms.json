{"id":757,"fid":756,"name":"Pyramid Transition Matrix","slug":"pyramid-transition-matrix","link":"https://leetcode.com/problems/pyramid-transition-matrix/description/","percent":48.12471757794849,"level":"Medium","category":"algorithms","totalAC":"8.5K","totalSubmit":"17.7K","desc":"\r\nWe are stacking blocks to form a pyramid.  Each block has a color which is a one letter string, like `'Z'`.\r\n\r\nFor every block of color `C` we place not in the bottom row, we are placing it on top of a left block of color `A` and right block of color `B`.  We are allowed to place the block there only if `(A, B, C)` is an allowed triple.\r\n\r\nWe start with a bottom row of bottom, represented as a single string.  We also start with a list of allowed triples allowed.  Each allowed triple is represented as a string of length 3.\r\n\r\nReturn true if we can build the pyramid all the way to the top, otherwise false.\r\n\r\n\r\nExample 1:\r\n\r\nInput: bottom = \"XYZ\", allowed = [\"XYD\", \"YZE\", \"DEA\", \"FFF\"]\r\nOutput: true\r\nExplanation:\r\nWe can stack the pyramid like this:\r\n    A\r\n   / \\\r\n  D   E\r\n / \\ / \\\r\nX   Y   Z\r\n\r\nThis works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: bottom = \"XXYX\", allowed = [\"XXX\", \"XXY\", \"XYX\", \"XYY\", \"YXZ\"]\r\nOutput: false\r\nExplanation:\r\nWe can't stack the pyramid to the top.\r\nNote that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\r\n\r\n\r\n\r\nNote:\r\n\r\nbottom will be a string with length in range [2, 8].\r\nallowed will have length in range [0, 200].\r\nLetters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool pyramidTransition(string bottom, vector<string>& allowed) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean pyramidTransition(String bottom, List<String> allowed) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def pyramidTransition(self, bottom, allowed):\n        \"\"\"\n        :type bottom: str\n        :type allowed: List[str]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def pyramidTransition(self, bottom, allowed):\n        \"\"\"\n        :type bottom: str\n        :type allowed: List[str]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool pyramidTransition(char* bottom, char** allowed, int allowedSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool PyramidTransition(string bottom, IList<string> allowed) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} bottom\n * @param {string[]} allowed\n * @return {boolean}\n */\nvar pyramidTransition = function(bottom, allowed) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} bottom\n# @param {String[]} allowed\n# @return {Boolean}\ndef pyramid_transition(bottom, allowed)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func pyramidTransition(_ bottom: String, _ allowed: [String]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func pyramidTransition(bottom string, allowed []string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def pyramidTransition(bottom: String, allowed: List[String]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun pyramidTransition(bottom: String, allowed: List<String>): Boolean {\n        \n    }\n}"}],"testcase":"\"ABC\"\n[\"ABD\",\"BCE\",\"DEF\",\"FFF\"]","testable":true,"templateMeta":{"name":"pyramidTransition","params":[{"name":"bottom","type":"string"},{"name":"allowed","type":"list<string>"}],"return":{"type":"boolean"}}}