{"id":285,"fid":285,"name":"Inorder Successor in BST","slug":"inorder-successor-in-bst","link":"https://leetcode.com/problems/inorder-successor-in-bst/description/","percent":33.37251724441944,"level":"Medium","category":"algorithms","totalAC":"79.5K","totalSubmit":"238.2K","desc":"Given a binary search tree and a node in it, find the in-order successor of that node in the BST.\r\n\r\nNote: If the given node has no in-order successor in the tree, return null.\r\n\r\nExample 1:\r\n\r\n\r\nInput: root = [2,1,3], p = 1\r\n\r\n  2\r\n / \\\r\n1   3\r\n\r\nOutput: 2\r\n\r\nExample 2:\r\n\r\n\r\nInput: root = [5,3,6,2,4,null,null,1], p = 6\r\n\r\n      5\r\n     / \\\r\n    3   6\r\n   / \\\r\n  2   4\r\n /   \r\n1\r\n\r\nOutput: null\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* inorderSuccessor(TreeNode* root, TreeNode* p) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def inorderSuccessor(self, root, p):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type p: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* inorderSuccessor(struct TreeNode* root, struct TreeNode* p) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode InorderSuccessor(TreeNode root, TreeNode p) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {TreeNode} p\r\n * @return {TreeNode}\r\n */\r\nvar inorderSuccessor = function(root, p) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {TreeNode} p\r\n# @return {TreeNode}\r\ndef inorder_successor(root, p)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func inorderSuccessor(_ root: TreeNode?, _ p: TreeNode?, _ m: Int) -> TreeNode? {\n\n    }\n}"}],"testcase":"[0]\nnode with value 0","testable":false,"templateMeta":{"name":"inorderSuccessor","params":[{"name":"root","type":"TreeNode"},{"name":"p","type":"TreeNode","dealloc":false,"deserialize":false},{"name":"m","type":"integer","internal":true}],"return":{"type":"TreeNode","serializevalue":true},"generatedriver":false,"generatedefinition":false}}