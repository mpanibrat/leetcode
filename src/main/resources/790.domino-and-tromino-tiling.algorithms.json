{"id":806,"fid":790,"name":"Domino and Tromino Tiling","slug":"domino-and-tromino-tiling","link":"https://leetcode.com/problems/domino-and-tromino-tiling/description/","percent":33.94777265745007,"level":"Medium","category":"algorithms","totalAC":"5.5K","totalSubmit":"16.3K","desc":"We have two types of tiles: a 2x1 domino shape, and an \"L\" tromino shape. These shapes may be rotated.\r\n\r\n\r\nXX  <- domino\r\n\r\nXX  <- \"L\" tromino\r\nX\r\n\r\n\r\nGiven N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.\r\n\r\n(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)\r\n\r\n\r\n\r\nExample:\r\nInput: 3\r\nOutput: 5\r\nExplanation: \r\nThe five different ways are listed below, different letters indicates different tiles:\r\nXYZ XXZ XYY XXY XYY\r\nXYZ YYZ XZZ XYY XXY\r\n\r\nNote:\r\n\r\n\r\n\tN  will be in range [1, 1000].\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numTilings(int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numTilings(int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numTilings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numTilings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numTilings(int N) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumTilings(int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @return {number}\n */\nvar numTilings = function(N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef num_tilings(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numTilings(_ N: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numTilings(N int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numTilings(N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numTilings(N: Int): Int {\n        \n    }\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"numTilings","params":[{"name":"N","type":"integer"}],"return":{"type":"integer"}}}