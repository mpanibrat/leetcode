{"id":291,"fid":291,"name":"Word Pattern II","slug":"word-pattern-ii","link":"https://leetcode.com/problems/word-pattern-ii/description/","percent":39.24553467872883,"level":"Hard","category":"algorithms","totalAC":"27.1K","totalSubmit":"69K","desc":"Given a pattern and a string str, find if str follows the same pattern.\r\n\r\nHere follow means a full match, such that there is a bijection between a letter in pattern and a non-empty substring in str.\r\n\r\nExample 1:\r\n\r\n\r\nInput: pattern = \"abab\", str = \"redblueredblue\"\r\nOutput: true\r\n\r\nExample 2:\r\n\r\n\r\nInput: pattern = pattern = \"aaaa\", str = \"asdasdasdasd\"\r\nOutput: true\r\n\r\nExample 3:\r\n\r\n\r\nInput: pattern = \"aabb\", str = \"xyzabcxzyabc\"\r\nOutput: false\r\n\r\n\r\nNotes:\r\nYou may assume both pattern and str contains only lowercase letters.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool wordPatternMatch(string pattern, string str) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean wordPatternMatch(String pattern, String str) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def wordPatternMatch(self, pattern, str):\r\n        \"\"\"\r\n        :type pattern: str\r\n        :type str: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def wordPatternMatch(self, pattern, str):\r\n        \"\"\"\r\n        :type pattern: str\r\n        :type str: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool wordPatternMatch(char* pattern, char* str) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool WordPatternMatch(string pattern, string str) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} pattern\r\n * @param {string} str\r\n * @return {boolean}\r\n */\r\nvar wordPatternMatch = function(pattern, str) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} pattern\r\n# @param {String} str\r\n# @return {Boolean}\r\ndef word_pattern_match(pattern, str)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordPatternMatch(_ pattern: String, _ str: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordPatternMatch(pattern string, str string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def wordPatternMatch(pattern: String, str: String): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun wordPatternMatch(pattern: String, str: String): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"\"abab\"\n\"redblueredblue\"","testable":true,"templateMeta":{"name":"wordPatternMatch","params":[{"name":"pattern","type":"string"},{"name":"str","type":"string"}],"return":{"type":"boolean"}}}