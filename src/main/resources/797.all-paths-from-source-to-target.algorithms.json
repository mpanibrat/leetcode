{"id":813,"fid":797,"name":"All Paths From Source to Target","slug":"all-paths-from-source-to-target","link":"https://leetcode.com/problems/all-paths-from-source-to-target/description/","percent":67.56022080963533,"level":"Medium","category":"algorithms","totalAC":"16.2K","totalSubmit":"23.9K","desc":"Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.\r\n\r\nThe graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.\r\n\r\n\r\nExample:\r\nInput: [[1,2], [3], [3], []] \r\nOutput: [[0,1,3],[0,2,3]] \r\nExplanation: The graph looks like this:\r\n0--->1\r\n|    |\r\nv    v\r\n2--->3\r\nThere are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tThe number of nodes in the graph will be in the range [2, 15].\r\n\tYou can print different paths in any order, but you should keep the order of nodes inside one path.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def allPathsSourceTarget(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def allPathsSourceTarget(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *columnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** allPathsSourceTarget(int** graph, int graphRowSize, int *graphColSizes, int** columnSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<IList<int>> AllPathsSourceTarget(int[][] graph) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} graph\n * @return {number[][]}\n */\nvar allPathsSourceTarget = function(graph) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} graph\n# @return {Integer[][]}\ndef all_paths_source_target(graph)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func allPathsSourceTarget(_ graph: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func allPathsSourceTarget(graph [][]int) [][]int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def allPathsSourceTarget(graph: Array[Array[Int]]): List[List[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun allPathsSourceTarget(graph: Array<IntArray>): List<List<Int>> {\n        \n    }\n}"}],"testcase":"[[1,2],[3],[3],[]]","testable":true,"templateMeta":{"name":"allPathsSourceTarget","params":[{"name":"graph","type":"integer[][]"}],"return":{"type":"list<list<integer>>"}}}