{"id":297,"fid":297,"name":"Serialize and Deserialize Binary Tree","slug":"serialize-and-deserialize-binary-tree","link":"https://leetcode.com/problems/serialize-and-deserialize-binary-tree/description/","percent":37.41397231037876,"level":"Hard","category":"algorithms","totalAC":"135K","totalSubmit":"360.8K","desc":"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\r\n\r\nDesign an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.\r\n\r\nExample: \r\n\r\n\r\nYou may serialize the following tree:\r\n\r\n    1\r\n   / \\\r\n  2   3\r\n     / \\\r\n    4   5\r\n\r\nas \"[1,2,3,null,null,4,5]\"\r\n\r\n\r\nClarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\r\n\r\nNote: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Codec {\r\npublic:\r\n\r\n    // Encodes a tree to a single string.\r\n    string serialize(TreeNode* root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    TreeNode* deserialize(string data) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.deserialize(codec.serialize(root));"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public String serialize(TreeNode root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public TreeNode deserialize(String data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Codec:\r\n\r\n    def serialize(self, root):\r\n        \"\"\"Encodes a tree to a single string.\r\n        \r\n        :type root: TreeNode\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def deserialize(self, data):\r\n        \"\"\"Decodes your encoded data to tree.\r\n        \r\n        :type data: str\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.deserialize(codec.serialize(root))"},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Codec:\r\n\r\n    def serialize(self, root):\r\n        \"\"\"Encodes a tree to a single string.\r\n        \r\n        :type root: TreeNode\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def deserialize(self, data):\r\n        \"\"\"Decodes your encoded data to tree.\r\n        \r\n        :type data: str\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.deserialize(codec.serialize(root))"},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/** Encodes a tree to a single string. */\r\nchar* serialize(struct TreeNode* root) {\r\n    \r\n}\r\n\r\n/** Decodes your encoded data to tree. */\r\nstruct TreeNode* deserialize(char* data) {\r\n    \r\n}\r\n\r\n// Your functions will be called as such:\r\n// char* data = serialize(root);\r\n// deserialize(data);"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public string serialize(TreeNode root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public TreeNode deserialize(string data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n\r\n/**\r\n * Encodes a tree to a single string.\r\n *\r\n * @param {TreeNode} root\r\n * @return {string}\r\n */\r\nvar serialize = function(root) {\r\n    \r\n};\r\n\r\n/**\r\n * Decodes your encoded data to tree.\r\n *\r\n * @param {string} data\r\n * @return {TreeNode}\r\n */\r\nvar deserialize = function(data) {\r\n    \r\n};\r\n\r\n/**\r\n * Your functions will be called as such:\r\n * deserialize(serialize(root));\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# Encodes a tree to a single string.\r\n#\r\n# @param {TreeNode} root\r\n# @return {string}\r\ndef serialize(root)\r\n    \r\nend\r\n\r\n# Decodes your encoded data to tree.\r\n#\r\n# @param {string} data\r\n# @return {TreeNode}\r\ndef deserialize(data)\r\n    \r\nend\r\n\r\n\r\n# Your functions will be called as such:\r\n# deserialize(serialize(data))"}],"testcase":"[1,2,3,null,null,4,5]","testable":true,"templateMeta":{"name":"Codec","params":[{"name":"root","type":"TreeNode"}],"return":{"type":"string"},"generatedriver":false,"generatedefinition":false}}