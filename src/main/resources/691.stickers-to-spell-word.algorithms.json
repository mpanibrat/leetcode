{"id":691,"fid":691,"name":"Stickers to Spell Word","slug":"stickers-to-spell-word","link":"https://leetcode.com/problems/stickers-to-spell-word/description/","percent":36.60553129548763,"level":"Hard","category":"algorithms","totalAC":"6.3K","totalSubmit":"17.2K","desc":"\r\nWe are given N different types of stickers.  Each sticker has a lowercase English word on it.\r\n\r\nYou would like to spell out the given target string by cutting individual letters from your collection of stickers and rearranging them.\r\n\r\nYou can use each sticker more than once if you want, and you have infinite quantities of each sticker.\r\n\r\nWhat is the minimum number of stickers that you need to spell out the target?  If the task is impossible, return -1.\r\n\r\n\r\nExample 1:\r\nInput:\r\n[\"with\", \"example\", \"science\"], \"thehat\"\r\n\r\n\r\nOutput:\r\n3\r\n\r\n\r\nExplanation:\r\nWe can use 2 \"with\" stickers, and 1 \"example\" sticker.\r\nAfter cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\r\nAlso, this is the minimum number of stickers necessary to form the target string.\r\n\r\n\r\nExample 2:\r\nInput:\r\n[\"notice\", \"possible\"], \"basicbasic\"\r\n\r\n\r\nOutput:\r\n-1\r\n\r\n\r\nExplanation:\r\nWe can't form the target \"basicbasic\" from cutting letters from the given stickers.\r\n\r\n\r\nNote:\r\nstickers has length in the range [1, 50].\r\nstickers consists of lowercase English words (without apostrophes).\r\ntarget has length in the range [1, 15], and consists of lowercase English letters.\r\nIn all test cases, all words were chosen randomly from the 1000 most common US English words, and the target was chosen as a concatenation of two random words.\r\nThe time limit may be more challenging than usual.  It is expected that a 50 sticker test case can be solved within 35ms on average.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minStickers(vector<string>& stickers, string target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minStickers(String[] stickers, String target) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int minStickers(char** stickers, int stickersSize, char* target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinStickers(string[] stickers, string target) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} stickers\n * @param {string} target\n * @return {number}\n */\nvar minStickers = function(stickers, target) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} stickers\n# @param {String} target\n# @return {Integer}\ndef min_stickers(stickers, target)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minStickers(_ stickers: [String], _ target: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minStickers(stickers []string, target string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minStickers(stickers: Array[String], target: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minStickers(stickers: Array<String>, target: String): Int {\n        \n    }\n}"}],"testcase":"[\"with\",\"example\",\"science\"]\n\"thehat\"","testable":true,"templateMeta":{"name":"minStickers","params":[{"name":"stickers","type":"string[]"},{"name":"target","type":"string"}],"return":{"type":"integer"}}}