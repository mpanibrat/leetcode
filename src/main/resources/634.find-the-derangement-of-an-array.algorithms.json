{"id":634,"fid":634,"name":"Find the Derangement of An Array","slug":"find-the-derangement-of-an-array","link":"https://leetcode.com/problems/find-the-derangement-of-an-array/description/","percent":36.833289253283965,"level":"Medium","category":"algorithms","totalAC":"4.2K","totalSubmit":"11.3K","desc":"\r\nIn combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.\r\n\r\n\r\n\r\nThere's originally an array consisting of n integers from 1 to n in ascending order, you need to find the number of derangement it can generate.\r\n\r\n\r\n\r\nAlso, since the answer may be very large, you should return the output mod 109 + 7.\r\n\r\n\r\nExample 1:\r\n\r\nInput: 3\r\nOutput: 2\r\nExplanation: The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].\r\n\r\n\r\n\r\nNote:\r\nn is in the range of [1, 106].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findDerangement(int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findDerangement(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findDerangement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findDerangement(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int findDerangement(int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindDerangement(int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @return {number}\n */\nvar findDerangement = function(n) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef find_derangement(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findDerangement(_ n: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findDerangement(n int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findDerangement(n: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findDerangement(n: Int): Int {\n        \n    }\n}"}],"testcase":"1","testable":true,"templateMeta":{"name":"findDerangement","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}