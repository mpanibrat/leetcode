{"id":855,"fid":828,"name":"Unique Letter String","slug":"unique-letter-string","link":"https://leetcode.com/problems/unique-letter-string/description/","percent":36.65088627105582,"level":"Hard","category":"algorithms","totalAC":"3.3K","totalSubmit":"9.1K","desc":"A character is unique in string S if it occurs exactly once in it.\r\n\r\nFor example, in string S = \"LETTER\", the only unique characters are \"L\" and \"R\".\r\n\r\nLet's define UNIQ(S) as the number of unique characters in string S.\r\n\r\nFor example, UNIQ(\"LETTER\") =  2.\r\n\r\nGiven a string S with only uppercases, calculate the sum of UNIQ(substring) over all non-empty substrings of S.\r\n\r\nIf there are two or more equal substrings at different positions in S, we consider them different.\r\n\r\nSince the answer can be very large, return the answer modulo 10 ^ 9 + 7.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: \"ABC\"\r\nOutput: 10\r\nExplanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\r\nEvey substring is composed with only unique letters.\r\nSum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\r\n\r\nExample 2:\r\n\r\n\r\nInput: \"ABA\"\r\nOutput: 8\r\nExplanation: The same as example 1, except uni(\"ABA\") = 1.\r\n\r\n\r\n \r\n\r\nNote: 0 <= S.length <= 10000.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int uniqueLetterString(string S) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int uniqueLetterString(String S) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def uniqueLetterString(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def uniqueLetterString(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int uniqueLetterString(char* S) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int UniqueLetterString(string S) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} S\r\n * @return {number}\r\n */\r\nvar uniqueLetterString = function(S) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {Integer}\r\ndef unique_letter_string(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func uniqueLetterString(_ S: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func uniqueLetterString(S string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def uniqueLetterString(S: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun uniqueLetterString(S: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"ABC\"","testable":true,"templateMeta":{"name":"uniqueLetterString","params":[{"name":"S","type":"string"}],"return":{"type":"integer"}}}