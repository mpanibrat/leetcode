{"id":604,"fid":604,"name":"Design Compressed String Iterator","slug":"design-compressed-string-iterator","link":"https://leetcode.com/problems/design-compressed-string-iterator/description/","percent":33.80084597525681,"level":"Easy","category":"algorithms","totalAC":"10.6K","totalSubmit":"31.4K","desc":"\r\nDesign and implement a data structure for a compressed string iterator. It should support the following operations: next and hasNext.\r\n\r\n\r\n\r\nThe given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.\r\n\r\n\r\n\r\nnext() - if the original string still has uncompressed characters, return the next letter; Otherwise return a white space.\r\nhasNext() - Judge whether there is any letter needs to be uncompressed.\r\n\r\n\r\n\r\nNote:\r\nPlease remember to RESET your class variables declared in StringIterator, as static/class variables are persisted across multiple test cases. Please see here for more details.\r\n\r\n\r\n\r\nExample:\r\n\r\nStringIterator iterator = new StringIterator(\"L1e2t1C1o1d1e1\");\r\n\r\niterator.next(); // return 'L'\r\niterator.next(); // return 'e'\r\niterator.next(); // return 'e'\r\niterator.next(); // return 't'\r\niterator.next(); // return 'C'\r\niterator.next(); // return 'o'\r\niterator.next(); // return 'd'\r\niterator.hasNext(); // return true\r\niterator.next(); // return 'e'\r\niterator.hasNext(); // return false\r\niterator.next(); // return ' '\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class StringIterator {\r\npublic:\r\n    StringIterator(string compressedString) {\r\n        \r\n    }\r\n    \r\n    char next() {\r\n        \r\n    }\r\n    \r\n    bool hasNext() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your StringIterator object will be instantiated and called as such:\r\n * StringIterator obj = new StringIterator(compressedString);\r\n * char param_1 = obj.next();\r\n * bool param_2 = obj.hasNext();\r\n */"},{"value":"java","text":"Java","defaultCode":"class StringIterator {\r\n\r\n    public StringIterator(String compressedString) {\r\n        \r\n    }\r\n    \r\n    public char next() {\r\n        \r\n    }\r\n    \r\n    public boolean hasNext() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your StringIterator object will be instantiated and called as such:\r\n * StringIterator obj = new StringIterator(compressedString);\r\n * char param_1 = obj.next();\r\n * boolean param_2 = obj.hasNext();\r\n */"},{"value":"python","text":"Python","defaultCode":"class StringIterator(object):\r\n\r\n    def __init__(self, compressedString):\r\n        \"\"\"\r\n        :type compressedString: str\r\n        \"\"\"\r\n        \r\n\r\n    def next(self):\r\n        \"\"\"\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def hasNext(self):\r\n        \"\"\"\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your StringIterator object will be instantiated and called as such:\r\n# obj = StringIterator(compressedString)\r\n# param_1 = obj.next()\r\n# param_2 = obj.hasNext()"},{"value":"python3","text":"Python3","defaultCode":"class StringIterator:\r\n\r\n    def __init__(self, compressedString):\r\n        \"\"\"\r\n        :type compressedString: str\r\n        \"\"\"\r\n        \r\n\r\n    def next(self):\r\n        \"\"\"\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def hasNext(self):\r\n        \"\"\"\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your StringIterator object will be instantiated and called as such:\r\n# obj = StringIterator(compressedString)\r\n# param_1 = obj.next()\r\n# param_2 = obj.hasNext()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} StringIterator;\r\n\r\nStringIterator* stringIteratorCreate(char* compressedString) {\r\n    \r\n}\r\n\r\nchar stringIteratorNext(StringIterator* obj) {\r\n    \r\n}\r\n\r\nbool stringIteratorHasNext(StringIterator* obj) {\r\n    \r\n}\r\n\r\nvoid stringIteratorFree(StringIterator* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your StringIterator struct will be instantiated and called as such:\r\n * struct StringIterator* obj = stringIteratorCreate(compressedString);\r\n * char param_1 = stringIteratorNext(obj);\r\n * bool param_2 = stringIteratorHasNext(obj);\r\n * stringIteratorFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class StringIterator {\r\n\r\n    public StringIterator(string compressedString) {\r\n        \r\n    }\r\n    \r\n    public char Next() {\r\n        \r\n    }\r\n    \r\n    public bool HasNext() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your StringIterator object will be instantiated and called as such:\r\n * StringIterator obj = new StringIterator(compressedString);\r\n * char param_1 = obj.Next();\r\n * bool param_2 = obj.HasNext();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} compressedString\r\n */\r\nvar StringIterator = function(compressedString) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {character}\r\n */\r\nStringIterator.prototype.next = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {boolean}\r\n */\r\nStringIterator.prototype.hasNext = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your StringIterator object will be instantiated and called as such:\r\n * var obj = Object.create(StringIterator).createNew(compressedString)\r\n * var param_1 = obj.next()\r\n * var param_2 = obj.hasNext()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class StringIterator\r\n\r\n=begin\r\n    :type compressed_string: String\r\n=end\r\n    def initialize(compressed_string)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Character\r\n=end\r\n    def next()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Boolean\r\n=end\r\n    def has_next()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your StringIterator object will be instantiated and called as such:\r\n# obj = StringIterator.new(compressed_string)\r\n# param_1 = obj.next()\r\n# param_2 = obj.has_next()"},{"value":"swift","text":"Swift","defaultCode":"\nclass StringIterator {\n\n    init(_ compressedString: String) {\n        \n    }\n    \n    func next() -> Character {\n      \n    }\n    \n    func hasNext() -> Bool {\n      \n    }\n}\n\n/**\n * Your StringIterator object will be instantiated and called as such:\n * let obj = StringIterator(compressedString)\n * let ret_1: Character = obj.next()\n * let ret_2: Bool = obj.hasNext()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type StringIterator struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(compressedString string) StringIterator {\r\n    \r\n}\r\n\r\n\r\nfunc (this *StringIterator) Next() byte {\r\n    \r\n}\r\n\r\n\r\nfunc (this *StringIterator) HasNext() bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your StringIterator object will be instantiated and called as such:\r\n * obj := Constructor(compressedString);\r\n * param_1 := obj.Next();\r\n * param_2 := obj.HasNext();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class StringIterator(_compressedString: String) {\n\n    def next(): Char = {\n        \n    }\n\n    def hasNext(): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your StringIterator object will be instantiated and called as such:\n * var obj = new StringIterator(compressedString)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class StringIterator(compressedString: String) {\n\n    fun next(): Char {\n        \n    }\n\n    fun hasNext(): Boolean {\n        \n    }\n\n}\n\n/**\n * Your StringIterator object will be instantiated and called as such:\n * var obj = StringIterator(compressedString)\n * var param_1 = obj.next()\n * var param_2 = obj.hasNext()\n */"}],"testcase":"[\"StringIterator\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"hasNext\",\"next\",\"hasNext\"]\n[[\"L1e2t1C1o1d1e1\"],[],[],[],[],[],[],[],[],[]]","testable":true,"templateMeta":{"classname":"StringIterator","maxbytesperline":200000,"constructor":{"params":[{"type":"string","name":"compressedString"}]},"methods":[{"name":"next","params":[],"return":{"type":"character"}},{"name":"hasNext","params":[],"return":{"type":"boolean"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}