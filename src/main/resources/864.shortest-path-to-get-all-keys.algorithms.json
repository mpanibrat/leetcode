{"id":895,"fid":864,"name":"Shortest Path to Get All Keys","slug":"shortest-path-to-get-all-keys","link":"https://leetcode.com/problems/shortest-path-to-get-all-keys/description/","percent":33.33732057416268,"level":"Hard","category":"algorithms","totalAC":"2.8K","totalSubmit":"8.4K","desc":"We are given a 2-dimensional grid. \".\" is an empty cell, \"#\" is a wall, \"@\" is the starting point, (\"a\", \"b\", ...) are keys, and (\"A\", \"B\", ...) are locks.\r\n\r\nWe start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.  We cannot walk outside the grid, or walk into a wall.  If we walk over a key, we pick it up.  We can't walk over a lock unless we have the corresponding key.\r\n\r\nFor some 1 <= K <= 6, there is exactly one lowercase and one uppercase letter of the first K letters of the English alphabet in the grid.  This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.\r\n\r\nReturn the lowest number of moves to acquire all keys.  If it's impossible, return -1.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"@.a.#\",\"###.#\",\"b.A.B\"]\r\nOutput: 8\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [\"@..aA\",\"..B#.\",\"....b\"]\r\nOutput: 6\r\n\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= grid.length <= 30\r\n\t1 <= grid[0].length <= 30\r\n\tgrid[i][j] contains only '.', '#', '@', 'a'-'f' and 'A'-'F'\r\n\tThe number of keys is in [1, 6].  Each key has a different letter and opens exactly one lock.\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int shortestPathAllKeys(vector<string>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int shortestPathAllKeys(String[] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def shortestPathAllKeys(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def shortestPathAllKeys(self, grid):\n        \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int shortestPathAllKeys(char** grid, int gridSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ShortestPathAllKeys(string[] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} grid\n * @return {number}\n */\nvar shortestPathAllKeys = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} grid\n# @return {Integer}\ndef shortest_path_all_keys(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shortestPathAllKeys(_ grid: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func shortestPathAllKeys(grid []string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def shortestPathAllKeys(grid: Array[String]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun shortestPathAllKeys(grid: Array<String>): Int {\n        \n    }\n}"}],"testcase":"[\"@.a.#\",\"###.#\",\"b.A.B\"]","testable":true,"templateMeta":{"name":"shortestPathAllKeys","params":[{"name":"grid","type":"string[]"}],"return":{"type":"integer"}}}