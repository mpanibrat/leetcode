{"id":338,"fid":338,"name":"Counting Bits","slug":"counting-bits","link":"https://leetcode.com/problems/counting-bits/description/","percent":63.050307879194065,"level":"Medium","category":"algorithms","totalAC":"135.5K","totalSubmit":"214.9K","desc":"Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.\r\n\r\nExample 1:\r\n\r\n\r\nInput: 2\r\nOutput: [0,1,1]\r\n\r\nExample 2:\r\n\r\n\r\nInput: 5\r\nOutput: [0,1,1,2,1,2]\r\n\r\n\r\nFollow up:\r\n\r\n\r\n\tIt is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?\r\n\tSpace complexity should be O(n).\r\n\tCan you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> countBits(int num) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] countBits(int num) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def countBits(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def countBits(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* countBits(int num, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] CountBits(int num) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} num\r\n * @return {number[]}\r\n */\r\nvar countBits = function(num) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\r\n# @return {Integer[]}\r\ndef count_bits(num)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countBits(_ num: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func countBits(num int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def countBits(num: Int): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun countBits(num: Int): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"2","testable":true,"templateMeta":{"name":"countBits","params":[{"name":"num","type":"integer"}],"return":{"type":"integer[]"}}}