{"id":117,"fid":117,"name":"Populating Next Right Pointers in Each Node II","slug":"populating-next-right-pointers-in-each-node-ii","link":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/","percent":33.43086118607709,"level":"Medium","category":"algorithms","totalAC":"154.6K","totalSubmit":"462.4K","desc":"Given a binary tree\r\n\r\n\r\nstruct TreeLinkNode {\r\n  TreeLinkNode *left;\r\n  TreeLinkNode *right;\r\n  TreeLinkNode *next;\r\n}\r\n\r\n\r\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\r\n\r\nInitially, all next pointers are set to NULL.\r\n\r\nNote:\r\n\r\n\r\n\tYou may only use constant extra space.\r\n\tRecursive approach is fine, implicit stack space does not count as extra space for this problem.\r\n\r\n\r\nExample:\r\n\r\nGiven the following binary tree,\r\n\r\n\r\n     1\r\n   /  \\\r\n  2    3\r\n / \\    \\\r\n4   5    7\r\n\r\n\r\nAfter calling your function, the tree should look like:\r\n\r\n\r\n     1 -> NULL\r\n   /  \\\r\n  2 -> 3 -> NULL\r\n / \\    \\\r\n4-> 5 -> 7 -> NULL\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  TreeLinkNode *left, *right, *next;\r\n *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void connect(TreeLinkNode *root) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for binary tree with next pointer.\r\n * public class TreeLinkNode {\r\n *     int val;\r\n *     TreeLinkNode left, right, next;\r\n *     TreeLinkNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public void connect(TreeLinkNode root) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for binary tree with next pointer.\r\n# class TreeLinkNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    # @param root, a tree link node\r\n    # @return nothing\r\n    def connect(self, root):"},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for binary tree with next pointer.\r\n * struct TreeLinkNode {\r\n *  int val;\r\n *  struct TreeLinkNode *left, *right, *next;\r\n * };\r\n *\r\n */\r\nvoid connect(struct TreeLinkNode *root) {\r\n    \r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for binary tree with next pointer.\r\n * function TreeLinkNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = this.next = null;\r\n * }\r\n */\r\n\r\n/**\r\n * @param {TreeLinkNode} root\r\n * @return {void} Do not return anything, modify tree in-place instead.\r\n */\r\nvar connect = function(root) {\r\n    \r\n};"}],"testcase":"{}","testable":false,"templateMeta":{"name":"connect","params":[{"name":"root","type":"TreeLinkNode"}],"return":{"type":"void"},"generatedriver":false,"generatedefinition":false}}