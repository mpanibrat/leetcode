{"id":44,"fid":44,"name":"Wildcard Matching","slug":"wildcard-matching","link":"https://leetcode.com/problems/wildcard-matching/description/","percent":21.77736055002877,"level":"Hard","category":"algorithms","totalAC":"146.8K","totalSubmit":"674.3K","desc":"Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.\r\n\r\n\r\n'?' Matches any single character.\r\n'*' Matches any sequence of characters (including the empty sequence).\r\n\r\n\r\nThe matching should cover the entire input string (not partial).\r\n\r\nNote:\r\n\r\n\r\n\ts could be empty and contains only lowercase letters a-z.\r\n\tp could be empty and contains only lowercase letters a-z, and characters like ? or *.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\ns = \"aa\"\r\np = \"a\"\r\nOutput: false\r\nExplanation: \"a\" does not match the entire string \"aa\".\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\ns = \"aa\"\r\np = \"*\"\r\nOutput: true\r\nExplanation: '*' matches any sequence.\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput:\r\ns = \"cb\"\r\np = \"?a\"\r\nOutput: false\r\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput:\r\ns = \"adceb\"\r\np = \"*a*b\"\r\nOutput: true\r\nExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput:\r\ns = \"acdcb\"\r\np = \"a*c?b\"\r\nOutput: false\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool isMatch(string s, string p) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean isMatch(String s, String p) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def isMatch(self, s, p):\r\n        \"\"\"\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def isMatch(self, s, p):\r\n        \"\"\"\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool isMatch(char* s, char* p) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool IsMatch(string s, string p) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @param {string} p\r\n * @return {boolean}\r\n */\r\nvar isMatch = function(s, p) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String} p\r\n# @return {Boolean}\r\ndef is_match(s, p)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isMatch(s string, p string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def isMatch(s: String, p: String): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun isMatch(s: String, p: String): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"\"aa\"\n\"a\"","testable":true,"templateMeta":{"name":"isMatch","params":[{"name":"s","type":"string"},{"name":"p","type":"string"}],"return":{"type":"boolean"}}}