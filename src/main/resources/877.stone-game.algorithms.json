{"id":909,"fid":877,"name":"Stone Game","slug":"stone-game","link":"https://leetcode.com/problems/stone-game/description/","percent":57.97699793571218,"level":"Medium","category":"algorithms","totalAC":"11.8K","totalSubmit":"20.3K","desc":"Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones piles[i].\r\n\r\nThe objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.\r\n\r\nAlex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.\r\n\r\nAssuming Alex and Lee play optimally, return True if and only if Alex wins the game.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [5,3,4,5]\r\nOutput: true\r\nExplanation: \r\nAlex starts first, and can only take the first 5 or the last 5.\r\nSay he takes the first 5, so that the row becomes [3, 4, 5].\r\nIf Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\r\nIf Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\r\nThis demonstrated that taking the first 5 was a winning move for Alex, so we return true.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t2 <= piles.length <= 500\r\n\tpiles.length is even.\r\n\t1 <= piles[i] <= 500\r\n\tsum(piles) is odd.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool stoneGame(vector<int>& piles) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean stoneGame(int[] piles) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def stoneGame(self, piles):\n        \"\"\"\n        :type piles: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def stoneGame(self, piles):\n        \"\"\"\n        :type piles: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool stoneGame(int* piles, int pilesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool StoneGame(int[] piles) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} piles\n * @return {boolean}\n */\nvar stoneGame = function(piles) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} piles\n# @return {Boolean}\ndef stone_game(piles)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func stoneGame(_ piles: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func stoneGame(piles []int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def stoneGame(piles: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun stoneGame(piles: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[5,3,4,5]","testable":true,"templateMeta":{"name":"stoneGame","params":[{"name":"piles","type":"integer[]"}],"return":{"type":"boolean"}}}