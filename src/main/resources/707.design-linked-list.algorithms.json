{"id":838,"fid":707,"name":"Design Linked List","slug":"design-linked-list","link":"https://leetcode.com/problems/design-linked-list/description/","percent":18.969934929676125,"level":"Easy","category":"algorithms","totalAC":"10.3K","totalSubmit":"54.3K","desc":"Design your implementation of the linked list. You can choose to use the singly linked list or the doubly linked list. A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node. If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.\r\n\r\nImplement these functions in your linked list class:\r\n\r\n\r\n\tget(index) : Get the value of the index-th node in the linked list. If the index is invalid, return -1.\r\n\taddAtHead(val) : Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\r\n\taddAtTail(val) : Append a node of value val to the last element of the linked list.\r\n\taddAtIndex(index, val) : Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\r\n\tdeleteAtIndex(index) : Delete the index-th node in the linked list, if the index is valid.\r\n\r\n\r\nExample:\r\n\r\n\r\nMyLinkedList linkedList = new MyLinkedList();\r\nlinkedList.addAtHead(1);\r\nlinkedList.addAtTail(3);\r\nlinkedList.addAtIndex(1, 2);  // linked list becomes 1->2->3\r\nlinkedList.get(1);            // returns 2\r\nlinkedList.deleteAtIndex(1);  // now the linked list is 1->3\r\nlinkedList.get(1);            // returns 3\r\n\r\n\r\nNote:\r\n\r\n\r\n\tAll values will be in the range of [1, 1000].\r\n\tThe number of operations will be in the range of [1, 1000].\r\n\tPlease do not use the built-in LinkedList library.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyLinkedList {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyLinkedList() {\r\n        \r\n    }\r\n    \r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    int get(int index) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    void addAtHead(int val) {\r\n        \r\n    }\r\n    \r\n    /** Append a node of value val to the last element of the linked list. */\r\n    void addAtTail(int val) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    void addAtIndex(int index, int val) {\r\n        \r\n    }\r\n    \r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    void deleteAtIndex(int index) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * MyLinkedList obj = new MyLinkedList();\r\n * int param_1 = obj.get(index);\r\n * obj.addAtHead(val);\r\n * obj.addAtTail(val);\r\n * obj.addAtIndex(index,val);\r\n * obj.deleteAtIndex(index);\r\n */"},{"value":"java","text":"Java","defaultCode":"class MyLinkedList {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyLinkedList() {\r\n        \r\n    }\r\n    \r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    public int get(int index) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    public void addAtHead(int val) {\r\n        \r\n    }\r\n    \r\n    /** Append a node of value val to the last element of the linked list. */\r\n    public void addAtTail(int val) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    public void addAtIndex(int index, int val) {\r\n        \r\n    }\r\n    \r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    public void deleteAtIndex(int index) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * MyLinkedList obj = new MyLinkedList();\r\n * int param_1 = obj.get(index);\r\n * obj.addAtHead(val);\r\n * obj.addAtTail(val);\r\n * obj.addAtIndex(index,val);\r\n * obj.deleteAtIndex(index);\r\n */"},{"value":"python","text":"Python","defaultCode":"class MyLinkedList(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def get(self, index):\r\n        \"\"\"\r\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\r\n        :type index: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def addAtHead(self, val):\r\n        \"\"\"\r\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def addAtTail(self, val):\r\n        \"\"\"\r\n        Append a node of value val to the last element of the linked list.\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def addAtIndex(self, index, val):\r\n        \"\"\"\r\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\r\n        :type index: int\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def deleteAtIndex(self, index):\r\n        \"\"\"\r\n        Delete the index-th node in the linked list, if the index is valid.\r\n        :type index: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyLinkedList object will be instantiated and called as such:\r\n# obj = MyLinkedList()\r\n# param_1 = obj.get(index)\r\n# obj.addAtHead(val)\r\n# obj.addAtTail(val)\r\n# obj.addAtIndex(index,val)\r\n# obj.deleteAtIndex(index)"},{"value":"python3","text":"Python3","defaultCode":"class MyLinkedList:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def get(self, index):\r\n        \"\"\"\r\n        Get the value of the index-th node in the linked list. If the index is invalid, return -1.\r\n        :type index: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def addAtHead(self, val):\r\n        \"\"\"\r\n        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def addAtTail(self, val):\r\n        \"\"\"\r\n        Append a node of value val to the last element of the linked list.\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def addAtIndex(self, index, val):\r\n        \"\"\"\r\n        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\r\n        :type index: int\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def deleteAtIndex(self, index):\r\n        \"\"\"\r\n        Delete the index-th node in the linked list, if the index is valid.\r\n        :type index: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyLinkedList object will be instantiated and called as such:\r\n# obj = MyLinkedList()\r\n# param_1 = obj.get(index)\r\n# obj.addAtHead(val)\r\n# obj.addAtTail(val)\r\n# obj.addAtIndex(index,val)\r\n# obj.deleteAtIndex(index)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MyLinkedList;\r\n\r\n/** Initialize your data structure here. */\r\nMyLinkedList* myLinkedListCreate() {\r\n    \r\n}\r\n\r\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\nint myLinkedListGet(MyLinkedList* obj, int index) {\r\n    \r\n}\r\n\r\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int val) {\r\n    \r\n}\r\n\r\n/** Append a node of value val to the last element of the linked list. */\r\nvoid myLinkedListAddAtTail(MyLinkedList* obj, int val) {\r\n    \r\n}\r\n\r\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\nvoid myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {\r\n    \r\n}\r\n\r\n/** Delete the index-th node in the linked list, if the index is valid. */\r\nvoid myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {\r\n    \r\n}\r\n\r\nvoid myLinkedListFree(MyLinkedList* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MyLinkedList struct will be instantiated and called as such:\r\n * struct MyLinkedList* obj = myLinkedListCreate();\r\n * int param_1 = myLinkedListGet(obj, index);\r\n * myLinkedListAddAtHead(obj, val);\r\n * myLinkedListAddAtTail(obj, val);\r\n * myLinkedListAddAtIndex(obj, index, val);\r\n * myLinkedListDeleteAtIndex(obj, index);\r\n * myLinkedListFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyLinkedList {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyLinkedList() {\r\n        \r\n    }\r\n    \r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    public int Get(int index) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    public void AddAtHead(int val) {\r\n        \r\n    }\r\n    \r\n    /** Append a node of value val to the last element of the linked list. */\r\n    public void AddAtTail(int val) {\r\n        \r\n    }\r\n    \r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    public void AddAtIndex(int index, int val) {\r\n        \r\n    }\r\n    \r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    public void DeleteAtIndex(int index) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * MyLinkedList obj = new MyLinkedList();\r\n * int param_1 = obj.Get(index);\r\n * obj.AddAtHead(val);\r\n * obj.AddAtTail(val);\r\n * obj.AddAtIndex(index,val);\r\n * obj.DeleteAtIndex(index);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MyLinkedList = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the value of the index-th node in the linked list. If the index is invalid, return -1. \r\n * @param {number} index\r\n * @return {number}\r\n */\r\nMyLinkedList.prototype.get = function(index) {\r\n    \r\n};\r\n\r\n/**\r\n * Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nMyLinkedList.prototype.addAtHead = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Append a node of value val to the last element of the linked list. \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nMyLinkedList.prototype.addAtTail = function(val) {\r\n    \r\n};\r\n\r\n/**\r\n * Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. \r\n * @param {number} index \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nMyLinkedList.prototype.addAtIndex = function(index, val) {\r\n    \r\n};\r\n\r\n/**\r\n * Delete the index-th node in the linked list, if the index is valid. \r\n * @param {number} index\r\n * @return {void}\r\n */\r\nMyLinkedList.prototype.deleteAtIndex = function(index) {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * var obj = Object.create(MyLinkedList).createNew()\r\n * var param_1 = obj.get(index)\r\n * obj.addAtHead(val)\r\n * obj.addAtTail(val)\r\n * obj.addAtIndex(index,val)\r\n * obj.deleteAtIndex(index)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyLinkedList\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the value of the index-th node in the linked list. If the index is invalid, return -1.\r\n    :type index: Integer\r\n    :rtype: Integer\r\n=end\r\n    def get(index)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_at_head(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Append a node of value val to the last element of the linked list.\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_at_tail(val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.\r\n    :type index: Integer\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_at_index(index, val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Delete the index-th node in the linked list, if the index is valid.\r\n    :type index: Integer\r\n    :rtype: Void\r\n=end\r\n    def delete_at_index(index)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyLinkedList object will be instantiated and called as such:\r\n# obj = MyLinkedList.new()\r\n# param_1 = obj.get(index)\r\n# obj.add_at_head(val)\r\n# obj.add_at_tail(val)\r\n# obj.add_at_index(index, val)\r\n# obj.delete_at_index(index)"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyLinkedList {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\n    func get(_ index: Int) -> Int {\n      \n    }\n    \n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\n    func addAtHead(_ val: Int) {\n      \n    }\n    \n    /** Append a node of value val to the last element of the linked list. */\n    func addAtTail(_ val: Int) {\n      \n    }\n    \n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\n    func addAtIndex(_ index: Int, _ val: Int) {\n      \n    }\n    \n    /** Delete the index-th node in the linked list, if the index is valid. */\n    func deleteAtIndex(_ index: Int) {\n      \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList()\n * let ret_1: Int = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index, val)\n * obj.deleteAtIndex(index)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MyLinkedList struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyLinkedList {\r\n    \r\n}\r\n\r\n\r\n/** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\nfunc (this *MyLinkedList) Get(index int) int {\r\n    \r\n}\r\n\r\n\r\n/** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\nfunc (this *MyLinkedList) AddAtHead(val int)  {\r\n    \r\n}\r\n\r\n\r\n/** Append a node of value val to the last element of the linked list. */\r\nfunc (this *MyLinkedList) AddAtTail(val int)  {\r\n    \r\n}\r\n\r\n\r\n/** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\nfunc (this *MyLinkedList) AddAtIndex(index int, val int)  {\r\n    \r\n}\r\n\r\n\r\n/** Delete the index-th node in the linked list, if the index is valid. */\r\nfunc (this *MyLinkedList) DeleteAtIndex(index int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * param_1 := obj.Get(index);\r\n * obj.AddAtHead(val);\r\n * obj.AddAtTail(val);\r\n * obj.AddAtIndex(index,val);\r\n * obj.DeleteAtIndex(index);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyLinkedList() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    def get(index: Int): Int = {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    def addAtHead(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Append a node of value val to the last element of the linked list. */\r\n    def addAtTail(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    def addAtIndex(index: Int, `val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    def deleteAtIndex(index: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * var obj = new MyLinkedList()\r\n * var param_1 = obj.get(index)\r\n * obj.addAtHead(`val`)\r\n * obj.addAtTail(`val`)\r\n * obj.addAtIndex(index,`val`)\r\n * obj.deleteAtIndex(index)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyLinkedList() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */\r\n    fun get(index: Int): Int {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */\r\n    fun addAtHead(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Append a node of value val to the last element of the linked list. */\r\n    fun addAtTail(`val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */\r\n    fun addAtIndex(index: Int, `val`: Int) {\r\n        \r\n    }\r\n\r\n    /** Delete the index-th node in the linked list, if the index is valid. */\r\n    fun deleteAtIndex(index: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyLinkedList object will be instantiated and called as such:\r\n * var obj = MyLinkedList()\r\n * var param_1 = obj.get(index)\r\n * obj.addAtHead(`val`)\r\n * obj.addAtTail(`val`)\r\n * obj.addAtIndex(index,`val`)\r\n * obj.deleteAtIndex(index)\r\n */"}],"testcase":"[\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"deleteAtIndex\",\"get\"]\n[[],[1],[3],[1,2],[1],[1],[1]]","testable":true,"templateMeta":{"classname":"MyLinkedList","maxbytesperline":400000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"get","params":[{"type":"integer","name":"index"}],"return":{"type":"integer"},"comment":"Get the value of the index-th node in the linked list. If the index is invalid, return -1."},{"name":"addAtHead","params":[{"type":"integer","name":"val"}],"return":{"type":"void"},"comment":"Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list."},{"name":"addAtTail","params":[{"type":"integer","name":"val"}],"return":{"type":"void"},"comment":"Append a node of value val to the last element of the linked list."},{"name":"addAtIndex","params":[{"type":"integer","name":"index"},{"type":"integer","name":"val"}],"return":{"type":"void"},"comment":"Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted."},{"name":"deleteAtIndex","params":[{"type":"integer","name":"index"}],"return":{"type":"void"},"comment":"Delete the index-th node in the linked list, if the index is valid."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}