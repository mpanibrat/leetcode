{"id":140,"fid":140,"name":"Word Break II","slug":"word-break-ii","link":"https://leetcode.com/problems/word-break-ii/description/","percent":25.706263074936345,"level":"Hard","category":"algorithms","totalAC":"133.6K","totalSubmit":"519.6K","desc":"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.\r\n\r\nNote:\r\n\r\n\r\n\tThe same word in the dictionary may be reused multiple times in the segmentation.\r\n\tYou may assume the dictionary does not contain duplicate words.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\ns = \"catsanddog\"\r\nwordDict = [\"cat\", \"cats\", \"and\", \"sand\", \"dog\"]\r\nOutput:\r\n[\r\n  \"cats and dog\",\r\n  \"cat sand dog\"\r\n]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\ns = \"pineapplepenapple\"\r\nwordDict = [\"apple\", \"pen\", \"applepen\", \"pine\", \"pineapple\"]\r\nOutput:\r\n[\r\n  \"pine apple pen apple\",\r\n  \"pineapple pen apple\",\r\n  \"pine applepen apple\"\r\n]\r\nExplanation: Note that you are allowed to reuse a dictionary word.\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput:\r\ns = \"catsandog\"\r\nwordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\r\nOutput:\r\n[]\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> wordBreak(string s, vector<string>& wordDict) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> wordBreak(String s, List<String> wordDict) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def wordBreak(self, s, wordDict):\r\n        \"\"\"\r\n        :type s: str\r\n        :type wordDict: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def wordBreak(self, s, wordDict):\r\n        \"\"\"\r\n        :type s: str\r\n        :type wordDict: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** wordBreak(char* s, char** wordDict, int wordDictSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> WordBreak(string s, IList<string> wordDict) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @param {string[]} wordDict\r\n * @return {string[]}\r\n */\r\nvar wordBreak = function(s, wordDict) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String[]} word_dict\r\n# @return {String[]}\r\ndef word_break(s, word_dict)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordBreak(s string, wordDict []string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def wordBreak(s: String, wordDict: List[String]): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun wordBreak(s: String, wordDict: List<String>): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"\"catsanddog\"\n[\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]","testable":true,"templateMeta":{"name":"wordBreak","params":[{"name":"s","type":"string"},{"name":"wordDict","type":"list<string>"}],"return":{"type":"list<string>","dealloc":true}}}