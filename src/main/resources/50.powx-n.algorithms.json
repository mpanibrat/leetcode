{"id":50,"fid":50,"name":"Pow(x, n)","slug":"powx-n","link":"https://leetcode.com/problems/powx-n/description/","percent":26.785989008976387,"level":"Medium","category":"algorithms","totalAC":"255.9K","totalSubmit":"955.5K","desc":"Implement pow(x, n), which calculates x raised to the power n (xn).\r\n\r\nExample 1:\r\n\r\n\r\nInput: 2.00000, 10\r\nOutput: 1024.00000\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: 2.10000, 3\r\nOutput: 9.26100\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: 2.00000, -2\r\nOutput: 0.25000\r\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\r\n\r\n\r\nNote:\r\n\r\n\r\n\t-100.0 < x < 100.0\r\n\tn is a 32-bit signed integer, within the range [−231, 231 − 1]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    double myPow(double x, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public double myPow(double x, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def myPow(self, x, n):\r\n        \"\"\"\r\n        :type x: float\r\n        :type n: int\r\n        :rtype: float\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def myPow(self, x, n):\r\n        \"\"\"\r\n        :type x: float\r\n        :type n: int\r\n        :rtype: float\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"double myPow(double x, int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public double MyPow(double x, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} x\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar myPow = function(x, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Float} x\r\n# @param {Integer} n\r\n# @return {Float}\r\ndef my_pow(x, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func myPow(_ x: Double, _ n: Int) -> Double {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func myPow(x float64, n int) float64 {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def myPow(x: Double, n: Int): Double = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun myPow(x: Double, n: Int): Double {\r\n        \r\n    }\r\n}"}],"testcase":"2.00000\n10","testable":true,"templateMeta":{"name":"myPow","params":[{"name":"x","type":"double"},{"name":"n","type":"integer"}],"return":{"type":"double"}}}