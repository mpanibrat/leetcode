{"id":911,"fid":879,"name":"Profitable Schemes","slug":"profitable-schemes","link":"https://leetcode.com/problems/profitable-schemes/description/","percent":33.64352183249821,"level":"Hard","category":"algorithms","totalAC":"3.3K","totalSubmit":"9.8K","desc":"There are G people in a gang, and a list of various crimes they could commit.\r\n\r\nThe i-th crime generates a profit[i] and requires group[i] gang members to participate.\r\n\r\nIf a gang member participates in one crime, that member can't participate in another crime.\r\n\r\nLet's call a profitable scheme any subset of these crimes that generates at least P profit, and the total number of gang members participating in that subset of crimes is at most G.\r\n\r\nHow many schemes can be chosen?  Since the answer may be very large, return it modulo 10^9 + 7.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: G = 5, P = 3, group = [2,2], profit = [2,3]\r\nOutput: 2\r\nExplanation: \r\nTo make a profit of at least 3, the gang could either commit crimes 0 and 1, or just crime 1.\r\nIn total, there are 2 schemes.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: G = 10, P = 5, group = [2,3,5], profit = [6,7,8]\r\nOutput: 7\r\nExplanation: \r\nTo make a profit of at least 5, the gang could commit any crimes, as long as they commit one.\r\nThere are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\r\n\r\n\r\n \r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= G <= 100\r\n\t0 <= P <= 100\r\n\t1 <= group[i] <= 100\r\n\t0 <= profit[i] <= 100\r\n\t1 <= group.length = profit.length <= 100\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int profitableSchemes(int G, int P, vector<int>& group, vector<int>& profit) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int profitableSchemes(int G, int P, int[] group, int[] profit) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def profitableSchemes(self, G, P, group, profit):\n        \"\"\"\n        :type G: int\n        :type P: int\n        :type group: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def profitableSchemes(self, G, P, group, profit):\n        \"\"\"\n        :type G: int\n        :type P: int\n        :type group: List[int]\n        :type profit: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int profitableSchemes(int G, int P, int* group, int groupSize, int* profit, int profitSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ProfitableSchemes(int G, int P, int[] group, int[] profit) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} G\n * @param {number} P\n * @param {number[]} group\n * @param {number[]} profit\n * @return {number}\n */\nvar profitableSchemes = function(G, P, group, profit) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} g\n# @param {Integer} p\n# @param {Integer[]} group\n# @param {Integer[]} profit\n# @return {Integer}\ndef profitable_schemes(g, p, group, profit)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func profitableSchemes(_ G: Int, _ P: Int, _ group: [Int], _ profit: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func profitableSchemes(G int, P int, group []int, profit []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def profitableSchemes(G: Int, P: Int, group: Array[Int], profit: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun profitableSchemes(G: Int, P: Int, group: IntArray, profit: IntArray): Int {\n        \n    }\n}"}],"testcase":"5\n3\n[2,2]\n[2,3]","testable":true,"templateMeta":{"name":"profitableSchemes","params":[{"name":"G","type":"integer"},{"name":"P","type":"integer"},{"name":"group","type":"integer[]"},{"name":"profit","type":"integer[]"}],"return":{"type":"integer"}}}