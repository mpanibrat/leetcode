{"id":873,"fid":843,"name":"Guess the Word","slug":"guess-the-word","link":"https://leetcode.com/problems/guess-the-word/description/","percent":38.991729027176056,"level":"Hard","category":"algorithms","totalAC":"7.9K","totalSubmit":"20.3K","desc":"This problem is an interactive problem new to the LeetCode platform.\r\n\r\nWe are given a word list of unique words, each word is 6 letters long, and one word in this list is chosen as secret.\r\n\r\nYou may call master.guess(word) to guess a word.  The guessed word should have type string and must be from the original list with 6 lowercase letters.\r\n\r\nThis function returns an integer type, representing the number of exact matches (value and position) of your guess to the secret word.  Also, if your guess is not in the given wordlist, it will return -1 instead.\r\n\r\nFor each test case, you have 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or less calls to master.guess and at least one of these guesses was the secret, you pass the testcase.\r\n\r\nBesides the example test case below, there will be 5 additional test cases, each with 100 words in the word list.  The letters of each word in those testcases were chosen independently at random from 'a' to 'z', such that every word in the given word lists is unique.\r\n\r\n\r\nExample 1:\r\nInput: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"]\r\n\r\nExplanation:\r\n\r\nmaster.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\r\nmaster.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\r\nmaster.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\r\nmaster.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\r\nmaster.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\r\n\r\nWe made 5 calls to master.guess and one of them was the secret, so we pass the test case.\r\n\r\n\r\nNote:  Any solutions that attempt to circumvent the judge will result in disqualification.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * class Master {\r\n *   public:\r\n *     int guess(string word);\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void findSecretWord(vector<string>& wordlist, Master& master) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * interface Master {\r\n *     public int guess(String word) {}\r\n * }\r\n */\r\nclass Solution {\r\n    public void findSecretWord(String[] wordlist, Master master) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# \"\"\"\r\n# This is Master's API interface.\r\n# You should not implement it, or speculate about its implementation\r\n# \"\"\"\r\n#class Master(object):\r\n#    def guess(self, word):\r\n#        \"\"\"\r\n#        :type word: str\r\n#        :rtype int\r\n#        \"\"\"\r\n\r\nclass Solution(object):\r\n    def findSecretWord(self, wordlist, master):\r\n        \"\"\"\r\n        :type wordlist: List[Str]\r\n        :type master: Master\r\n        :rtype: None\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# \"\"\"\r\n# This is Master's API interface.\r\n# You should not implement it, or speculate about its implementation\r\n# \"\"\"\r\n#class Master:\r\n#    def guess(self, word):\r\n#        \"\"\"\r\n#        :type word: str\r\n#        :rtype int\r\n#        \"\"\"\r\n\r\nclass Solution:\r\n    def findSecretWord(self, wordlist, master):\r\n        \"\"\"\r\n        :type wordlist: List[Str]\r\n        :type master: Master\r\n        :rtype: None\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * *********************************************************************\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * *********************************************************************\r\n *\r\n * int guess(Master *, char *word);\r\n */\r\nvoid findSecretWord(char** wordlist, int wordlistSize, Master* master) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * class Master {\r\n *     public int Guess(string word);\r\n * }\r\n */\r\nclass Solution {\r\n    public void FindSecretWord(string[] wordlist, Master master) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * // This is the master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * function Master() {\r\n *\r\n *     @param {string[]} wordlist\r\n *     @param {Master} master\r\n *     @return {integer}\r\n *     this.guess = function(word) {\r\n *         ...\r\n *     };\r\n * };\r\n */\r\n/**\r\n * @param {string[]} wordlist\r\n * @param {Master} master\r\n * @return {void}\r\n */\r\nvar findSecretWord = function(wordlist, master) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"#    This is Master's API interface.\r\n#    You should not implement it, or speculate about its implementation\r\n#\r\n# class Master\r\n# =begin\r\n#     :type word: String\r\n#     :rtype: Integer\r\n# =end\r\n#     def guess(word)\r\n#         ...\r\n#     end\r\n# end\r\n#\r\n\r\n# @param {String[]} wordlist\r\n# @param {Master} master\r\n# @return {Void}\r\ndef find_secret_word(wordlist, master)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * class Master {\r\n *     public func guess(word: String) -> Int {}\r\n * }\r\n */\r\nclass Solution {\r\n    func findSecretWord(_ wordlist: [String], _ master: Master) {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * type Master struct {\r\n * }\r\n *\r\n * func (this *Master) Guess(word string) int {}\r\n */\r\nfunc findSecretWord(wordlist []string, master *Master) {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * class Master {\r\n *\r\n *   def guess(word: String): Int = {}\r\n *\r\n * }\r\n */\r\nobject Solution {\r\n    def findSecretWord(wordlist: Array[String], master: Master): Unit = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * // This is the Master's API interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * interface Master {\r\n *     fun guess(word: String): Int {}\r\n * }\r\n */\r\nclass Solution {\r\n    fun findSecretWord(wordlist: Array<String>, master: Master) {\r\n        \r\n    }\r\n}"}],"testcase":"\"acckzz\"\n[\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"]\n10","testable":true,"templateMeta":{"name":"findSecretWord","params":[{"name":"secret","type":"string"},{"name":"wordlist","type":"string[]"},{"name":"numguesses","type":"integer"}],"return":{"type":"void"},"generatedriver":false,"generatedefinition":false}}