{"id":134,"fid":134,"name":"Gas Station","slug":"gas-station","link":"https://leetcode.com/problems/gas-station/description/","percent":31.747437349400755,"level":"Medium","category":"algorithms","totalAC":"120.8K","totalSubmit":"380.6K","desc":"There are N gas stations along a circular route, where the amount of gas at station i is gas[i].\r\n\r\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from station i to its next station (i+1). You begin the journey with an empty tank at one of the gas stations.\r\n\r\nReturn the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1.\r\n\r\nNote:\r\n\r\n\r\n\tIf there exists aÂ solution, it is guaranteed to be unique.\r\n\tBoth input arrays are non-empty and have the same length.\r\n\tEach element in the input arrays is a non-negative integer.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\ngas  = [1,2,3,4,5]\r\ncost = [3,4,5,1,2]\r\n\r\nOutput: 3\r\n\r\nExplanation:\r\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\r\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\r\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\r\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\r\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\r\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\r\nTherefore, return 3 as the starting index.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\ngas  = [2,3,4]\r\ncost = [3,4,3]\r\n\r\nOutput: -1\r\n\r\nExplanation:\r\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\r\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\r\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\r\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\r\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\r\nTherefore, you can't travel around the circuit once no matter where you start.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int canCompleteCircuit(int[] gas, int[] cost) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def canCompleteCircuit(self, gas, cost):\r\n        \"\"\"\r\n        :type gas: List[int]\r\n        :type cost: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def canCompleteCircuit(self, gas, cost):\r\n        \"\"\"\r\n        :type gas: List[int]\r\n        :type cost: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int canCompleteCircuit(int* gas, int gasSize, int* cost, int costSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int CanCompleteCircuit(int[] gas, int[] cost) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} gas\r\n * @param {number[]} cost\r\n * @return {number}\r\n */\r\nvar canCompleteCircuit = function(gas, cost) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} gas\r\n# @param {Integer[]} cost\r\n# @return {Integer}\r\ndef can_complete_circuit(gas, cost)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canCompleteCircuit(_ gas: [Int], _ cost: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canCompleteCircuit(gas []int, cost []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def canCompleteCircuit(gas: Array[Int], cost: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun canCompleteCircuit(gas: IntArray, cost: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3,4,5]\n[3,4,5,1,2]","testable":true,"templateMeta":{"name":"canCompleteCircuit","params":[{"name":"gas","type":"integer[]"},{"name":"cost","type":"integer[]"}],"return":{"type":"integer"}}}