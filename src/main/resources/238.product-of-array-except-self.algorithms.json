{"id":238,"fid":238,"name":"Product of Array Except Self","slug":"product-of-array-except-self","link":"https://leetcode.com/problems/product-of-array-except-self/description/","percent":52.2896524692971,"level":"Medium","category":"algorithms","totalAC":"192.1K","totalSubmit":"367.4K","desc":"Given an array nums of n integers where n > 1, Â return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].\r\n\r\nExample:\r\n\r\n\r\nInput:  [1,2,3,4]\r\nOutput: [24,12,8,6]\r\n\r\n\r\nNote: Please solve it without division and in O(n).\r\n\r\nFollow up:\r\nCould you solve it with constant space complexity? (The output array does not count as extra space for the purpose of space complexity analysis.)\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> productExceptSelf(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] productExceptSelf(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def productExceptSelf(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def productExceptSelf(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* productExceptSelf(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] ProductExceptSelf(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar productExceptSelf = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef product_except_self(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func productExceptSelf(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func productExceptSelf(nums []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def productExceptSelf(nums: Array[Int]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun productExceptSelf(nums: IntArray): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3,4]","testable":true,"templateMeta":{"name":"productExceptSelf","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}