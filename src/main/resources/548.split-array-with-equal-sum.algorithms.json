{"id":548,"fid":548,"name":"Split Array with Equal Sum","slug":"split-array-with-equal-sum","link":"https://leetcode.com/problems/split-array-with-equal-sum/description/","percent":39.41570550452379,"level":"Medium","category":"algorithms","totalAC":"5.7K","totalSubmit":"14.5K","desc":"\r\nGiven an array with n integers, you need to find if there are triplets  (i, j, k) which satisfies following conditions:\r\n\r\n 0 < i, i + 1 < j, j + 1 < k < n - 1 \r\n Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal. \r\n\r\nwhere we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.\r\n\r\n\r\nExample:\r\n\r\nInput: [1,2,1,2,1,2,1]\r\nOutput: True\r\nExplanation:\r\ni = 1, j = 3, k = 5. \r\nsum(0, i - 1) = sum(0, 0) = 1\r\nsum(i + 1, j - 1) = sum(2, 2) = 1\r\nsum(j + 1, k - 1) = sum(4, 4) = 1\r\nsum(k + 1, n - 1) = sum(6, 6) = 1\r\n\r\n\r\n\r\nNote:\r\n\r\n 1 \r\n Elements in the given array will be in range [-1,000,000, 1,000,000]. \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"\r\nclass Solution {\r\npublic:\r\n    bool splitArray(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean splitArray(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"\r\nclass Solution(object):\r\n    def splitArray(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def splitArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool splitArray(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool SplitArray(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\n\r\nvar splitArray = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef split_array(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func splitArray(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func splitArray(nums []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def splitArray(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun splitArray(nums: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[1,2,1,2,1,2,1]","testable":true,"templateMeta":{"name":"splitArray","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}