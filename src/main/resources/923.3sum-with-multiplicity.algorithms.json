{"id":959,"fid":923,"name":"3Sum With Multiplicity","slug":"3sum-with-multiplicity","link":"https://leetcode.com/problems/3sum-with-multiplicity/description/","percent":28.149428743235116,"level":"Medium","category":"algorithms","totalAC":"3.7K","totalSubmit":"13.3K","desc":"Given an integer array A, and an integer target, return the number of tuples i, j, k  such that i < j < k and A[i] + A[j] + A[k] == target.\r\n\r\nAs the answer can be very large, return it modulo 10^9 + 7.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: A = [1,1,2,2,3,3,4,4,5,5], target = 8\r\nOutput: 20\r\nExplanation: \r\nEnumerating by the values (A[i], A[j], A[k]):\r\n(1, 2, 5) occurs 8 times;\r\n(1, 3, 4) occurs 8 times;\r\n(2, 2, 4) occurs 2 times;\r\n(2, 3, 3) occurs 2 times.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: A = [1,1,2,2,2,2], target = 5\r\nOutput: 12\r\nExplanation: \r\nA[i] = 1, A[j] = A[k] = 2 occurs 12 times:\r\nWe choose one 1 from [1,1] in 2 ways,\r\nand two 2s from [2,2,2,2] in 6 ways.\r\n\r\n\r\n \r\n\r\n\r\nNote:\r\n\r\n\r\n\t3 <= A.length <= 3000\r\n\t0 <= A[i] <= 100\r\n\t0 <= target <= 300\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int threeSumMulti(vector<int>& A, int target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int threeSumMulti(int[] A, int target) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def threeSumMulti(self, A, target):\n        \"\"\"\n        :type A: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def threeSumMulti(self, A, target):\n        \"\"\"\n        :type A: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int threeSumMulti(int* A, int ASize, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ThreeSumMulti(int[] A, int target) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @param {number} target\n * @return {number}\n */\nvar threeSumMulti = function(A, target) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @param {Integer} target\n# @return {Integer}\ndef three_sum_multi(a, target)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func threeSumMulti(_ A: [Int], _ target: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func threeSumMulti(A []int, target int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def threeSumMulti(A: Array[Int], target: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun threeSumMulti(A: IntArray, target: Int): Int {\n        \n    }\n}"}],"testcase":"[1,1,2,2,3,3,4,4,5,5]\n8","testable":true,"templateMeta":{"name":"threeSumMulti","params":[{"name":"A","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"integer"}}}