{"id":810,"fid":794,"name":"Valid Tic-Tac-Toe State","slug":"valid-tic-tac-toe-state","link":"https://leetcode.com/problems/valid-tic-tac-toe-state/description/","percent":27.94923947647683,"level":"Medium","category":"algorithms","totalAC":"6.3K","totalSubmit":"22.6K","desc":"A Tic-Tac-Toe board is given as a string array board. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.\r\n\r\nThe board is a 3 x 3 array, and consists of characters \" \", \"X\", and \"O\".  The \" \" character represents an empty square.\r\n\r\nHere are the rules of Tic-Tac-Toe:\r\n\r\n\r\n\tPlayers take turns placing characters into empty squares (\" \").\r\n\tThe first player always places \"X\" characters, while the second player always places \"O\" characters.\r\n\t\"X\" and \"O\" characters are always placed into empty squares, never filled ones.\r\n\tThe game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\r\n\tThe game also ends if all squares are non-empty.\r\n\tNo more moves can be played if the game is over.\r\n\r\n\r\n\r\nExample 1:\r\nInput: board = [\"O  \", \"   \", \"   \"]\r\nOutput: false\r\nExplanation: The first player always plays \"X\".\r\n\r\nExample 2:\r\nInput: board = [\"XOX\", \" X \", \"   \"]\r\nOutput: false\r\nExplanation: Players take turns making moves.\r\n\r\nExample 3:\r\nInput: board = [\"XXX\", \"   \", \"OOO\"]\r\nOutput: false\r\n\r\nExample 4:\r\nInput: board = [\"XOX\", \"O O\", \"XOX\"]\r\nOutput: true\r\n\r\n\r\nNote:\r\n\r\n\r\n\tboard is a length-3 array of strings, where each string board[i] has length 3.\r\n\tEach board[i][j] is a character in the set {\" \", \"X\", \"O\"}.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool validTicTacToe(vector<string>& board) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean validTicTacToe(String[] board) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def validTicTacToe(self, board):\r\n        \"\"\"\r\n        :type board: List[str]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def validTicTacToe(self, board):\r\n        \"\"\"\r\n        :type board: List[str]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool validTicTacToe(char** board, int boardSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool ValidTicTacToe(string[] board) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} board\r\n * @return {boolean}\r\n */\r\nvar validTicTacToe = function(board) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} board\r\n# @return {Boolean}\r\ndef valid_tic_tac_toe(board)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func validTicTacToe(_ board: [String]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func validTicTacToe(board []string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def validTicTacToe(board: Array[String]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun validTicTacToe(board: Array<String>): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[\"O  \",\"   \",\"   \"]","testable":true,"templateMeta":{"name":"validTicTacToe","params":[{"name":"board","type":"string[]"}],"return":{"type":"boolean"}}}