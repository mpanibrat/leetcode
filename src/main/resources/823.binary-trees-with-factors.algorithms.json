{"id":843,"fid":823,"name":"Binary Trees With Factors","slug":"binary-trees-with-factors","link":"https://leetcode.com/problems/binary-trees-with-factors/description/","percent":30.462642573369216,"level":"Medium","category":"algorithms","totalAC":"4.8K","totalSubmit":"15.6K","desc":"Given an array of unique integers, each integer is strictly greater than 1.\r\n\r\nWe make a binary tree using these integers and each number may be used for any number of times.\r\n\r\nEach non-leaf node's value should be equal to the product of the values of it's children.\r\n\r\nHow many binary trees can we make?  Return the answer modulo 10 ** 9 + 7.\r\n\r\nExample 1:\r\n\r\n\r\nInput: A = [2, 4]\r\nOutput: 3\r\nExplanation: We can make these trees: [2], [4], [4, 2, 2]\r\n\r\nExample 2:\r\n\r\n\r\nInput: A = [2, 4, 5, 10]\r\nOutput: 7\r\nExplanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 1000.\r\n\t2 <= A[i] <= 10 ^ 9.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numFactoredBinaryTrees(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numFactoredBinaryTrees(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numFactoredBinaryTrees(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numFactoredBinaryTrees(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numFactoredBinaryTrees(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumFactoredBinaryTrees(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar numFactoredBinaryTrees = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer}\ndef num_factored_binary_trees(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numFactoredBinaryTrees(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numFactoredBinaryTrees(A []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numFactoredBinaryTrees(A: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numFactoredBinaryTrees(A: IntArray): Int {\n        \n    }\n}"}],"testcase":"[2,4]","testable":true,"templateMeta":{"name":"numFactoredBinaryTrees","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}