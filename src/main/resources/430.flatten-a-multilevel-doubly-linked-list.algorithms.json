{"id":766,"fid":430,"name":"Flatten a Multilevel Doubly Linked List","slug":"flatten-a-multilevel-doubly-linked-list","link":"https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/description/","percent":35.89617364063549,"level":"Medium","category":"algorithms","totalAC":"8K","totalSubmit":"22.3K","desc":"You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.\r\n\r\nFlatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\nInput:\r\n 1---2---3---4---5---6--NULL\r\n         |\r\n         7---8---9---10--NULL\r\n             |\r\n             11--12--NULL\r\n\r\nOutput:\r\n1-2-3-7-8-11-12-9-10-4-5-6-NULL\r\n\r\n\r\n \r\n\r\nExplanation for the above example:\r\n\r\nGiven the following multilevel doubly linked list:\r\n\r\n\r\n\r\n\r\n \r\n\r\nWe should return the following flattened doubly linked list:\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\npublic:\r\n    int val = NULL;\r\n    Node* prev = NULL;\r\n    Node* next = NULL;\r\n    Node* child = NULL;\r\n\r\n    Node() {}\r\n\r\n    Node(int _val, Node* _prev, Node* _next, Node* _child) {\r\n        val = _val;\r\n        prev = _prev;\r\n        next = _next;\r\n        child = _child;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\npublic:\r\n    Node* flatten(Node* head) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public int val;\r\n    public Node prev;\r\n    public Node next;\r\n    public Node child;\r\n\r\n    public Node() {}\r\n\r\n    public Node(int _val,Node _prev,Node _next,Node _child) {\r\n        val = _val;\r\n        prev = _prev;\r\n        next = _next;\r\n        child = _child;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\n    public Node flatten(Node head) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"\"\"\"\r\n# Definition for a Node.\r\nclass Node(object):\r\n    def __init__(self, val, prev, next, child):\r\n        self.val = val\r\n        self.prev = prev\r\n        self.next = next\r\n        self.child = child\r\n\"\"\"\r\nclass Solution(object):\r\n    def flatten(self, head):\r\n        \"\"\"\r\n        :type head: Node\r\n        :rtype: Node\r\n        \"\"\"\r\n        "},{"value":"csharp","text":"C#","defaultCode":"/*\r\n// Definition for a Node.\r\npublic class Node {\r\n    public int val;\r\n    public Node prev;\r\n    public Node next;\r\n    public Node child;\r\n\r\n    public Node(){}\r\n    public Node(int _val,Node _prev,Node _next,Node _child) {\r\n        val = _val;\r\n        prev = _prev;\r\n        next = _next;\r\n        child = _child;\r\n}\r\n*/\r\npublic class Solution {\r\n    public Node Flatten(Node head) {\r\n        \r\n    }\r\n}"}],"testcase":"{\"$id\":\"1\",\"child\":null,\"next\":{\"$id\":\"2\",\"child\":null,\"next\":{\"$id\":\"3\",\"child\":{\"$id\":\"7\",\"child\":null,\"next\":{\"$id\":\"8\",\"child\":{\"$id\":\"11\",\"child\":null,\"next\":{\"$id\":\"12\",\"child\":null,\"next\":null,\"prev\":{\"$ref\":\"11\"},\"val\":12},\"prev\":null,\"val\":11},\"next\":{\"$id\":\"9\",\"child\":null,\"next\":{\"$id\":\"10\",\"child\":null,\"next\":null,\"prev\":{\"$ref\":\"9\"},\"val\":10},\"prev\":{\"$ref\":\"8\"},\"val\":9},\"prev\":{\"$ref\":\"7\"},\"val\":8},\"prev\":null,\"val\":7},\"next\":{\"$id\":\"4\",\"child\":null,\"next\":{\"$id\":\"5\",\"child\":null,\"next\":{\"$id\":\"6\",\"child\":null,\"next\":null,\"prev\":{\"$ref\":\"5\"},\"val\":6},\"prev\":{\"$ref\":\"4\"},\"val\":5},\"prev\":{\"$ref\":\"3\"},\"val\":4},\"prev\":{\"$ref\":\"2\"},\"val\":3},\"prev\":{\"$ref\":\"1\"},\"val\":2},\"prev\":null,\"val\":1}","testable":true,"templateMeta":{"name":"flatten","params":[{"name":"head","type":"Node"}],"return":{"type":"Node"},"structures":[{"name":"Node","comment":"Definition for a Node.","members":[{"name":"val","type":"integer"},{"name":"prev","type":"Node"},{"name":"next","type":"Node"},{"name":"child","type":"Node"}]}]}}