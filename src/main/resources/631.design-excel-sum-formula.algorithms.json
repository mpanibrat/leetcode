{"id":631,"fid":631,"name":"Design Excel Sum Formula","slug":"design-excel-sum-formula","link":"https://leetcode.com/problems/design-excel-sum-formula/description/","percent":28.17685837690384,"level":"Hard","category":"algorithms","totalAC":"2.5K","totalSubmit":"8.8K","desc":"Your task is to design the basic function of Excel and implement the function of sum formula.  Specifically, you need to implement the following functions:\r\n\r\n\r\n\r\nExcel(int H, char W): This is the constructor. The inputs represents the height and width of the Excel form. H is a positive integer, range from 1 to 26. It represents the height. W is a character range from 'A' to 'Z'. It represents that the width is the number of characters from 'A' to W. The Excel form content is represented by a height * width 2D integer array C, it should be initialized to zero. You should assume that the first row of C starts from 1, and the first column of C starts from 'A'.\r\n\r\n\r\n\r\nvoid Set(int row, char column, int val): Change the value at C(row, column) to be val.\r\n\r\nint Get(int row, char column): Return the value at C(row, column).\r\n\r\nint Sum(int row, char column, List of Strings : numbers): This function calculate and set the value at C(row, column), where the value should be the sum of cells represented by numbers. This function return the sum result at C(row, column). This sum formula should exist until this cell is overlapped by another value or another sum formula.\r\n\r\nnumbers is a list of strings that each string represent a cell or a range of cells. If the string represent a single cell, then it has the following format : ColRow. For example, \"F7\" represents the cell at (7, F). \r\n\r\nIf the string represent a range of cells, then it has the following format : ColRow1:ColRow2. The range will always be a rectangle, and ColRow1 represent the position of the top-left cell, and ColRow2 represents the position of the bottom-right cell. \r\n\r\nExample 1:\r\n\r\nExcel(3,\"C\"); \r\n// construct a 3*3 2D array with all zero.\r\n//   A B C\r\n// 1 0 0 0\r\n// 2 0 0 0\r\n// 3 0 0 0\r\n\r\nSet(1, \"A\", 2);\r\n// set C(1,\"A\") to be 2.\r\n//   A B C\r\n// 1 2 0 0\r\n// 2 0 0 0\r\n// 3 0 0 0\r\n\r\nSum(3, \"C\", [\"A1\", \"A1:B2\"]);\r\n// set C(3,\"C\") to be the sum of value at C(1,\"A\") and the values sum of the rectangle range whose top-left cell is C(1,\"A\") and bottom-right cell is C(2,\"B\"). Return 4. \r\n//   A B C\r\n// 1 2 0 0\r\n// 2 0 0 0\r\n// 3 0 0 4\r\n\r\nSet(2, \"B\", 2);\r\n// set C(2,\"B\") to be 2. Note C(3, \"C\") should also be changed.\r\n//   A B C\r\n// 1 2 0 0\r\n// 2 0 2 0\r\n// 3 0 0 6\r\n\r\n\r\n\r\nNote:\r\n\r\nYou could assume that there won't be any circular sum reference. For example, A1 = sum(B1) and B1 = sum(A1).\r\n The test cases are using double-quotes to represent a character.\r\nPlease remember to RESET your class variables declared in class Excel, as static/class variables are persisted across multiple test cases. Please see here for more details.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Excel {\r\npublic:\r\n    Excel(int H, char W) {\r\n        \r\n    }\r\n    \r\n    void set(int r, char c, int v) {\r\n        \r\n    }\r\n    \r\n    int get(int r, char c) {\r\n        \r\n    }\r\n    \r\n    int sum(int r, char c, vector<string> strs) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Excel object will be instantiated and called as such:\r\n * Excel obj = new Excel(H, W);\r\n * obj.set(r,c,v);\r\n * int param_2 = obj.get(r,c);\r\n * int param_3 = obj.sum(r,c,strs);\r\n */"},{"value":"java","text":"Java","defaultCode":"class Excel {\r\n\r\n    public Excel(int H, char W) {\r\n        \r\n    }\r\n    \r\n    public void set(int r, char c, int v) {\r\n        \r\n    }\r\n    \r\n    public int get(int r, char c) {\r\n        \r\n    }\r\n    \r\n    public int sum(int r, char c, String[] strs) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Excel object will be instantiated and called as such:\r\n * Excel obj = new Excel(H, W);\r\n * obj.set(r,c,v);\r\n * int param_2 = obj.get(r,c);\r\n * int param_3 = obj.sum(r,c,strs);\r\n */"},{"value":"python","text":"Python","defaultCode":"class Excel(object):\r\n\r\n    def __init__(self, H, W):\r\n        \"\"\"\r\n        :type H: int\r\n        :type W: str\r\n        \"\"\"\r\n        \r\n\r\n    def set(self, r, c, v):\r\n        \"\"\"\r\n        :type r: int\r\n        :type c: str\r\n        :type v: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def get(self, r, c):\r\n        \"\"\"\r\n        :type r: int\r\n        :type c: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def sum(self, r, c, strs):\r\n        \"\"\"\r\n        :type r: int\r\n        :type c: str\r\n        :type strs: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Excel object will be instantiated and called as such:\r\n# obj = Excel(H, W)\r\n# obj.set(r,c,v)\r\n# param_2 = obj.get(r,c)\r\n# param_3 = obj.sum(r,c,strs)"},{"value":"python3","text":"Python3","defaultCode":"class Excel:\r\n\r\n    def __init__(self, H, W):\r\n        \"\"\"\r\n        :type H: int\r\n        :type W: str\r\n        \"\"\"\r\n        \r\n\r\n    def set(self, r, c, v):\r\n        \"\"\"\r\n        :type r: int\r\n        :type c: str\r\n        :type v: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def get(self, r, c):\r\n        \"\"\"\r\n        :type r: int\r\n        :type c: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def sum(self, r, c, strs):\r\n        \"\"\"\r\n        :type r: int\r\n        :type c: str\r\n        :type strs: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Excel object will be instantiated and called as such:\r\n# obj = Excel(H, W)\r\n# obj.set(r,c,v)\r\n# param_2 = obj.get(r,c)\r\n# param_3 = obj.sum(r,c,strs)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Excel;\r\n\r\nExcel* excelCreate(int H, char W) {\r\n    \r\n}\r\n\r\nvoid excelSet(Excel* obj, int r, char c, int v) {\r\n    \r\n}\r\n\r\nint excelGet(Excel* obj, int r, char c) {\r\n    \r\n}\r\n\r\nint excelSum(Excel* obj, int r, char c, char** strs, int strsSize) {\r\n    \r\n}\r\n\r\nvoid excelFree(Excel* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Excel struct will be instantiated and called as such:\r\n * struct Excel* obj = excelCreate(H, W);\r\n * excelSet(obj, r, c, v);\r\n * int param_2 = excelGet(obj, r, c);\r\n * int param_3 = excelSum(obj, r, c, strs, strsSize);\r\n * excelFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Excel {\r\n\r\n    public Excel(int H, char W) {\r\n        \r\n    }\r\n    \r\n    public void Set(int r, char c, int v) {\r\n        \r\n    }\r\n    \r\n    public int Get(int r, char c) {\r\n        \r\n    }\r\n    \r\n    public int Sum(int r, char c, string[] strs) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Excel object will be instantiated and called as such:\r\n * Excel obj = new Excel(H, W);\r\n * obj.Set(r,c,v);\r\n * int param_2 = obj.Get(r,c);\r\n * int param_3 = obj.Sum(r,c,strs);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} H\r\n * @param {character} W\r\n */\r\nvar Excel = function(H, W) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} r \r\n * @param {character} c \r\n * @param {number} v\r\n * @return {void}\r\n */\r\nExcel.prototype.set = function(r, c, v) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} r \r\n * @param {character} c\r\n * @return {number}\r\n */\r\nExcel.prototype.get = function(r, c) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} r \r\n * @param {character} c \r\n * @param {string[]} strs\r\n * @return {number}\r\n */\r\nExcel.prototype.sum = function(r, c, strs) {\r\n    \r\n};\r\n\r\n/** \r\n * Your Excel object will be instantiated and called as such:\r\n * var obj = Object.create(Excel).createNew(H, W)\r\n * obj.set(r,c,v)\r\n * var param_2 = obj.get(r,c)\r\n * var param_3 = obj.sum(r,c,strs)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Excel\r\n\r\n=begin\r\n    :type h: Integer\r\n    :type w: Character\r\n=end\r\n    def initialize(h, w)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type r: Integer\r\n    :type c: Character\r\n    :type v: Integer\r\n    :rtype: Void\r\n=end\r\n    def set(r, c, v)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type r: Integer\r\n    :type c: Character\r\n    :rtype: Integer\r\n=end\r\n    def get(r, c)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type r: Integer\r\n    :type c: Character\r\n    :type strs: String[]\r\n    :rtype: Integer\r\n=end\r\n    def sum(r, c, strs)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Excel object will be instantiated and called as such:\r\n# obj = Excel.new(h, w)\r\n# obj.set(r, c, v)\r\n# param_2 = obj.get(r, c)\r\n# param_3 = obj.sum(r, c, strs)"},{"value":"swift","text":"Swift","defaultCode":"\nclass Excel {\n\n    init(_ H: Int, _ W: Character) {\n        \n    }\n    \n    func set(_ r: Int, _ c: Character, _ v: Int) {\n      \n    }\n    \n    func get(_ r: Int, _ c: Character) -> Int {\n      \n    }\n    \n    func sum(_ r: Int, _ c: Character, _ strs: [String]) -> Int {\n      \n    }\n}\n\n/**\n * Your Excel object will be instantiated and called as such:\n * let obj = Excel(H, W)\n * obj.set(r, c, v)\n * let ret_2: Int = obj.get(r, c)\n * let ret_3: Int = obj.sum(r, c, strs)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Excel struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(H int, W byte) Excel {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Excel) Set(r int, c byte, v int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Excel) Get(r int, c byte) int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Excel) Sum(r int, c byte, strs []string) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Excel object will be instantiated and called as such:\r\n * obj := Constructor(H, W);\r\n * obj.Set(r,c,v);\r\n * param_2 := obj.Get(r,c);\r\n * param_3 := obj.Sum(r,c,strs);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Excel(_H: Int, _W: Char) {\n\n    def set(r: Int, c: Char, v: Int) {\n        \n    }\n\n    def get(r: Int, c: Char): Int = {\n        \n    }\n\n    def sum(r: Int, c: Char, strs: Array[String]): Int = {\n        \n    }\n\n}\n\n/**\n * Your Excel object will be instantiated and called as such:\n * var obj = new Excel(H, W)\n * obj.set(r,c,v)\n * var param_2 = obj.get(r,c)\n * var param_3 = obj.sum(r,c,strs)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Excel(H: Int, W: Char) {\n\n    fun set(r: Int, c: Char, v: Int) {\n        \n    }\n\n    fun get(r: Int, c: Char): Int {\n        \n    }\n\n    fun sum(r: Int, c: Char, strs: Array<String>): Int {\n        \n    }\n\n}\n\n/**\n * Your Excel object will be instantiated and called as such:\n * var obj = Excel(H, W)\n * obj.set(r,c,v)\n * var param_2 = obj.get(r,c)\n * var param_3 = obj.sum(r,c,strs)\n */"}],"testcase":"[\"Excel\",\"get\",\"set\",\"get\"]\n[[3,\"C\"],[1,\"A\"],[1,\"A\",1],[1,\"A\"]]","testable":true,"templateMeta":{"classname":"Excel","maxbytesperline":200000,"constructor":{"params":[{"type":"integer","name":"H"},{"type":"character","name":"W"}]},"methods":[{"name":"set","params":[{"type":"integer","name":"r"},{"type":"character","name":"c"},{"type":"integer","name":"v"}],"return":{"type":"void"}},{"name":"get","params":[{"type":"integer","name":"r"},{"type":"character","name":"c"}],"return":{"type":"integer"}},{"name":"sum","params":[{"type":"integer","name":"r"},{"type":"character","name":"c"},{"type":"string[]","name":"strs"},{"type":"integer","name":"strsSize","lang":"c","value":"size_3"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}