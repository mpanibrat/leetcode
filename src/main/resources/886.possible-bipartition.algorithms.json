{"id":922,"fid":886,"name":"Possible Bipartition","slug":"possible-bipartition","link":"https://leetcode.com/problems/possible-bipartition/description/","percent":38.678184420363934,"level":"Medium","category":"algorithms","totalAC":"7.6K","totalSubmit":"19.6K","desc":"Given a set of N people (numbered 1, 2, ..., N), we would like to split everyone into two groups of any size.\r\n\r\nEach person may dislike some other people, and they should not go into the same group. \r\n\r\nFormally, if dislikes[i] = [a, b], it means it is not allowed to put the people numbered a and b into the same group.\r\n\r\nReturn true if and only if it is possible to split everyone into two groups in this way.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: N = 4, dislikes = [[1,2],[1,3],[2,4]]\r\nOutput: true\r\nExplanation: group1 [1,4], group2 [2,3]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: N = 3, dislikes = [[1,2],[1,3],[2,3]]\r\nOutput: false\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\r\nOutput: false\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 2000\r\n\t0 <= dislikes.length <= 10000\r\n\t1 <= dislikes[i][j] <= N\r\n\tdislikes[i][0] < dislikes[i][1]\r\n\tThere does not exist i != j for which dislikes[i] == dislikes[j].\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean possibleBipartition(int N, int[][] dislikes) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def possibleBipartition(self, N, dislikes):\n        \"\"\"\n        :type N: int\n        :type dislikes: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def possibleBipartition(self, N, dislikes):\n        \"\"\"\n        :type N: int\n        :type dislikes: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool possibleBipartition(int N, int** dislikes, int dislikesRowSize, int *dislikesColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool PossibleBipartition(int N, int[][] dislikes) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @param {number[][]} dislikes\n * @return {boolean}\n */\nvar possibleBipartition = function(N, dislikes) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @param {Integer[][]} dislikes\n# @return {Boolean}\ndef possible_bipartition(n, dislikes)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func possibleBipartition(_ N: Int, _ dislikes: [[Int]]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func possibleBipartition(N int, dislikes [][]int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def possibleBipartition(N: Int, dislikes: Array[Array[Int]]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun possibleBipartition(N: Int, dislikes: Array<IntArray>): Boolean {\n        \n    }\n}"}],"testcase":"4\n[[1,2],[1,3],[2,4]]","testable":true,"templateMeta":{"name":"possibleBipartition","params":[{"name":"N","type":"integer"},{"name":"dislikes","type":"integer[][]"}],"return":{"type":"boolean"}}}