{"id":155,"fid":155,"name":"Min Stack","slug":"min-stack","link":"https://leetcode.com/problems/min-stack/description/","percent":33.76359760949234,"level":"Easy","category":"algorithms","totalAC":"232.5K","totalSubmit":"688.7K","desc":"\r\nDesign a stack that supports push, pop, top, and retrieving the minimum element in constant time.\r\n\r\n\r\npush(x) -- Push element x onto stack.\r\n\r\n\r\npop() -- Removes the element on top of the stack.\r\n\r\n\r\ntop() -- Get the top element.\r\n\r\n\r\ngetMin() -- Retrieve the minimum element in the stack.\r\n\r\n\r\n\r\n\r\nExample:\r\n\r\nMinStack minStack = new MinStack();\r\nminStack.push(-2);\r\nminStack.push(0);\r\nminStack.push(-3);\r\nminStack.getMin();   --> Returns -3.\r\nminStack.pop();\r\nminStack.top();      --> Returns 0.\r\nminStack.getMin();   --> Returns -2.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MinStack {\r\npublic:\r\n    /** initialize your data structure here. */\r\n    MinStack() {\r\n        \r\n    }\r\n    \r\n    void push(int x) {\r\n        \r\n    }\r\n    \r\n    void pop() {\r\n        \r\n    }\r\n    \r\n    int top() {\r\n        \r\n    }\r\n    \r\n    int getMin() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.push(x);\r\n * obj.pop();\r\n * int param_3 = obj.top();\r\n * int param_4 = obj.getMin();\r\n */"},{"value":"java","text":"Java","defaultCode":"class MinStack {\r\n\r\n    /** initialize your data structure here. */\r\n    public MinStack() {\r\n        \r\n    }\r\n    \r\n    public void push(int x) {\r\n        \r\n    }\r\n    \r\n    public void pop() {\r\n        \r\n    }\r\n    \r\n    public int top() {\r\n        \r\n    }\r\n    \r\n    public int getMin() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.push(x);\r\n * obj.pop();\r\n * int param_3 = obj.top();\r\n * int param_4 = obj.getMin();\r\n */"},{"value":"python","text":"Python","defaultCode":"class MinStack(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def top(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def getMin(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MinStack object will be instantiated and called as such:\r\n# obj = MinStack()\r\n# obj.push(x)\r\n# obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.getMin()"},{"value":"python3","text":"Python3","defaultCode":"class MinStack:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        :type x: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def top(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def getMin(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MinStack object will be instantiated and called as such:\r\n# obj = MinStack()\r\n# obj.push(x)\r\n# obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.getMin()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MinStack;\r\n\r\n/** initialize your data structure here. */\r\nMinStack* minStackCreate(int maxSize) {\r\n    \r\n}\r\n\r\nvoid minStackPush(MinStack* obj, int x) {\r\n    \r\n}\r\n\r\nvoid minStackPop(MinStack* obj) {\r\n    \r\n}\r\n\r\nint minStackTop(MinStack* obj) {\r\n    \r\n}\r\n\r\nint minStackGetMin(MinStack* obj) {\r\n    \r\n}\r\n\r\nvoid minStackFree(MinStack* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MinStack struct will be instantiated and called as such:\r\n * struct MinStack* obj = minStackCreate(maxSize);\r\n * minStackPush(obj, x);\r\n * minStackPop(obj);\r\n * int param_3 = minStackTop(obj);\r\n * int param_4 = minStackGetMin(obj);\r\n * minStackFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MinStack {\r\n\r\n    /** initialize your data structure here. */\r\n    public MinStack() {\r\n        \r\n    }\r\n    \r\n    public void Push(int x) {\r\n        \r\n    }\r\n    \r\n    public void Pop() {\r\n        \r\n    }\r\n    \r\n    public int Top() {\r\n        \r\n    }\r\n    \r\n    public int GetMin() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * MinStack obj = new MinStack();\r\n * obj.Push(x);\r\n * obj.Pop();\r\n * int param_3 = obj.Top();\r\n * int param_4 = obj.GetMin();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * initialize your data structure here.\r\n */\r\nvar MinStack = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMinStack.prototype.push = function(x) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {void}\r\n */\r\nMinStack.prototype.pop = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMinStack.prototype.top = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMinStack.prototype.getMin = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MinStack object will be instantiated and called as such:\r\n * var obj = Object.create(MinStack).createNew()\r\n * obj.push(x)\r\n * obj.pop()\r\n * var param_3 = obj.top()\r\n * var param_4 = obj.getMin()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MinStack\r\n\r\n=begin\r\n    initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type x: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(x)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Void\r\n=end\r\n    def pop()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def top()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def get_min()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MinStack object will be instantiated and called as such:\r\n# obj = MinStack.new()\r\n# obj.push(x)\r\n# obj.pop()\r\n# param_3 = obj.top()\r\n# param_4 = obj.get_min()"},{"value":"swift","text":"Swift","defaultCode":"\nclass MinStack {\n\n    /** initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n      \n    }\n    \n    func pop() {\n      \n    }\n    \n    func top() -> Int {\n      \n    }\n    \n    func getMin() -> Int {\n      \n    }\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * let obj = MinStack()\n * obj.push(x)\n * obj.pop()\n * let ret_3: Int = obj.top()\n * let ret_4: Int = obj.getMin()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MinStack struct {\r\n    \r\n}\r\n\r\n\r\n/** initialize your data structure here. */\r\nfunc Constructor() MinStack {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Push(x int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Pop()  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) Top() int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MinStack) GetMin() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MinStack object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Push(x);\r\n * obj.Pop();\r\n * param_3 := obj.Top();\r\n * param_4 := obj.GetMin();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MinStack() {\n\n    /** initialize your data structure here. */\n    \n\n    def push(x: Int) {\n        \n    }\n\n    def pop() {\n        \n    }\n\n    def top(): Int = {\n        \n    }\n\n    def getMin(): Int = {\n        \n    }\n\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = new MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MinStack() {\n\n    /** initialize your data structure here. */\n    \n\n    fun push(x: Int) {\n        \n    }\n\n    fun pop() {\n        \n    }\n\n    fun top(): Int {\n        \n    }\n\n    fun getMin(): Int {\n        \n    }\n\n}\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = MinStack()\n * obj.push(x)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */"}],"testcase":"[\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n[[],[-2],[0],[-3],[],[],[],[]]","testable":true,"templateMeta":{"classname":"MinStack","maxbytesperline":130000,"constructor":{"params":[{"type":"integer","name":"maxSize","lang":"c","value":"64000"}],"comment":"initialize your data structure here."},"methods":[{"name":"push","params":[{"type":"integer","name":"x"}],"return":{"type":"void"}},{"name":"pop","params":[],"return":{"type":"void"}},{"name":"top","params":[],"return":{"type":"integer"}},{"name":"getMin","params":[],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}