{"id":321,"fid":321,"name":"Create Maximum Number","slug":"create-maximum-number","link":"https://leetcode.com/problems/create-maximum-number/description/","percent":24.915516299567628,"level":"Hard","category":"algorithms","totalAC":"26.9K","totalSubmit":"108K","desc":"Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits.\r\n\r\nNote: You should try to optimize your time and space complexity.\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\nnums1 = [3, 4, 6, 5]\r\nnums2 = [9, 1, 2, 5, 8, 3]\r\nk = 5\r\nOutput:\r\n[9, 8, 6, 5, 3]\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\nnums1 = [6, 7]\r\nnums2 = [6, 0, 4]\r\nk = 5\r\nOutput:\r\n[6, 7, 6, 0, 4]\r\n\r\nExample 3:\r\n\r\n\r\nInput:\r\nnums1 = [3, 9]\r\nnums2 = [8, 9]\r\nk = 3\r\nOutput:\r\n[9, 8, 9]\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxNumber(self, nums1, nums2, k):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maxNumber(self, nums1, nums2, k):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :type k: int\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* maxNumber(int* nums1, int nums1Size, int* nums2, int nums2Size, int k, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] MaxNumber(int[] nums1, int[] nums2, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @param {number} k\r\n * @return {number[]}\r\n */\r\nvar maxNumber = function(nums1, nums2, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @param {Integer} k\r\n# @return {Integer[]}\r\ndef max_number(nums1, nums2, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxNumber(_ nums1: [Int], _ nums2: [Int], _ k: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxNumber(nums1 []int, nums2 []int, k int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maxNumber(nums1: Array[Int], nums2: Array[Int], k: Int): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maxNumber(nums1: IntArray, nums2: IntArray, k: Int): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"[3,4,6,5]\n[9,1,2,5,8,3]\n5","testable":true,"templateMeta":{"name":"maxNumber","params":[{"name":"nums1","type":"integer[]"},{"name":"nums2","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer[]"}}}