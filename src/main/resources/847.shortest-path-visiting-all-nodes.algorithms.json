{"id":877,"fid":847,"name":"Shortest Path Visiting All Nodes","slug":"shortest-path-visiting-all-nodes","link":"https://leetcode.com/problems/shortest-path-visiting-all-nodes/description/","percent":43.750618505690255,"level":"Hard","category":"algorithms","totalAC":"4.4K","totalSubmit":"10.1K","desc":"An undirected, connected graph of N nodes (labeled 0, 1, 2, ..., N-1) is given as graph.\r\n\r\ngraph.length = N, and j != i is in the list graph[i] exactly once, if and only if nodes i and j are connected.\r\n\r\nReturn the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.\r\n\r\n \r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[1,2,3],[0],[0],[0]]\r\nOutput: 4\r\nExplanation: One possible path is [1,0,2,0,3]\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1],[0,2,4],[1,3,4],[2],[1,2]]\r\nOutput: 4\r\nExplanation: One possible path is [0,1,4,2,3]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= graph.length <= 12\r\n\t0 <= graph[i].length < graph.length\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int shortestPathLength(int[][] graph) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def shortestPathLength(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def shortestPathLength(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int shortestPathLength(int** graph, int graphRowSize, int *graphColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ShortestPathLength(int[][] graph) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar shortestPathLength = function(graph) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} graph\n# @return {Integer}\ndef shortest_path_length(graph)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shortestPathLength(_ graph: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func shortestPathLength(graph [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def shortestPathLength(graph: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun shortestPathLength(graph: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[1,2,3],[0],[0],[0]]","testable":true,"templateMeta":{"name":"shortestPathLength","params":[{"name":"graph","type":"integer[][]"}],"return":{"type":"integer"}}}