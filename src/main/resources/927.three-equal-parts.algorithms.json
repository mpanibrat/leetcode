{"id":963,"fid":927,"name":"Three Equal Parts","slug":"three-equal-parts","link":"https://leetcode.com/problems/three-equal-parts/description/","percent":26.690712353471596,"level":"Hard","category":"algorithms","totalAC":"2.1K","totalSubmit":"7.8K","desc":"Given an array A of 0s and 1s, divide the array into 3 non-empty parts such that all of these parts represent the same binary value.\r\n\r\nIf it is possible, return any [i, j] with i+1 < j, such that:\r\n\r\n\r\n\tA[0], A[1], ..., A[i] is the first part;\r\n\tA[i+1], A[i+2], ..., A[j-1] is the second part, and\r\n\tA[j], A[j+1], ..., A[A.length - 1] is the third part.\r\n\tAll three parts have equal binary value.\r\n\r\n\r\nIf it is not possible, return [-1, -1].\r\n\r\nNote that the entire part is used when considering what binary value it represents.  For example, [1,1,0] represents 6 in decimal, not 3.  Also, leading zeros are allowed, so [0,1,1] and [1,1] represent the same value.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,0,1,0,1]\r\nOutput: [0,3]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,1,0,1,1]\r\nOutput: [-1,-1]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t3 <= A.length <= 30000\r\n\tA[i] == 0 or A[i] == 1\r\n\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> threeEqualParts(vector<int>& A) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] threeEqualParts(int[] A) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def threeEqualParts(self, A):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def threeEqualParts(self, A):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* threeEqualParts(int* A, int ASize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] ThreeEqualParts(int[] A) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} A\r\n * @return {number[]}\r\n */\r\nvar threeEqualParts = function(A) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\r\n# @return {Integer[]}\r\ndef three_equal_parts(a)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func threeEqualParts(_ A: [Int]) -> [Int] {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func threeEqualParts(A []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def threeEqualParts(A: Array[Int]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun threeEqualParts(A: IntArray): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"[1,0,1,0,1]","testable":true,"templateMeta":{"name":"threeEqualParts","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer[]"}}}