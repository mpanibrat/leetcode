{"id":774,"fid":559,"name":"Maximum Depth of N-ary Tree","slug":"maximum-depth-of-n-ary-tree","link":"https://leetcode.com/problems/maximum-depth-of-n-ary-tree/description/","percent":62.06070287539936,"level":"Easy","category":"algorithms","totalAC":"17.1K","totalSubmit":"27.5K","desc":"Given a n-ary tree, find its maximum depth.\r\n\r\nThe maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\r\n\r\nFor example, given a 3-ary tree:\r\n \r\n\r\n\r\n\r\n \r\n\r\nWe should return its max depth, which is 3.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe depth of the tree is at most 1000.\r\n\tThe total number of nodes is at most 5000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\npublic:\r\n    int val;\r\n    vector<Node*> children;\r\n\r\n    Node() {}\r\n\r\n    Node(int _val, vector<Node*> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\npublic:\r\n    int maxDepth(Node* root) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public int val;\r\n    public List<Node> children;\r\n\r\n    public Node() {}\r\n\r\n    public Node(int _val,List<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\n    public int maxDepth(Node root) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"\"\"\"\r\n# Definition for a Node.\r\nclass Node(object):\r\n    def __init__(self, val, children):\r\n        self.val = val\r\n        self.children = children\r\n\"\"\"\r\nclass Solution(object):\r\n    def maxDepth(self, root):\r\n        \"\"\"\r\n        :type root: Node\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"csharp","text":"C#","defaultCode":"/*\r\n// Definition for a Node.\r\npublic class Node {\r\n    public int val;\r\n    public IList<Node> children;\r\n\r\n    public Node(){}\r\n    public Node(int _val,IList<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n}\r\n*/\r\npublic class Solution {\r\n    public int MaxDepth(Node root) {\r\n        \r\n    }\r\n}"}],"testcase":"{\"$id\":\"1\",\"children\":[{\"$id\":\"2\",\"children\":[{\"$id\":\"5\",\"children\":[],\"val\":5},{\"$id\":\"6\",\"children\":[],\"val\":6}],\"val\":3},{\"$id\":\"3\",\"children\":[],\"val\":2},{\"$id\":\"4\",\"children\":[],\"val\":4}],\"val\":1}","testable":true,"templateMeta":{"name":"maxDepth","params":[{"name":"root","type":"Node"}],"return":{"type":"integer"},"structures":[{"name":"Node","comment":"Definition for a Node.","members":[{"name":"val","type":"integer"},{"name":"children","type":"list<Node>"}]}]}}