{"id":48,"fid":48,"name":"Rotate Image","slug":"rotate-image","link":"https://leetcode.com/problems/rotate-image/description/","percent":44.705983556086785,"level":"Medium","category":"algorithms","totalAC":"197.5K","totalSubmit":"441.7K","desc":"You are given an n x n 2D matrix representing an image.\r\n\r\nRotate the image by 90 degrees (clockwise).\r\n\r\nNote:\r\n\r\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\r\n\r\nExample 1:\r\n\r\n\r\nGiven input matrix = \r\n[\r\n  [1,2,3],\r\n  [4,5,6],\r\n  [7,8,9]\r\n],\r\n\r\nrotate the input matrix in-place such that it becomes:\r\n[\r\n  [7,4,1],\r\n  [8,5,2],\r\n  [9,6,3]\r\n]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nGiven input matrix =\r\n[\r\n  [ 5, 1, 9,11],\r\n  [ 2, 4, 8,10],\r\n  [13, 3, 6, 7],\r\n  [15,14,12,16]\r\n], \r\n\r\nrotate the input matrix in-place such that it becomes:\r\n[\r\n  [15,13, 2, 5],\r\n  [14, 3, 4, 1],\r\n  [12, 6, 8, 9],\r\n  [16, 7,10,11]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    void rotate(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public void rotate(int[][] matrix) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def rotate(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :rtype: void Do not return anything, modify matrix in-place instead.\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def rotate(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :rtype: void Do not return anything, modify matrix in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"void rotate(int** matrix, int matrixRowSize, int *matrixColSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public void Rotate(int[,] matrix) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} matrix\r\n * @return {void} Do not return anything, modify matrix in-place instead.\r\n */\r\nvar rotate = function(matrix) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\r\n# @return {Void} Do not return anything, modify matrix in-place instead.\r\ndef rotate(matrix)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func rotate(_ matrix: inout [[Int]]) {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func rotate(matrix [][]int)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def rotate(matrix: Array[Array[Int]]): Unit = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun rotate(matrix: Array<IntArray>): Unit {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,2,3],[4,5,6],[7,8,9]]","testable":true,"templateMeta":{"name":"rotate","params":[{"name":"matrix","type":"integer[][]"}],"return":{"type":"void"},"output":{"paramindex":0}}}