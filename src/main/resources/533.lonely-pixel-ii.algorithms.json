{"id":533,"fid":533,"name":"Lonely Pixel II","slug":"lonely-pixel-ii","link":"https://leetcode.com/problems/lonely-pixel-ii/description/","percent":45.612847649520056,"level":"Medium","category":"algorithms","totalAC":"7.4K","totalSubmit":"16.3K","desc":"Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:\r\n\r\n\r\n Row R and column C both contain exactly N black pixels.\r\n For all rows that have a black pixel at column C, they should be exactly the same as row R\r\n\r\n\r\nThe picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. \r\n\r\nExample:\r\n\r\nInput:                                            \r\n[['W', 'B', 'W', 'B', 'B', 'W'],    \r\n ['W', 'B', 'W', 'B', 'B', 'W'],    \r\n ['W', 'B', 'W', 'B', 'B', 'W'],    \r\n ['W', 'W', 'B', 'W', 'B', 'W']] \r\n\r\nN = 3\r\nOutput: 6\r\nExplanation: All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).\r\n        0    1    2    3    4    5         column index                                            \r\n0    [['W', 'B', 'W', 'B', 'B', 'W'],    \r\n1     ['W', 'B', 'W', 'B', 'B', 'W'],    \r\n2     ['W', 'B', 'W', 'B', 'B', 'W'],    \r\n3     ['W', 'W', 'B', 'W', 'B', 'W']]    \r\nrow index\r\n\r\nTake 'B' at row R = 0 and column C = 1 as an example:\r\nRule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels. \r\nRule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nThe range of width and height of the input 2D array is [1,200].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findBlackPixel(vector<vector<char>>& picture, int N) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int findBlackPixel(char[][] picture, int N) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findBlackPixel(self, picture, N):\r\n        \"\"\"\r\n        :type picture: List[List[str]]\r\n        :type N: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findBlackPixel(self, picture, N):\r\n        \"\"\"\r\n        :type picture: List[List[str]]\r\n        :type N: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findBlackPixel(char** picture, int pictureRowSize, int pictureColSize, int N) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindBlackPixel(char[,] picture, int N) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} picture\r\n * @param {number} N\r\n * @return {number}\r\n */\r\nvar findBlackPixel = function(picture, N) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} picture\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef find_black_pixel(picture, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findBlackPixel(_ picture: [[Character]], _ N: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findBlackPixel(picture [][]byte, N int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findBlackPixel(picture: Array[Array[Char]], N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findBlackPixel(picture: Array<CharArray>, N: Int): Int {\n        \n    }\n}"}],"testcase":"[[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"B\",\"W\",\"B\",\"B\",\"W\"],[\"W\",\"W\",\"B\",\"W\",\"B\",\"W\"]]\n3","testable":true,"templateMeta":{"name":"findBlackPixel","params":[{"name":"picture","type":"character[][]"},{"name":"N","type":"integer"}],"return":{"type":"integer"}}}