{"id":88,"fid":88,"name":"Merge Sorted Array","slug":"merge-sorted-array","link":"https://leetcode.com/problems/merge-sorted-array/description/","percent":33.673490779411665,"level":"Easy","category":"algorithms","totalAC":"289.1K","totalSubmit":"858.6K","desc":"Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\r\n\r\nNote:\r\n\r\n\r\n\tThe number of elements initialized in nums1 and nums2 are m and n respectively.\r\n\tYou may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.\r\n\r\n\r\nExample:\r\n\r\n\r\nInput:\r\nnums1 = [1,2,3,0,0,0], m = 3\r\nnums2 = [2,5,6],       n = 3\r\n\r\nOutput:Â [1,2,2,3,5,6]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def merge(self, nums1, m, nums2, n):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type m: int\r\n        :type nums2: List[int]\r\n        :type n: int\r\n        :rtype: void Do not return anything, modify nums1 in-place instead.\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def merge(self, nums1, m, nums2, n):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type m: int\r\n        :type nums2: List[int]\r\n        :type n: int\r\n        :rtype: void Do not return anything, modify nums1 in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"void merge(int* nums1, int m, int* nums2, int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public void Merge(int[] nums1, int m, int[] nums2, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums1\r\n * @param {number} m\r\n * @param {number[]} nums2\r\n * @param {number} n\r\n * @return {void} Do not return anything, modify nums1 in-place instead.\r\n */\r\nvar merge = function(nums1, m, nums2, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums1\r\n# @param {Integer} m\r\n# @param {Integer[]} nums2\r\n# @param {Integer} n\r\n# @return {Void} Do not return anything, modify nums1 in-place instead.\r\ndef merge(nums1, m, nums2, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func merge(_ nums1: inout [Int], _ m: Int, _ nums2: [Int], _ n: Int) {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func merge(nums1 []int, m int, nums2 []int, n int)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def merge(nums1: Array[Int], m: Int, nums2: Array[Int], n: Int): Unit = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun merge(nums1: IntArray, m: Int, nums2: IntArray, n: Int): Unit {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3,0,0,0]\n3\n[2,5,6]\n3","testable":true,"templateMeta":{"name":"merge","params":[{"name":"nums1","type":"integer[]","implicitsizeparam":false},{"name":"m","type":"integer"},{"name":"nums2","type":"integer[]","implicitsizeparam":false},{"name":"n","type":"integer"}],"return":{"type":"void"},"output":{"paramindex":0}}}