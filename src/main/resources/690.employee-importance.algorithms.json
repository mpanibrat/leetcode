{"id":690,"fid":690,"name":"Employee Importance","slug":"employee-importance","link":"https://leetcode.com/problems/employee-importance/description/","percent":52.041606042782405,"level":"Easy","category":"algorithms","totalAC":"33.6K","totalSubmit":"64.6K","desc":"You are given a data structure of employee information, which includes the employee's unique id, his importance value and his direct subordinates' id. \r\n\r\nFor example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.\r\n\r\nNow given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all his subordinates.\r\n\r\nExample 1:\r\n\r\nInput: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\r\nOutput: 11\r\nExplanation:\r\nEmployee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\r\n\r\n\r\n\r\nNote:\r\n\r\nOne employee has at most one direct leader and may have several subordinates.\r\nThe maximum number of employees won't exceed 2000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\r\n// Employee info\r\nclass Employee {\r\npublic:\r\n    // It's the unique ID of each node.\r\n    // unique id of this employee\r\n    int id;\r\n    // the importance value of this employee\r\n    int importance;\r\n    // the id of direct subordinates\r\n    vector<int> subordinates;\r\n};\r\n*/\r\nclass Solution {\r\npublic:\r\n    int getImportance(vector<Employee*> employees, int id) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/*\r\n// Employee info\r\nclass Employee {\r\n    // It's the unique id of each node;\r\n    // unique id of this employee\r\n    public int id;\r\n    // the importance value of this employee\r\n    public int importance;\r\n    // the id of direct subordinates\r\n    public List<Integer> subordinates;\r\n};\r\n*/\r\nclass Solution {\r\n    public int getImportance(List<Employee> employees, int id) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"\"\"\"\r\n# Employee info\r\nclass Employee(object):\r\n    def __init__(self, id, importance, subordinates):\r\n        # It's the unique id of each node.\r\n        # unique id of this employee\r\n        self.id = id\r\n        # the importance value of this employee\r\n        self.importance = importance\r\n        # the id of direct subordinates\r\n        self.subordinates = subordinates\r\n\"\"\"\r\nclass Solution(object):\r\n    def getImportance(self, employees, id):\r\n        \"\"\"\r\n        :type employees: Employee\r\n        :type id: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"\"\"\"\r\n# Employee info\r\nclass Employee:\r\n    def __init__(self, id, importance, subordinates):\r\n        # It's the unique id of each node.\r\n        # unique id of this employee\r\n        self.id = id\r\n        # the importance value of this employee\r\n        self.importance = importance\r\n        # the id of direct subordinates\r\n        self.subordinates = subordinates\r\n\"\"\"\r\nclass Solution:\r\n    def getImportance(self, employees, id):\r\n        \"\"\"\r\n        :type employees: Employee\r\n        :type id: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"ruby","text":"Ruby","defaultCode":"=begin\r\n# Employee info\r\nclass Employee\r\n    attr_accessor :id, :importance, :subordinates\r\n    def initialize( id, importance, subordinates)\r\n        # It's the unique id of each node.\r\n        # unique id of this employee\r\n        @id = id\r\n        # the importance value of this employee\r\n        @importance = importance\r\n        # the id of direct subordinates\r\n        @subordinates = subordinates\r\n    end\r\nend\r\n=end\r\n# @param {Employee} employees\r\n# @param {Integer} id\r\n# @return {Integer}\r\ndef get_importance(employees, id)\r\n    \r\nend"}],"testcase":"[[1,2,[2]], [2,3,[]]]\n2","testable":true,"templateMeta":{"name":"getImportance","params":[{"name":"employees","type":"list<Employee>"},{"name":"id","type":"integer"}],"return":{"type":"integer"},"structures":[{"name":"Employee","comment":"Employee info","members":[{"name":"id","type":"integer","comment":"unique id of this employee"},{"name":"importance","type":"integer","comment":"the importance value of this employee"},{"name":"subordinates","type":"list<integer>","comment":"the id of direct subordinates"}]}]}}