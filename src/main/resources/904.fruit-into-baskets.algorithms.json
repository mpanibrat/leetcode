{"id":940,"fid":904,"name":"Fruit Into Baskets","slug":"fruit-into-baskets","link":"https://leetcode.com/problems/fruit-into-baskets/description/","percent":39.0317546478491,"level":"Medium","category":"algorithms","totalAC":"11.5K","totalSubmit":"29.5K","desc":"In a row of trees, the i-th tree produces fruit with type tree[i].\r\n\r\nYou start at any tree of your choice, then repeatedly perform the following steps:\r\n\r\n\r\n\tAdd one piece of fruit from this tree to your baskets.  If you cannot, stop.\r\n\tMove to the next tree to the right of the current tree.  If there is no tree to the right, stop.\r\n\r\n\r\nNote that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.\r\n\r\nYou have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.\r\n\r\nWhat is the total amount of fruit you can collect with this procedure?\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,2,1]\r\nOutput: 3\r\nExplanation: We can collect [1,2,1].\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [0,1,2,2]\r\nOutput: 3\r\nExplanation: We can collect [1,2,2].\r\nIf we started at the first tree, we would only collect [0, 1].\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [1,2,3,2,2]\r\nOutput: 4\r\nExplanation: We can collect [2,3,2,2].\r\nIf we started at the first tree, we would only collect [1, 2].\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: [3,3,3,1,2,1,1,2,3,3,4]\r\nOutput: 5\r\nExplanation: We can collect [1,2,1,1,2].\r\nIf we started at the first tree or the eighth tree, we would only collect 4 fruits.\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= tree.length <= 40000\r\n\t0 <= tree[i] < tree.length\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int totalFruit(vector<int>& tree) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int totalFruit(int[] tree) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def totalFruit(self, tree):\n        \"\"\"\n        :type tree: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def totalFruit(self, tree):\n        \"\"\"\n        :type tree: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int totalFruit(int* tree, int treeSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int TotalFruit(int[] tree) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} tree\n * @return {number}\n */\nvar totalFruit = function(tree) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} tree\n# @return {Integer}\ndef total_fruit(tree)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func totalFruit(_ tree: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func totalFruit(tree []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def totalFruit(tree: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun totalFruit(tree: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,2,1]","testable":true,"templateMeta":{"name":"totalFruit","params":[{"name":"tree","type":"integer[]"}],"return":{"type":"integer"}}}