{"id":790,"fid":775,"name":"Global and Local Inversions","slug":"global-and-local-inversions","link":"https://leetcode.com/problems/global-and-local-inversions/description/","percent":36.095417451349654,"level":"Medium","category":"algorithms","totalAC":"9.2K","totalSubmit":"25.5K","desc":"We have some permutation A of [0, 1, ..., N - 1], where N is the length of A.\r\n\r\nThe number of (global) inversions is the number of i < j with 0 <= i < j < N and A[i] > A[j].\r\n\r\nThe number of local inversions is the number of i with 0 <= i < N and A[i] > A[i+1].\r\n\r\nReturn trueÂ if and only if the number of global inversions is equal to the number of local inversions.\r\n\r\nExample 1:\r\n\r\n\r\nInput: A = [1,0,2]\r\nOutput: true\r\nExplanation: There is 1 global inversion, and 1 local inversion.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: A = [1,2,0]\r\nOutput: false\r\nExplanation: There are 2 global inversions, and 1 local inversion.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tA will be a permutation of [0, 1, ..., A.length - 1].\r\n\tA will have length in range [1, 5000].\r\n\tThe time limit for this problem has been reduced.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isIdealPermutation(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isIdealPermutation(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isIdealPermutation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isIdealPermutation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool isIdealPermutation(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsIdealPermutation(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {boolean}\n */\nvar isIdealPermutation = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Boolean}\ndef is_ideal_permutation(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isIdealPermutation(_ A: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isIdealPermutation(A []int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isIdealPermutation(A: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isIdealPermutation(A: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[0]","testable":true,"templateMeta":{"name":"isIdealPermutation","params":[{"name":"A","type":"integer[]"}],"return":{"type":"boolean"}}}