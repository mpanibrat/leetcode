{"id":120,"fid":120,"name":"Triangle","slug":"triangle","link":"https://leetcode.com/problems/triangle/description/","percent":36.958140849252935,"level":"Medium","category":"algorithms","totalAC":"154.3K","totalSubmit":"417.6K","desc":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.\r\n\r\nFor example, given the following triangle\r\n\r\n\r\n[\r\n     [2],\r\n    [3,4],\r\n   [6,5,7],\r\n  [4,1,8,3]\r\n]\r\n\r\n\r\nThe minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).\r\n\r\nNote:\r\n\r\nBonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minimumTotal(vector<vector<int>>& triangle) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minimumTotal(List<List<Integer>> triangle) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minimumTotal(self, triangle):\r\n        \"\"\"\r\n        :type triangle: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minimumTotal(self, triangle):\r\n        \"\"\"\r\n        :type triangle: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minimumTotal(int** triangle, int triangleRowSize, int *triangleColSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinimumTotal(IList<IList<int>> triangle) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} triangle\r\n * @return {number}\r\n */\r\nvar minimumTotal = function(triangle) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} triangle\r\n# @return {Integer}\r\ndef minimum_total(triangle)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumTotal(_ triangle: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumTotal(triangle [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minimumTotal(triangle: List[List[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minimumTotal(triangle: List<List<Int>>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[2],[3,4],[6,5,7],[4,1,8,3]]","testable":true,"templateMeta":{"name":"minimumTotal","params":[{"name":"triangle","type":"list<list<integer>>"}],"return":{"type":"integer"}}}