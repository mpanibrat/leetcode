{"id":126,"fid":126,"name":"Word Ladder II","slug":"word-ladder-ii","link":"https://leetcode.com/problems/word-ladder-ii/description/","percent":15.964704173920705,"level":"Hard","category":"algorithms","totalAC":"97.8K","totalSubmit":"612.9K","desc":"Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:\r\n\r\n\r\n\tOnly one letter can be changed at a time\r\n\tEach transformed word must exist in the word list. Note that beginWord is not a transformed word.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tReturn an empty list if there is no such transformation sequence.\r\n\tAll words have the same length.\r\n\tAll words contain only lowercase alphabetic characters.\r\n\tYou may assume no duplicates in the word list.\r\n\tYou may assume beginWord and endWord are non-empty and are not the same.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\nbeginWord = \"hit\",\r\nendWord = \"cog\",\r\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\r\n\r\nOutput:\r\n[\r\n  [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\r\n  [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\r\n]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\nbeginWord = \"hit\"\r\nendWord = \"cog\"\r\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\r\n\r\nOutput: []\r\n\r\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findLadders(self, beginWord, endWord, wordList):\r\n        \"\"\"\r\n        :type beginWord: str\r\n        :type endWord: str\r\n        :type wordList: List[str]\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findLadders(self, beginWord, endWord, wordList):\r\n        \"\"\"\r\n        :type beginWord: str\r\n        :type endWord: str\r\n        :type wordList: List[str]\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** findLadders(char* beginWord, char* endWord, char** wordList, int wordListSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<string>> FindLadders(string beginWord, string endWord, IList<string> wordList) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} beginWord\r\n * @param {string} endWord\r\n * @param {string[]} wordList\r\n * @return {string[][]}\r\n */\r\nvar findLadders = function(beginWord, endWord, wordList) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} begin_word\r\n# @param {String} end_word\r\n# @param {String[]} word_list\r\n# @return {String[][]}\r\ndef find_ladders(begin_word, end_word, word_list)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findLadders(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> [[String]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findLadders(beginWord string, endWord string, wordList []string) [][]string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findLadders(beginWord: String, endWord: String, wordList: List[String]): List[List[String]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findLadders(beginWord: String, endWord: String, wordList: List<String>): List<List<String>> {\r\n        \r\n    }\r\n}"}],"testcase":"\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]","testable":true,"templateMeta":{"name":"findLadders","params":[{"name":"beginWord","type":"string"},{"name":"endWord","type":"string"},{"name":"wordList","type":"list<string>"}],"return":{"type":"list<list<string>>"}}}