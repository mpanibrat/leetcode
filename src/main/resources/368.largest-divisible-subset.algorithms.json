{"id":368,"fid":368,"name":"Largest Divisible Subset","slug":"largest-divisible-subset","link":"https://leetcode.com/problems/largest-divisible-subset/description/","percent":34.10132761802703,"level":"Medium","category":"algorithms","totalAC":"40.1K","totalSubmit":"117.6K","desc":"Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) of elements in this subset satisfies:\r\n\r\nSi % Sj = 0 or Sj % Si = 0.\r\n\r\nIf there are multiple solutions, return any subset is fine.\r\n\r\nExample 1:\r\n\r\n\r\n\r\nInput: [1,2,3]\r\nOutput: [1,2] (of course, [1,3] will also be ok)\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,2,4,8]\r\nOutput: [1,2,4,8]\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> largestDivisibleSubset(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> largestDivisibleSubset(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def largestDivisibleSubset(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def largestDivisibleSubset(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* largestDivisibleSubset(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> LargestDivisibleSubset(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar largestDivisibleSubset = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef largest_divisible_subset(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func largestDivisibleSubset(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func largestDivisibleSubset(nums []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def largestDivisibleSubset(nums: Array[Int]): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun largestDivisibleSubset(nums: IntArray): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3]","testable":true,"templateMeta":{"name":"largestDivisibleSubset","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<integer>"}}}