{"id":71,"fid":71,"name":"Simplify Path","slug":"simplify-path","link":"https://leetcode.com/problems/simplify-path/description/","percent":27.28770390095201,"level":"Medium","category":"algorithms","totalAC":"129.5K","totalSubmit":"474.7K","desc":"Given an absolute path for a file (Unix-style), simplify it. \r\n\r\nFor example,\r\npath = \"/home/\", => \"/home\"\r\npath = \"/a/./b/../../c/\", => \"/c\"\r\npath = \"/a/../../b/../c//.//\", => \"/c\"\r\npath = \"/a//b////c/d//././/..\", => \"/a/b/c\"\r\n\r\nIn a UNIX-style file system, a period ('.') refers to the current directory, so it can be ignored in a simplified path. Additionally, a double period (\"..\") moves up a directory, so it cancels out whatever the last directory was. For more information, look here: https://en.wikipedia.org/wiki/Path_(computing)#Unix_style\r\n\r\nCorner Cases:\r\n\r\n\r\n\tDid you consider the case where path = \"/../\"?\r\n\tIn this case, you should return \"/\".\r\n\tAnother corner case is the path might contain multiple slashes '/' together, such as \"/home//foo/\".\r\n\tIn this case, you should ignore redundant slashes and return \"/home/foo\".\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string simplifyPath(string path) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String simplifyPath(String path) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* simplifyPath(char* path) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string SimplifyPath(string path) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} path\n * @return {string}\n */\nvar simplifyPath = function(path) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} path\n# @return {String}\ndef simplify_path(path)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func simplifyPath(_ path: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func simplifyPath(path string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def simplifyPath(path: String): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun simplifyPath(path: String): String {\n        \n    }\n}"}],"testcase":"\"/home/\"","testable":true,"templateMeta":{"name":"simplifyPath","params":[{"name":"path","type":"string"}],"return":{"type":"string"}}}