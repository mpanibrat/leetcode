{"id":260,"fid":260,"name":"Single Number III","slug":"single-number-iii","link":"https://leetcode.com/problems/single-number-iii/description/","percent":54.975583032416544,"level":"Medium","category":"algorithms","totalAC":"93.3K","totalSubmit":"169.8K","desc":"Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.\r\n\r\nExample:\r\n\r\n\r\nInput:  [1,2,1,3,2,5]\r\nOutput: [3,5]\r\n\r\nNote:\r\n\r\n\r\n\tThe order of the result is not important. So in the above example, [5, 3] is also correct.\r\n\tYour algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> singleNumber(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] singleNumber(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def singleNumber(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def singleNumber(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* singleNumber(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] SingleNumber(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar singleNumber = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef single_number(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func singleNumber(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func singleNumber(nums []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def singleNumber(nums: Array[Int]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun singleNumber(nums: IntArray): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,1,3,2,5]","testable":true,"templateMeta":{"name":"singleNumber","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}