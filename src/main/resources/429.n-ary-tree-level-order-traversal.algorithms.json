{"id":764,"fid":429,"name":"N-ary Tree Level Order Traversal","slug":"n-ary-tree-level-order-traversal","link":"https://leetcode.com/problems/n-ary-tree-level-order-traversal/description/","percent":55.57591862915788,"level":"Easy","category":"algorithms","totalAC":"12.1K","totalSubmit":"21.8K","desc":"Given an n-ary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\r\n\r\nFor example, given a 3-ary tree:\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\nWe should return its level order traversal:\r\n\r\n\r\n[\r\n     [1],\r\n     [3,2,4],\r\n     [5,6]\r\n]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe depth of the tree is at most 1000.\r\n\tThe total number of nodes is at most 5000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\npublic:\r\n    int val = NULL;\r\n    vector<Node*> children;\r\n\r\n    Node() {}\r\n\r\n    Node(int _val, vector<Node*> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\npublic:\r\n    vector<vector<int>> levelOrder(Node* root) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public int val;\r\n    public List<Node> children;\r\n\r\n    public Node() {}\r\n\r\n    public Node(int _val,List<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\n    public List<List<Integer>> levelOrder(Node root) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"\"\"\"\r\n# Definition for a Node.\r\nclass Node(object):\r\n    def __init__(self, val, children):\r\n        self.val = val\r\n        self.children = children\r\n\"\"\"\r\nclass Solution(object):\r\n    def levelOrder(self, root):\r\n        \"\"\"\r\n        :type root: Node\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"csharp","text":"C#","defaultCode":"/*\r\n// Definition for a Node.\r\npublic class Node {\r\n    public int val;\r\n    public IList<Node> children;\r\n\r\n    public Node(){}\r\n    public Node(int _val,IList<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n}\r\n*/\r\npublic class Solution {\r\n    public IList<IList<int>> LevelOrder(Node root) {\r\n        \r\n    }\r\n}"}],"testcase":"{\"$id\":\"1\",\"children\":[{\"$id\":\"2\",\"children\":[{\"$id\":\"5\",\"children\":[],\"val\":5},{\"$id\":\"6\",\"children\":[],\"val\":6}],\"val\":3},{\"$id\":\"3\",\"children\":[],\"val\":2},{\"$id\":\"4\",\"children\":[],\"val\":4}],\"val\":1}","testable":true,"templateMeta":{"name":"levelOrder","params":[{"name":"root","type":"Node"}],"return":{"type":"list<list<integer>>"},"structures":[{"name":"Node","comment":"Definition for a Node.","members":[{"name":"val","type":"integer"},{"name":"children","type":"list<Node>"}]}]}}