{"id":870,"fid":840,"name":"Magic Squares In Grid","slug":"magic-squares-in-grid","link":"https://leetcode.com/problems/magic-squares-in-grid/description/","percent":34.65127381624062,"level":"Easy","category":"algorithms","totalAC":"8K","totalSubmit":"23K","desc":"A 3 x 3 magic square is a 3 x 3 grid filled with distinct numbers from 1 to 9 such that each row, column, and both diagonals all have the same sum.\r\n\r\nGiven an grid of integers, how many 3 x 3 \"magic square\" subgrids are there?  (Each subgrid is contiguous).\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [[4,3,8,4],\r\n        [9,5,1,9],\r\n        [2,7,6,2]]\r\nOutput: 1\r\nExplanation: \r\nThe following subgrid is a 3 x 3 magic square:\r\n438\r\n951\r\n276\r\n\r\nwhile this one is not:\r\n384\r\n519\r\n762\r\n\r\nIn total, there is only one magic square inside the given grid.\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= grid.length <= 10\r\n\t1 <= grid[0].length <= 10\r\n\t0 <= grid[i][j] <= 15\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numMagicSquaresInside(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numMagicSquaresInside(int[][] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numMagicSquaresInside(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numMagicSquaresInside(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numMagicSquaresInside(int** grid, int gridRowSize, int *gridColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumMagicSquaresInside(int[][] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numMagicSquaresInside = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef num_magic_squares_inside(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numMagicSquaresInside(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numMagicSquaresInside(grid [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numMagicSquaresInside(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numMagicSquaresInside(grid: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[4,3,8,4],[9,5,1,9],[2,7,6,2]]","testable":true,"templateMeta":{"name":"numMagicSquaresInside","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}