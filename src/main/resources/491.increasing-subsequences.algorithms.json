{"id":491,"fid":491,"name":"Increasing Subsequences","slug":"increasing-subsequences","link":"https://leetcode.com/problems/increasing-subsequences/description/","percent":40.2711800421556,"level":"Medium","category":"algorithms","totalAC":"25.6K","totalSubmit":"63.6K","desc":"\r\nGiven an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2 .\r\n\r\n\r\nExample:\r\n\r\nInput: [4, 6, 7, 7]\r\nOutput: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of the given array will not exceed 15.\r\nThe range of integer in the given array is [-100,100].\r\nThe given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> findSubsequences(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findSubsequences(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findSubsequences(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** findSubsequences(int* nums, int numsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> FindSubsequences(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar findSubsequences = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef find_subsequences(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findSubsequences(_ nums: [Int]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findSubsequences(nums []int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findSubsequences(nums: Array[Int]): List[List[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findSubsequences(nums: IntArray): List<List<Int>> {\n        \n    }\n}"}],"testcase":"[4,6,7,7]","testable":true,"templateMeta":{"name":"findSubsequences","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<list<integer>>","dealloc":true}}}