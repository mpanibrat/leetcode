{"id":921,"fid":885,"name":"Spiral Matrix III","slug":"spiral-matrix-iii","link":"https://leetcode.com/problems/spiral-matrix-iii/description/","percent":62.8038136162213,"level":"Medium","category":"algorithms","totalAC":"4.7K","totalSubmit":"7.4K","desc":"On a 2 dimensional grid with R rows and C columns, we start at (r0, c0) facing east.\r\n\r\nHere, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.\r\n\r\nNow, we walk in a clockwise spiral shape to visit every position in this grid. \r\n\r\nWhenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) \r\n\r\nEventually, we reach all R * C spaces of the grid.\r\n\r\nReturn a list of coordinates representing the positions of the grid in the order they were visited.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: R = 1, C = 4, r0 = 0, c0 = 0\r\nOutput: [[0,0],[0,1],[0,2],[0,3]]\r\n\r\n\r\n\r\n\r\n \r\n\r\nExample 2:\r\n\r\n\r\nInput: R = 5, C = 6, r0 = 1, c0 = 4\r\nOutput: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= R <= 100\r\n\t1 <= C <= 100\r\n\t0 <= r0 < R\r\n\t0 <= c0 < C\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[][] spiralMatrixIII(int R, int C, int r0, int c0) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def spiralMatrixIII(self, R, C, r0, c0):\r\n        \"\"\"\r\n        :type R: int\r\n        :type C: int\r\n        :type r0: int\r\n        :type c0: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def spiralMatrixIII(self, R, C, r0, c0):\r\n        \"\"\"\r\n        :type R: int\r\n        :type C: int\r\n        :type r0: int\r\n        :type c0: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** spiralMatrixIII(int R, int C, int r0, int c0, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[][] SpiralMatrixIII(int R, int C, int r0, int c0) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} R\r\n * @param {number} C\r\n * @param {number} r0\r\n * @param {number} c0\r\n * @return {number[][]}\r\n */\r\nvar spiralMatrixIII = function(R, C, r0, c0) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} r\r\n# @param {Integer} c\r\n# @param {Integer} r0\r\n# @param {Integer} c0\r\n# @return {Integer[][]}\r\ndef spiral_matrix_iii(r, c, r0, c0)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func spiralMatrixIII(_ R: Int, _ C: Int, _ r0: Int, _ c0: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func spiralMatrixIII(R int, C int, r0 int, c0 int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def spiralMatrixIII(R: Int, C: Int, r0: Int, c0: Int): Array[Array[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun spiralMatrixIII(R: Int, C: Int, r0: Int, c0: Int): Array<IntArray> {\r\n        \r\n    }\r\n}"}],"testcase":"1\n4\n0\n0","testable":true,"templateMeta":{"name":"spiralMatrixIII","params":[{"name":"R","type":"integer"},{"name":"C","type":"integer"},{"name":"r0","type":"integer"},{"name":"c0","type":"integer"}],"return":{"type":"integer[][]"}}}