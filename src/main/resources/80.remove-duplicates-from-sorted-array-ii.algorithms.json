{"id":80,"fid":80,"name":"Remove Duplicates from Sorted Array II","slug":"remove-duplicates-from-sorted-array-ii","link":"https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/description/","percent":38.46716529410718,"level":"Medium","category":"algorithms","totalAC":"173K","totalSubmit":"449.8K","desc":"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\r\n\r\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\r\n\r\nExample 1:\r\n\r\n\r\nGiven nums = [1,1,1,2,2,3],\r\n\r\nYour function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.\r\n\r\nIt doesn't matter what you leave beyond the returned length.\r\n\r\nExample 2:\r\n\r\n\r\nGiven nums = [0,0,1,1,1,1,2,3,3],\r\n\r\nYour function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively.\r\n\r\nIt doesn't matter what values are set beyond the returned length.\r\n\r\n\r\nClarification:\r\n\r\nConfused why the returned value is an integer but your answer is an array?\r\n\r\nNote that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.\r\n\r\nInternally you can think of this:\r\n\r\n\r\n// nums is passed in by reference. (i.e., without making a copy)\r\nint len = removeDuplicates(nums);\r\n\r\n// any modification to nums in your function would be known by the caller.\r\n// using the length returned by your function, it prints the first len elements.\r\nfor (int i = 0; i < len; i++) {\r\n    print(nums[i]);\r\n}\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int removeDuplicates(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int removeDuplicates(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def removeDuplicates(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def removeDuplicates(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int removeDuplicates(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int RemoveDuplicates(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar removeDuplicates = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef remove_duplicates(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func removeDuplicates(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def removeDuplicates(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun removeDuplicates(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[1,1,1,2,2,3]","testable":true,"templateMeta":{"name":"removeDuplicates","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"},"output":{"paramindex":0,"size":"ret"},"generatedriver":false,"generatedefinition":false}}