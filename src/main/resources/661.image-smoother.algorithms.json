{"id":661,"fid":661,"name":"Image Smoother","slug":"image-smoother","link":"https://leetcode.com/problems/image-smoother/description/","percent":47.07619184790436,"level":"Easy","category":"algorithms","totalAC":"26.1K","totalSubmit":"55.5K","desc":"Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.\r\n\r\nExample 1:\r\n\r\nInput:\r\n[[1,1,1],\r\n [1,0,1],\r\n [1,1,1]]\r\nOutput:\r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\nExplanation:\r\nFor the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\r\nFor the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\r\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\r\n\r\n\r\n\r\nNote:\r\n\r\nThe value in the given matrix is in the range of [0, 255].\r\nThe length and width of the given matrix are in the range of [1, 150].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> imageSmoother(vector<vector<int>>& M) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[][] imageSmoother(int[][] M) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def imageSmoother(self, M):\r\n        \"\"\"\r\n        :type M: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def imageSmoother(self, M):\r\n        \"\"\"\r\n        :type M: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** imageSmoother(int** M, int MRowSize, int MColSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[,] ImageSmoother(int[,] M) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} M\r\n * @return {number[][]}\r\n */\r\nvar imageSmoother = function(M) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} m\r\n# @return {Integer[][]}\r\ndef image_smoother(m)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func imageSmoother(_ M: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func imageSmoother(M [][]int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def imageSmoother(M: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun imageSmoother(M: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}],"testcase":"[[1,1,1],[1,0,1],[1,1,1]]","testable":true,"templateMeta":{"name":"imageSmoother","params":[{"name":"M","type":"integer[][]"}],"return":{"type":"integer[][]"}}}