{"id":370,"fid":370,"name":"Range Addition","slug":"range-addition","link":"https://leetcode.com/problems/range-addition/description/","percent":58.74989521920143,"level":"Medium","category":"algorithms","totalAC":"21K","totalSubmit":"35.8K","desc":"Assume you have an array of length n initialized with all 0's and are given k update operations.\r\n\r\nEach operation is represented as a triplet: [startIndex, endIndex, inc] which increments each element of subarray A[startIndex ... endIndex] (startIndex and endIndex inclusive) with inc.\r\n\r\nReturn the modified array after all k operations were executed.\r\n\r\nExample:\r\n\r\n\r\nInput: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]\r\nOutput: [-2,0,3,5,3]\r\n\r\n\r\nExplanation:\r\n\r\n\r\nInitial state:\r\n[0,0,0,0,0]\r\n\r\nAfter applying operation [1,3,2]:\r\n[0,2,2,2,0]\r\n\r\nAfter applying operation [2,4,3]:\r\n[0,2,5,5,3]\r\n\r\nAfter applying operation [0,2,-2]:\r\n[-2,0,3,5,3]\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> getModifiedArray(int length, vector<vector<int>>& updates) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] getModifiedArray(int length, int[][] updates) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def getModifiedArray(self, length, updates):\r\n        \"\"\"\r\n        :type length: int\r\n        :type updates: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def getModifiedArray(self, length, updates):\r\n        \"\"\"\r\n        :type length: int\r\n        :type updates: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* getModifiedArray(int length, int** updates, int updatesRowSize, int updatesColSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] GetModifiedArray(int length, int[,] updates) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} length\r\n * @param {number[][]} updates\r\n * @return {number[]}\r\n */\r\nvar getModifiedArray = function(length, updates) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} length\r\n# @param {Integer[][]} updates\r\n# @return {Integer[]}\r\ndef get_modified_array(length, updates)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getModifiedArray(_ length: Int, _ updates: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func getModifiedArray(length int, updates [][]int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def getModifiedArray(length: Int, updates: Array[Array[Int]]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun getModifiedArray(length: Int, updates: Array<IntArray>): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"5\n[[1,3,2],[2,4,3],[0,2,-2]]","testable":true,"templateMeta":{"name":"getModifiedArray","params":[{"name":"length","type":"integer"},{"name":"updates","type":"integer[][]"}],"return":{"type":"integer[]"}}}