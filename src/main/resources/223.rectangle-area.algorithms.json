{"id":223,"fid":223,"name":"Rectangle Area","slug":"rectangle-area","link":"https://leetcode.com/problems/rectangle-area/description/","percent":34.86361110866133,"level":"Medium","category":"algorithms","totalAC":"79.1K","totalSubmit":"226.8K","desc":"Find the total area covered by two rectilinear rectangles in a 2D plane.\r\n\r\nEach rectangle is defined by its bottom left corner and top right corner as shown in the figure.\r\n\r\n\r\n\r\nExample:\r\n\r\n\r\nInput: A = -3, B = 0, C = 3, D = 4, E = 0, F = -1, G = 9, H = 2\r\nOutput: 45\r\n\r\nNote:\r\n\r\nAssume that the total area is never beyond the maximum possible value of int.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def computeArea(self, A, B, C, D, E, F, G, H):\r\n        \"\"\"\r\n        :type A: int\r\n        :type B: int\r\n        :type C: int\r\n        :type D: int\r\n        :type E: int\r\n        :type F: int\r\n        :type G: int\r\n        :type H: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def computeArea(self, A, B, C, D, E, F, G, H):\r\n        \"\"\"\r\n        :type A: int\r\n        :type B: int\r\n        :type C: int\r\n        :type D: int\r\n        :type E: int\r\n        :type F: int\r\n        :type G: int\r\n        :type H: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int ComputeArea(int A, int B, int C, int D, int E, int F, int G, int H) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} A\r\n * @param {number} B\r\n * @param {number} C\r\n * @param {number} D\r\n * @param {number} E\r\n * @param {number} F\r\n * @param {number} G\r\n * @param {number} H\r\n * @return {number}\r\n */\r\nvar computeArea = function(A, B, C, D, E, F, G, H) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} a\r\n# @param {Integer} b\r\n# @param {Integer} c\r\n# @param {Integer} d\r\n# @param {Integer} e\r\n# @param {Integer} f\r\n# @param {Integer} g\r\n# @param {Integer} h\r\n# @return {Integer}\r\ndef compute_area(a, b, c, d, e, f, g, h)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func computeArea(_ A: Int, _ B: Int, _ C: Int, _ D: Int, _ E: Int, _ F: Int, _ G: Int, _ H: Int) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func computeArea(A int, B int, C int, D int, E int, F int, G int, H int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun computeArea(A: Int, B: Int, C: Int, D: Int, E: Int, F: Int, G: Int, H: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"-3\n0\n3\n4\n0\n-1\n9\n2","testable":true,"templateMeta":{"name":"computeArea","params":[{"name":"A","type":"integer"},{"name":"B","type":"integer"},{"name":"C","type":"integer"},{"name":"D","type":"integer"},{"name":"E","type":"integer"},{"name":"F","type":"integer"},{"name":"G","type":"integer"},{"name":"H","type":"integer"}],"return":{"type":"integer"}}}