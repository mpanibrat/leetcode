{"id":950,"fid":914,"name":"X of a Kind in a Deck of Cards","slug":"x-of-a-kind-in-a-deck-of-cards","link":"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/description/","percent":33.036473484000894,"level":"Easy","category":"algorithms","totalAC":"7.4K","totalSubmit":"22.3K","desc":"In a deck of cards, each card has an integer written on it.\r\n\r\nReturn true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:\r\n\r\n\r\n\tEach group has exactly X cards.\r\n\tAll the cards in each group have the same integer.\r\n\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,2,3,4,4,3,2,1]\r\nOutput: true\r\nExplanation: Possible partition [1,1],[2,2],[3,3],[4,4]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,1,1,2,2,2,3,3]\r\nOutput: false\r\nExplanation: No possible partition.\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [1]\r\nOutput: false\r\nExplanation: No possible partition.\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: [1,1]\r\nOutput: true\r\nExplanation: Possible partition [1,1]\r\n\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: [1,1,2,2,2,2]\r\nOutput: true\r\nExplanation: Possible partition [1,1],[2,2],[2,2]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= deck.length <= 10000\r\n\t0 <= deck[i] < 10000\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool hasGroupsSizeX(vector<int>& deck) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean hasGroupsSizeX(int[] deck) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def hasGroupsSizeX(self, deck):\n        \"\"\"\n        :type deck: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def hasGroupsSizeX(self, deck):\n        \"\"\"\n        :type deck: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool hasGroupsSizeX(int* deck, int deckSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool HasGroupsSizeX(int[] deck) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} deck\n * @return {boolean}\n */\nvar hasGroupsSizeX = function(deck) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} deck\n# @return {Boolean}\ndef has_groups_size_x(deck)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func hasGroupsSizeX(_ deck: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func hasGroupsSizeX(deck []int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def hasGroupsSizeX(deck: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun hasGroupsSizeX(deck: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[1,2,3,4,4,3,2,1]","testable":true,"templateMeta":{"name":"hasGroupsSizeX","params":[{"name":"deck","type":"integer[]"}],"return":{"type":"boolean"}}}