{"id":598,"fid":598,"name":"Range Addition II","slug":"range-addition-ii","link":"https://leetcode.com/problems/range-addition-ii/description/","percent":47.99613354152725,"level":"Easy","category":"algorithms","totalAC":"25.8K","totalSubmit":"53.8K","desc":"Given an m * n matrix M initialized with all 0's and several update operations.\r\nOperations are represented by a 2D array, and each operation is represented by an array with two positive integers a and b, which means M[i][j] should be added by one for all 0  and 0 . \r\nYou need to count and return the number of maximum integers in the matrix after performing all the operations.\r\n\r\nExample 1:\r\n\r\nInput: \r\nm = 3, n = 3\r\noperations = [[2,2],[3,3]]\r\nOutput: 4\r\nExplanation: \r\nInitially, M = \r\n[[0, 0, 0],\r\n [0, 0, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [2,2], M = \r\n[[1, 1, 0],\r\n [1, 1, 0],\r\n [0, 0, 0]]\r\n\r\nAfter performing [3,3], M = \r\n[[2, 2, 1],\r\n [2, 2, 1],\r\n [1, 1, 1]]\r\n\r\nSo the maximum integer in M is 2, and there are four of it in M. So return 4.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe range of m and n is [1,40000].\r\nThe range of a is [1,m], and the range of b is [1,n].\r\nThe range of operations size won't exceed 10,000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxCount(int m, int n, vector<vector<int>>& ops) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxCount(int m, int n, int[][] ops) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxCount(self, m, n, ops):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxCount(self, m, n, ops):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type ops: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int maxCount(int m, int n, int** ops, int opsRowSize, int opsColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxCount(int m, int n, int[,] ops) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} m\n * @param {number} n\n * @param {number[][]} ops\n * @return {number}\n */\nvar maxCount = function(m, n, ops) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} m\n# @param {Integer} n\n# @param {Integer[][]} ops\n# @return {Integer}\ndef max_count(m, n, ops)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxCount(_ m: Int, _ n: Int, _ ops: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxCount(m int, n int, ops [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxCount(m: Int, n: Int, ops: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxCount(m: Int, n: Int, ops: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"3\n3\n[[2,2],[3,3]]","testable":true,"templateMeta":{"name":"maxCount","params":[{"name":"m","type":"integer"},{"name":"n","type":"integer"},{"name":"ops","type":"integer[][]"}],"return":{"type":"integer"}}}