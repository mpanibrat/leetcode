{"id":87,"fid":87,"name":"Scramble String","slug":"scramble-string","link":"https://leetcode.com/problems/scramble-string/description/","percent":30.438115853796027,"level":"Hard","category":"algorithms","totalAC":"81K","totalSubmit":"266.1K","desc":"Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.\r\n\r\nBelow is one possible representation of s1 = \"great\":\r\n\r\n\r\n    great\r\n   /    \\\r\n  gr    eat\r\n / \\    /  \\\r\ng   r  e   at\r\n           / \\\r\n          a   t\r\n\r\n\r\nTo scramble the string, we may choose any non-leaf node and swap its two children.\r\n\r\nFor example, if we choose the node \"gr\" and swap its two children, it produces a scrambled string \"rgeat\".\r\n\r\n\r\n    rgeat\r\n   /    \\\r\n  rg    eat\r\n / \\    /  \\\r\nr   g  e   at\r\n           / \\\r\n          a   t\r\n\r\n\r\nWe say that \"rgeat\" is a scrambled string of \"great\".\r\n\r\nSimilarly, if we continue to swap the children of nodes \"eat\" and \"at\", it produces a scrambled string \"rgtae\".\r\n\r\n\r\n    rgtae\r\n   /    \\\r\n  rg    tae\r\n / \\    /  \\\r\nr   g  ta  e\r\n       / \\\r\n      t   a\r\n\r\n\r\nWe say that \"rgtae\" is a scrambled string of \"great\".\r\n\r\nGiven two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.\r\n\r\nExample 1:\r\n\r\n\r\nInput: s1 = \"great\", s2 = \"rgeat\"\r\nOutput: true\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: s1 = \"abcde\", s2 = \"caebd\"\r\nOutput: false\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool isScramble(string s1, string s2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean isScramble(String s1, String s2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def isScramble(self, s1, s2):\r\n        \"\"\"\r\n        :type s1: str\r\n        :type s2: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def isScramble(self, s1, s2):\r\n        \"\"\"\r\n        :type s1: str\r\n        :type s2: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool isScramble(char* s1, char* s2) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool IsScramble(string s1, string s2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s1\r\n * @param {string} s2\r\n * @return {boolean}\r\n */\r\nvar isScramble = function(s1, s2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s1\r\n# @param {String} s2\r\n# @return {Boolean}\r\ndef is_scramble(s1, s2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isScramble(_ s1: String, _ s2: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isScramble(s1 string, s2 string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def isScramble(s1: String, s2: String): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun isScramble(s1: String, s2: String): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"\"great\"\n\"rgeat\"","testable":true,"templateMeta":{"name":"isScramble","params":[{"name":"s1","type":"string"},{"name":"s2","type":"string"}],"return":{"type":"boolean"}}}