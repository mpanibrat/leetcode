{"id":762,"fid":760,"name":"Find Anagram Mappings","slug":"find-anagram-mappings","link":"https://leetcode.com/problems/find-anagram-mappings/description/","percent":77.37677725118483,"level":"Easy","category":"algorithms","totalAC":"32.7K","totalSubmit":"42.2K","desc":"\r\nGiven two lists Aand B, and B is an anagram of A. B is an anagram of A means B is made by randomizing the order of the elements in A.\r\n\r\nWe want to find an index mapping P, from A to B. A mapping P[i] = j means the ith element in A appears in B at index j.\r\n\r\nThese lists A and B may contain duplicates.  If there are multiple answers, output any of them.\r\n\r\n\r\n\r\nFor example, given\r\n\r\nA = [12, 28, 46, 32, 50]\r\nB = [50, 12, 32, 46, 28]\r\n\r\n\r\nWe should return\r\n\r\n[1, 4, 3, 2, 0]\r\n\r\nas P[0] = 1 because the 0th element of A appears at B[1],\r\nand P[1] = 4 because the 1st element of A appears at B[4],\r\nand so on.\r\n\r\n\r\nNote:\r\nA, B have equal lengths in range [1, 100].\r\nA[i], B[i] are integers in range [0, 10^5].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> anagramMappings(vector<int>& A, vector<int>& B) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] anagramMappings(int[] A, int[] B) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def anagramMappings(self, A, B):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :type B: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def anagramMappings(self, A, B):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :type B: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* anagramMappings(int* A, int ASize, int* B, int BSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] AnagramMappings(int[] A, int[] B) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} A\r\n * @param {number[]} B\r\n * @return {number[]}\r\n */\r\nvar anagramMappings = function(A, B) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\r\n# @param {Integer[]} b\r\n# @return {Integer[]}\r\ndef anagram_mappings(a, b)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func anagramMappings(_ A: [Int], _ B: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func anagramMappings(A []int, B []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def anagramMappings(A: Array[Int], B: Array[Int]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun anagramMappings(A: IntArray, B: IntArray): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"[12,28,46,32,50]\n[50,12,32,46,28]","testable":true,"templateMeta":{"name":"anagramMappings","params":[{"name":"A","type":"integer[]"},{"name":"B","type":"integer[]"}],"return":{"type":"integer[]"}}}