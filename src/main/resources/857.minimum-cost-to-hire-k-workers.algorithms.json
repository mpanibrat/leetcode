{"id":887,"fid":857,"name":"Minimum Cost to Hire K Workers","slug":"minimum-cost-to-hire-k-workers","link":"https://leetcode.com/problems/minimum-cost-to-hire-k-workers/description/","percent":44.38834478982906,"level":"Hard","category":"algorithms","totalAC":"7.3K","totalSubmit":"16.4K","desc":"There are N workers.  The i-th worker has a quality[i] and a minimum wage expectation wage[i].\r\n\r\nNow we want to hire exactly K workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:\r\n\r\n\r\n\tEvery worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\r\n\tEvery worker in the paid group must be paid at least their minimum wage expectation.\r\n\r\n\r\nReturn the least amount of money needed to form a paid group satisfying the above conditions.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: quality = [10,20,5], wage = [70,50,30], K = 2\r\nOutput: 105.00000\r\nExplanation: We pay 70 to 0-th worker and 35 to 2-th worker.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3\r\nOutput: 30.66667\r\nExplanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. \r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= K <= N <= 10000, where N = quality.length = wage.length\r\n\t1 <= quality[i] <= 10000\r\n\t1 <= wage[i] <= 10000\r\n\tAnswers within 10^-5 of the correct answer will be considered correct.\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    double mincostToHireWorkers(vector<int>& quality, vector<int>& wage, int K) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double mincostToHireWorkers(int[] quality, int[] wage, int K) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def mincostToHireWorkers(self, quality, wage, K):\n        \"\"\"\n        :type quality: List[int]\n        :type wage: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def mincostToHireWorkers(self, quality, wage, K):\n        \"\"\"\n        :type quality: List[int]\n        :type wage: List[int]\n        :type K: int\n        :rtype: float\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"double mincostToHireWorkers(int* quality, int qualitySize, int* wage, int wageSize, int K) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public double MincostToHireWorkers(int[] quality, int[] wage, int K) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} quality\n * @param {number[]} wage\n * @param {number} K\n * @return {number}\n */\nvar mincostToHireWorkers = function(quality, wage, K) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} quality\n# @param {Integer[]} wage\n# @param {Integer} k\n# @return {Float}\ndef mincost_to_hire_workers(quality, wage, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func mincostToHireWorkers(_ quality: [Int], _ wage: [Int], _ K: Int) -> Double {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func mincostToHireWorkers(quality []int, wage []int, K int) float64 {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def mincostToHireWorkers(quality: Array[Int], wage: Array[Int], K: Int): Double = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun mincostToHireWorkers(quality: IntArray, wage: IntArray, K: Int): Double {\n        \n    }\n}"}],"testcase":"[10,20,5]\n[70,50,30]\n2","testable":true,"templateMeta":{"name":"mincostToHireWorkers","params":[{"name":"quality","type":"integer[]"},{"name":"wage","type":"integer[]"},{"name":"K","type":"integer"}],"return":{"type":"double"}}}