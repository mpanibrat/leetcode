{"id":243,"fid":243,"name":"Shortest Word Distance","slug":"shortest-word-distance","link":"https://leetcode.com/problems/shortest-word-distance/description/","percent":55.06260547094731,"level":"Easy","category":"algorithms","totalAC":"52.9K","totalSubmit":"96K","desc":"Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.\r\n\r\nExample:\r\nAssume that words = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"].\r\n\r\n\r\nInput: word1 = “coding”, word2 = “practice”\r\nOutput: 3\r\n\r\n\r\n\r\nInput: word1 = \"makes\", word2 = \"coding\"\r\nOutput: 1\r\n\r\n\r\nNote:\r\nYou may assume that word1 does not equal to word2, and word1 and word2 are both in the list.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int shortestDistance(vector<string>& words, string word1, string word2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int shortestDistance(String[] words, String word1, String word2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def shortestDistance(self, words, word1, word2):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def shortestDistance(self, words, word1, word2):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int shortestDistance(char** words, int wordsSize, char* word1, char* word2) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int ShortestDistance(string[] words, string word1, string word2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n * @param {string} word1\r\n * @param {string} word2\r\n * @return {number}\r\n */\r\nvar shortestDistance = function(words, word1, word2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\r\n# @param {String} word1\r\n# @param {String} word2\r\n# @return {Integer}\r\ndef shortest_distance(words, word1, word2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shortestDistance(_ words: [String], _ word1: String, _ word2: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func shortestDistance(words []string, word1 string, word2 string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def shortestDistance(words: Array[String], word1: String, word2: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun shortestDistance(words: Array<String>, word1: String, word2: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"]\n\"coding\"\n\"practice\"","testable":true,"templateMeta":{"name":"shortestDistance","params":[{"name":"words","type":"string[]"},{"name":"word1","type":"string"},{"name":"word2","type":"string"}],"return":{"type":"integer"}}}