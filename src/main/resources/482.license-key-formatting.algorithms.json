{"id":482,"fid":482,"name":"License Key Formatting","slug":"license-key-formatting","link":"https://leetcode.com/problems/license-key-formatting/description/","percent":39.12544290515367,"level":"Easy","category":"algorithms","totalAC":"51.5K","totalSubmit":"131.5K","desc":"You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.\r\n\r\nGiven a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.\r\n\r\nGiven a non-empty string S and a number K, format the string according to the rules described above.\r\n\r\nExample 1:\r\n\r\nInput: S = \"5F3Z-2e-9-w\", K = 4\r\n\r\nOutput: \"5F3Z-2E9W\"\r\n\r\nExplanation: The string S has been split into two parts, each part has 4 characters.\r\nNote that the two extra dashes are not needed and can be removed.\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: S = \"2-5g-3-J\", K = 2\r\n\r\nOutput: \"2-5G-3J\"\r\n\r\nExplanation: The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of string S will not exceed 12,000, and K is a positive integer.\r\nString S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).\r\nString S is non-empty.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string licenseKeyFormatting(string S, int K) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String licenseKeyFormatting(String S, int K) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def licenseKeyFormatting(self, S, K):\r\n        \"\"\"\r\n        :type S: str\r\n        :type K: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def licenseKeyFormatting(self, S, K):\r\n        \"\"\"\r\n        :type S: str\r\n        :type K: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* licenseKeyFormatting(char* S, int K) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string LicenseKeyFormatting(string S, int K) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} S\r\n * @param {number} K\r\n * @return {string}\r\n */\r\nvar licenseKeyFormatting = function(S, K) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {Integer} k\r\n# @return {String}\r\ndef license_key_formatting(s, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func licenseKeyFormatting(_ S: String, _ K: Int) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func licenseKeyFormatting(S string, K int) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def licenseKeyFormatting(S: String, K: Int): String = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun licenseKeyFormatting(S: String, K: Int): String {\r\n        \r\n    }\r\n}"}],"testcase":"\"5F3Z-2e-9-w\"\n4","testable":true,"templateMeta":{"name":"licenseKeyFormatting","params":[{"name":"S","type":"string"},{"name":"K","type":"integer"}],"return":{"type":"string"}}}