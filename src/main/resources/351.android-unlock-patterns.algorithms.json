{"id":351,"fid":351,"name":"Android Unlock Patterns","slug":"android-unlock-patterns","link":"https://leetcode.com/problems/android-unlock-patterns/description/","percent":44.911604920326326,"level":"Medium","category":"algorithms","totalAC":"24.7K","totalSubmit":"55K","desc":"Given an Android 3x3 key lock screen and two integers m and n, where 1 ≤ m ≤ n ≤ 9, count the total number of unlock patterns of the Android lock screen, which consist of minimum of m keys and maximum n keys.\r\n\r\n \r\n\r\nRules for a valid pattern:\r\n\r\n\r\n\tEach pattern must connect at least m keys and at most n keys.\r\n\tAll the keys must be distinct.\r\n\tIf the line connecting two consecutive keys in the pattern passes through any other keys, the other keys must have previously selected in the pattern. No jumps through non selected key is allowed.\r\n\tThe order of keys used matters.\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n \r\n\r\nExplanation:\r\n\r\n\r\n| 1 | 2 | 3 |\r\n| 4 | 5 | 6 |\r\n| 7 | 8 | 9 |\r\n\r\nInvalid move: 4 - 1 - 3 - 6 \r\nLine 1 - 3 passes through key 2 which had not been selected in the pattern.\r\n\r\nInvalid move: 4 - 1 - 9 - 2\r\nLine 1 - 9 passes through key 5 which had not been selected in the pattern.\r\n\r\nValid move: 2 - 4 - 1 - 3 - 6\r\nLine 1 - 3 is valid because it passes through key 2, which had been selected in the pattern\r\n\r\nValid move: 6 - 5 - 4 - 1 - 9 - 2\r\nLine 1 - 9 is valid because it passes through key 5, which had been selected in the pattern.\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\n\r\nInput: m = 1, n = 1\r\nOutput: 9\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int numberOfPatterns(int m, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int numberOfPatterns(int m, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def numberOfPatterns(self, m, n):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def numberOfPatterns(self, m, n):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int numberOfPatterns(int m, int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int NumberOfPatterns(int m, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} m\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar numberOfPatterns = function(m, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} m\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef number_of_patterns(m, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func numberOfPatterns(_ m: Int, _ n: Int) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func numberOfPatterns(m int, n int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def numberOfPatterns(m: Int, n: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun numberOfPatterns(m: Int, n: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"1\n1","testable":true,"templateMeta":{"name":"numberOfPatterns","params":[{"name":"m","type":"integer"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}