{"id":749,"fid":748,"name":"Shortest Completing Word","slug":"shortest-completing-word","link":"https://leetcode.com/problems/shortest-completing-word/description/","percent":52.56920237851138,"level":"Easy","category":"algorithms","totalAC":"12.8K","totalSubmit":"24.4K","desc":"\r\nFind the minimum length word from a given dictionary words, which has all the letters from the string licensePlate.  Such a word is said to complete the given string licensePlate\r\n\r\nHere, for letters we ignore case.  For example, \"P\" on the licensePlate still matches \"p\" on the word.\r\n\r\nIt is guaranteed an answer exists.  If there are multiple answers, return the one that occurs first in the array.\r\n\r\nThe license plate might have the same letter occurring multiple times.  For example, given a licensePlate of \"PP\", the word \"pair\" does not complete the licensePlate, but the word \"supper\" does.\r\n\r\n\r\nExample 1:\r\n\r\nInput: licensePlate = \"1s3 PSt\", words = [\"step\", \"steps\", \"stripe\", \"stepple\"]\r\nOutput: \"steps\"\r\nExplanation: The smallest length word that contains the letters \"S\", \"P\", \"S\", and \"T\".\r\nNote that the answer is not \"step\", because the letter \"s\" must occur in the word twice.\r\nAlso note that we ignored case for the purposes of comparing whether a letter exists in the word.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: licensePlate = \"1s3 456\", words = [\"looks\", \"pest\", \"stew\", \"show\"]\r\nOutput: \"pest\"\r\nExplanation: There are 3 smallest length words that contains the letters \"s\".\r\nWe return the one that occurred first.\r\n\r\n\r\n\r\nNote:\r\n\r\nlicensePlate will be a string with length in range [1, 7].\r\nlicensePlate will contain digits, spaces, or letters (uppercase or lowercase).\r\nwords will have a length in the range [10, 1000].\r\nEvery words[i] will consist of lowercase letters, and have length in range [1, 15].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string shortestCompletingWord(string licensePlate, vector<string>& words) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String shortestCompletingWord(String licensePlate, String[] words) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def shortestCompletingWord(self, licensePlate, words):\n        \"\"\"\n        :type licensePlate: str\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def shortestCompletingWord(self, licensePlate, words):\n        \"\"\"\n        :type licensePlate: str\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* shortestCompletingWord(char* licensePlate, char** words, int wordsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string ShortestCompletingWord(string licensePlate, string[] words) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} licensePlate\n * @param {string[]} words\n * @return {string}\n */\nvar shortestCompletingWord = function(licensePlate, words) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} license_plate\n# @param {String[]} words\n# @return {String}\ndef shortest_completing_word(license_plate, words)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shortestCompletingWord(_ licensePlate: String, _ words: [String]) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func shortestCompletingWord(licensePlate string, words []string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def shortestCompletingWord(licensePlate: String, words: Array[String]): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun shortestCompletingWord(licensePlate: String, words: Array<String>): String {\n        \n    }\n}"}],"testcase":"\"1s3 PSt\"\n[\"step\",\"steps\",\"stripe\",\"stepple\"]","testable":true,"templateMeta":{"name":"shortestCompletingWord","params":[{"name":"licensePlate","type":"string"},{"name":"words","type":"string[]"}],"return":{"type":"string"}}}