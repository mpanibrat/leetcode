{"id":684,"fid":684,"name":"Redundant Connection","slug":"redundant-connection","link":"https://leetcode.com/problems/redundant-connection/description/","percent":47.51941467171555,"level":"Medium","category":"algorithms","totalAC":"29.6K","totalSubmit":"62.3K","desc":"\r\nIn this problem, a tree is an undirected graph that is connected and has no cycles.\r\n\r\nThe given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n\r\nThe resulting graph is given as a 2D-array of edges.  Each element of edges is a pair [u, v] with u < v, that represents an undirected edge connecting nodes u and v.\r\n\r\nReturn an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge [u, v] should be in the same format, with u < v.\r\nExample 1:\r\n\r\nInput: [[1,2], [1,3], [2,3]]\r\nOutput: [2,3]\r\nExplanation: The given undirected graph will be like this:\r\n  1\r\n / \\\r\n2 - 3\r\n\r\n\r\nExample 2:\r\n\r\nInput: [[1,2], [2,3], [3,4], [1,4], [1,5]]\r\nOutput: [1,4]\r\nExplanation: The given undirected graph will be like this:\r\n5 - 1 - 2\r\n    |   |\r\n    4 - 3\r\n\r\n\r\nNote:\r\nThe size of the input 2D-array will be between 3 and 1000.\r\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.\r\n\r\n\r\n\r\n\r\n\r\nUpdate (2017-09-26):\r\nWe have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. For the directed graph follow up please see Redundant Connection II). We apologize for any inconvenience caused.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] findRedundantConnection(int[][] edges) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findRedundantConnection(self, edges):\r\n        \"\"\"\r\n        :type edges: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findRedundantConnection(self, edges):\r\n        \"\"\"\r\n        :type edges: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findRedundantConnection(int** edges, int edgesRowSize, int edgesColSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] FindRedundantConnection(int[,] edges) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} edges\r\n * @return {number[]}\r\n */\r\nvar findRedundantConnection = function(edges) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} edges\r\n# @return {Integer[]}\r\ndef find_redundant_connection(edges)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findRedundantConnection(_ edges: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findRedundantConnection(edges [][]int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findRedundantConnection(edges: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findRedundantConnection(edges: Array<IntArray>): IntArray {\n        \n    }\n}"}],"testcase":"[[1,2],[1,3],[2,3]]","testable":true,"templateMeta":{"name":"findRedundantConnection","params":[{"name":"edges","type":"integer[][]"}],"return":{"type":"integer[]"}}}