{"id":269,"fid":269,"name":"Alien Dictionary","slug":"alien-dictionary","link":"https://leetcode.com/problems/alien-dictionary/description/","percent":28.327834207841047,"level":"Hard","category":"algorithms","totalAC":"54.7K","totalSubmit":"193.1K","desc":"There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\n[\r\n  \"wrt\",\r\n  \"wrf\",\r\n  \"er\",\r\n  \"ett\",\r\n  \"rftt\"\r\n]\r\n\r\nOutput: \"wertf\"\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\n[\r\n  \"z\",\r\n  \"x\"\r\n]\r\n\r\nOutput: \"zx\"\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput:\r\n[\r\n  \"z\",\r\n  \"x\",\r\n  \"z\"\r\n] \r\n\r\nOutput: \"\"Â \r\n\r\nExplanation: The order is invalid, so return \"\".\r\n\r\n\r\nNote:\r\n\r\n\r\n\tYou may assume all letters are in lowercase.\r\n\tYou may assume that if a is a prefix of b, then a must appear before b in the given dictionary.\r\n\tIf the order is invalid, return an empty string.\r\n\tThere may be multiple valid order of letters, return any one of them is fine.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string alienOrder(vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String alienOrder(String[] words) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def alienOrder(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def alienOrder(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* alienOrder(char** words, int wordsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string AlienOrder(string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n * @return {string}\r\n */\r\nvar alienOrder = function(words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\r\n# @return {String}\r\ndef alien_order(words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func alienOrder(_ words: [String]) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func alienOrder(words []string) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def alienOrder(words: Array[String]): String = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun alienOrder(words: Array<String>): String {\r\n        \r\n    }\r\n}"}],"testcase":"[\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]","testable":true,"templateMeta":{"name":"alienOrder","params":[{"name":"words","type":"string[]"}],"return":{"type":"string"}}}