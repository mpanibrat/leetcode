{"id":863,"fid":834,"name":"Sum of Distances in Tree","slug":"sum-of-distances-in-tree","link":"https://leetcode.com/problems/sum-of-distances-in-tree/description/","percent":35.00121644635472,"level":"Hard","category":"algorithms","totalAC":"4.3K","totalSubmit":"12.3K","desc":"An undirected, connected tree with N nodes labelled 0...N-1 and N-1 edges are given.\r\n\r\nThe ith edge connects nodes edges[i][0] and edges[i][1] together.\r\n\r\nReturn a list ans, where ans[i] is the sum of the distances between node i and all other nodes.\r\n\r\nExample 1:\r\n\r\n\r\nInput: N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\r\nOutput: [8,12,6,10,10,10]\r\nExplanation: \r\nHere is a diagram of the given tree:\r\n  0\r\n / \\\r\n1   2\r\n   /|\\\r\n  3 4 5\r\nWe can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\r\nequals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.\r\n\r\n\r\nNote: 1 <= N <= 10000\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> sumOfDistancesInTree(int N, vector<vector<int>>& edges) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] sumOfDistancesInTree(int N, int[][] edges) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def sumOfDistancesInTree(self, N, edges):\n        \"\"\"\n        :type N: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sumOfDistancesInTree(self, N, edges):\n        \"\"\"\n        :type N: int\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sumOfDistancesInTree(int N, int** edges, int edgesRowSize, int *edgesColSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] SumOfDistancesInTree(int N, int[][] edges) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @param {number[][]} edges\n * @return {number[]}\n */\nvar sumOfDistancesInTree = function(N, edges) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @param {Integer[][]} edges\n# @return {Integer[]}\ndef sum_of_distances_in_tree(n, edges)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sumOfDistancesInTree(_ N: Int, _ edges: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func sumOfDistancesInTree(N int, edges [][]int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sumOfDistancesInTree(N: Int, edges: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sumOfDistancesInTree(N: Int, edges: Array<IntArray>): IntArray {\n        \n    }\n}"}],"testcase":"6\n[[0,1],[0,2],[2,3],[2,4],[2,5]]","testable":true,"templateMeta":{"name":"sumOfDistancesInTree","params":[{"name":"N","type":"integer"},{"name":"edges","type":"integer[][]"}],"return":{"type":"integer[]"}}}