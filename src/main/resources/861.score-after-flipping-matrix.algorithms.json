{"id":891,"fid":861,"name":"Score After Flipping Matrix","slug":"score-after-flipping-matrix","link":"https://leetcode.com/problems/score-after-flipping-matrix/description/","percent":67.06147772137619,"level":"Medium","category":"algorithms","totalAC":"7.1K","totalSubmit":"10.6K","desc":"We have a two dimensional matrix A where each value is 0 or 1.\r\n\r\nA move consists of choosing any row or column, and toggling each value in that row or column: changing all 0s to 1s, and all 1s to 0s.\r\n\r\nAfter making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\r\n\r\nReturn the highest possible score.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\r\nOutput: 39\r\nExplanation:\r\nToggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].\r\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 20\r\n\t1 <= A[0].length <= 20\r\n\tA[i][j] is 0 or 1.\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int matrixScore(vector<vector<int>>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int matrixScore(int[][] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def matrixScore(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def matrixScore(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int matrixScore(int** A, int ARowSize, int *AColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MatrixScore(int[][] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} A\n * @return {number}\n */\nvar matrixScore = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} a\n# @return {Integer}\ndef matrix_score(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func matrixScore(_ A: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func matrixScore(A [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def matrixScore(A: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun matrixScore(A: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[0,0,1,1],[1,0,1,0],[1,1,0,0]]","testable":true,"templateMeta":{"name":"matrixScore","params":[{"name":"A","type":"integer[][]"}],"return":{"type":"integer"}}}