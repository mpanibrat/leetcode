{"id":433,"fid":433,"name":"Minimum Genetic Mutation","slug":"minimum-genetic-mutation","link":"https://leetcode.com/problems/minimum-genetic-mutation/description/","percent":36.18113110319062,"level":"Medium","category":"algorithms","totalAC":"16.9K","totalSubmit":"46.6K","desc":"A gene string can be represented by an 8-character long string, with choices from \"A\", \"C\", \"G\", \"T\".\r\n\r\nSuppose we need to investigate about a mutation (mutation from \"start\" to \"end\"), where ONE mutation is defined as ONE single character changed in the gene string.\r\n\r\nFor example, \"AACCGGTT\" -> \"AACCGGTA\" is 1 mutation.\r\n\r\nAlso, there is a given gene \"bank\", which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.\r\n\r\nNow, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from \"start\" to \"end\". If there is no such a mutation, return -1.\r\n\r\nNote:\r\n\r\n\r\n\tStarting point is assumed to be valid, so it might not be included in the bank.\r\n\tIf multiple mutations are needed, all mutations during in the sequence must be valid.\r\n\tYou may assume start and end string is not the same.\r\n\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nstart: \"AACCGGTT\"\r\nend:   \"AACCGGTA\"\r\nbank: [\"AACCGGTA\"]\r\n\r\nreturn: 1\r\n\r\n\r\n \r\n\r\nExample 2:\r\n\r\n\r\nstart: \"AACCGGTT\"\r\nend:   \"AAACGGTA\"\r\nbank: [\"AACCGGTA\", \"AACCGCTA\", \"AAACGGTA\"]\r\n\r\nreturn: 2\r\n\r\n\r\n \r\n\r\nExample 3:\r\n\r\n\r\nstart: \"AAAAACCC\"\r\nend:   \"AACCCCCC\"\r\nbank: [\"AAAACCCC\", \"AAACCCCC\", \"AACCCCCC\"]\r\n\r\nreturn: 3\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minMutation(string start, string end, vector<string>& bank) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minMutation(String start, String end, String[] bank) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minMutation(self, start, end, bank):\r\n        \"\"\"\r\n        :type start: str\r\n        :type end: str\r\n        :type bank: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minMutation(char* start, char* end, char** bank, int bankSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinMutation(string start, string end, string[] bank) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} start\r\n * @param {string} end\r\n * @param {string[]} bank\r\n * @return {number}\r\n */\r\nvar minMutation = function(start, end, bank) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} start\r\n# @param {String} end\r\n# @param {String[]} bank\r\n# @return {Integer}\r\ndef min_mutation(start, end, bank)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minMutation(_ start: String, _ end: String, _ bank: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minMutation(start string, end string, bank []string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minMutation(start: String, end: String, bank: Array[String]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minMutation(start: String, end: String, bank: Array<String>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"AACCGGTT\"\n\"AACCGGTA\"\n[\"AACCGGTA\"]","testable":true,"templateMeta":{"name":"minMutation","params":[{"name":"start","type":"string"},{"name":"end","type":"string"},{"name":"bank","type":"string[]"}],"return":{"type":"integer"}}}