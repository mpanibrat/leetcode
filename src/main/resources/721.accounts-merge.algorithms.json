{"id":721,"fid":721,"name":"Accounts Merge","slug":"accounts-merge","link":"https://leetcode.com/problems/accounts-merge/description/","percent":36.540784977044424,"level":"Medium","category":"algorithms","totalAC":"21.2K","totalSubmit":"57.9K","desc":"Given a list accounts, each element accounts[i] is a list of strings, where the first element accounts[i][0] is a name, and the rest of the elements are emails representing emails of the account.\r\n\r\nNow, we would like to merge these accounts.  Two accounts definitely belong to the same person if there is some email that is common to both accounts.  Note that even if two accounts have the same name, they may belong to different people as people could have the same name.  A person can have any number of accounts initially, but all of their accounts definitely have the same name.\r\n\r\nAfter merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order.  The accounts themselves can be returned in any order.\r\n\r\nExample 1:\r\n\r\nInput: \r\naccounts = [[\"John\", \"johnsmith@mail.com\", \"john00@mail.com\"], [\"John\", \"johnnybravo@mail.com\"], [\"John\", \"johnsmith@mail.com\", \"john_newyork@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\nOutput: [[\"John\", 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com'],  [\"John\", \"johnnybravo@mail.com\"], [\"Mary\", \"mary@mail.com\"]]\r\nExplanation: \r\nThe first and third John's are the same person as they have the common email \"johnsmith@mail.com\".\r\nThe second John and Mary are different people as none of their email addresses are used by other accounts.\r\nWe could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \r\n['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\r\n\r\n\r\n\r\nNote:\r\nThe length of accounts will be in the range [1, 1000].\r\nThe length of accounts[i] will be in the range [1, 10].\r\nThe length of accounts[i][j] will be in the range [1, 30].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def accountsMerge(self, accounts):\r\n        \"\"\"\r\n        :type accounts: List[List[str]]\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def accountsMerge(self, accounts):\r\n        \"\"\"\r\n        :type accounts: List[List[str]]\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *columnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar*** accountsMerge(char*** accounts, int accountsRowSize, int *accountsColSizes, int** columnSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<string>> AccountsMerge(IList<IList<string>> accounts) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[][]} accounts\r\n * @return {string[][]}\r\n */\r\nvar accountsMerge = function(accounts) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[][]} accounts\r\n# @return {String[][]}\r\ndef accounts_merge(accounts)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func accountsMerge(_ accounts: [[String]]) -> [[String]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func accountsMerge(accounts [][]string) [][]string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def accountsMerge(accounts: List[List[String]]): List[List[String]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun accountsMerge(accounts: List<List<String>>): List<List<String>> {\r\n        \r\n    }\r\n}"}],"testcase":"[[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]","testable":true,"templateMeta":{"name":"accountsMerge","params":[{"name":"accounts","type":"list<list<string>>"}],"return":{"type":"list<list<string>>"}}}