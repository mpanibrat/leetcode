{"id":739,"fid":739,"name":"Daily Temperatures","slug":"daily-temperatures","link":"https://leetcode.com/problems/daily-temperatures/description/","percent":56.30038047333462,"level":"Medium","category":"algorithms","totalAC":"34.9K","totalSubmit":"62K","desc":"\r\nGiven a list of daily temperatures T, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put 0 instead.\r\n\r\nFor example, given the list of temperatures T = [73, 74, 75, 71, 69, 72, 76, 73], your output should be [1, 1, 4, 2, 1, 1, 0, 0].\r\n\r\n\r\nNote:\r\nThe length of temperatures will be in the range [1, 30000].\r\nEach temperature will be an integer in the range [30, 100].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> dailyTemperatures(vector<int>& T) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] dailyTemperatures(int[] T) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def dailyTemperatures(self, T):\n        \"\"\"\n        :type T: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def dailyTemperatures(self, T):\n        \"\"\"\n        :type T: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* dailyTemperatures(int* T, int TSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] DailyTemperatures(int[] T) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} T\n * @return {number[]}\n */\nvar dailyTemperatures = function(T) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} t\n# @return {Integer[]}\ndef daily_temperatures(t)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func dailyTemperatures(_ T: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func dailyTemperatures(T []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def dailyTemperatures(T: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun dailyTemperatures(T: IntArray): IntArray {\n        \n    }\n}"}],"testcase":"[73,74,75,71,69,72,76,73]","testable":true,"templateMeta":{"name":"dailyTemperatures","params":[{"name":"T","type":"integer[]"}],"return":{"type":"integer[]"}}}