{"id":307,"fid":307,"name":"Range Sum Query - Mutable","slug":"range-sum-query-mutable","link":"https://leetcode.com/problems/range-sum-query-mutable/description/","percent":25.411277806518367,"level":"Medium","category":"algorithms","totalAC":"56.5K","totalSubmit":"222.3K","desc":"Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.\r\n\r\nThe update(i, val) function modifies nums by updating the element at index i to val.\r\n\r\nExample:\r\n\r\n\r\nGiven nums = [1, 3, 5]\r\n\r\nsumRange(0, 2) -> 9\r\nupdate(1, 2)\r\nsumRange(0, 2) -> 8\r\n\r\n\r\nNote:\r\n\r\n\r\n\tThe array is only modifiable by the update function.\r\n\tYou may assume the number of calls to update and sumRange function is distributed evenly.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class NumArray {\r\npublic:\r\n    NumArray(vector<int> nums) {\r\n        \r\n    }\r\n    \r\n    void update(int i, int val) {\r\n        \r\n    }\r\n    \r\n    int sumRange(int i, int j) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * obj.update(i,val);\r\n * int param_2 = obj.sumRange(i,j);\r\n */"},{"value":"java","text":"Java","defaultCode":"class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public void update(int i, int val) {\r\n        \r\n    }\r\n    \r\n    public int sumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * obj.update(i,val);\r\n * int param_2 = obj.sumRange(i,j);\r\n */"},{"value":"python","text":"Python","defaultCode":"class NumArray(object):\r\n\r\n    def __init__(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def update(self, i, val):\r\n        \"\"\"\r\n        :type i: int\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def sumRange(self, i, j):\r\n        \"\"\"\r\n        :type i: int\r\n        :type j: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray(nums)\r\n# obj.update(i,val)\r\n# param_2 = obj.sumRange(i,j)"},{"value":"python3","text":"Python3","defaultCode":"class NumArray:\r\n\r\n    def __init__(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def update(self, i, val):\r\n        \"\"\"\r\n        :type i: int\r\n        :type val: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def sumRange(self, i, j):\r\n        \"\"\"\r\n        :type i: int\r\n        :type j: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray(nums)\r\n# obj.update(i,val)\r\n# param_2 = obj.sumRange(i,j)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} NumArray;\r\n\r\nNumArray* numArrayCreate(int* nums, int numsSize) {\r\n    \r\n}\r\n\r\nvoid numArrayUpdate(NumArray* obj, int i, int val) {\r\n    \r\n}\r\n\r\nint numArraySumRange(NumArray* obj, int i, int j) {\r\n    \r\n}\r\n\r\nvoid numArrayFree(NumArray* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your NumArray struct will be instantiated and called as such:\r\n * struct NumArray* obj = numArrayCreate(nums, numsSize);\r\n * numArrayUpdate(obj, i, val);\r\n * int param_2 = numArraySumRange(obj, i, j);\r\n * numArrayFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public void Update(int i, int val) {\r\n        \r\n    }\r\n    \r\n    public int SumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * obj.Update(i,val);\r\n * int param_2 = obj.SumRange(i,j);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n */\r\nvar NumArray = function(nums) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} i \r\n * @param {number} val\r\n * @return {void}\r\n */\r\nNumArray.prototype.update = function(i, val) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} i \r\n * @param {number} j\r\n * @return {number}\r\n */\r\nNumArray.prototype.sumRange = function(i, j) {\r\n    \r\n};\r\n\r\n/** \r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = Object.create(NumArray).createNew(nums)\r\n * obj.update(i,val)\r\n * var param_2 = obj.sumRange(i,j)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class NumArray\r\n\r\n=begin\r\n    :type nums: Integer[]\r\n=end\r\n    def initialize(nums)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type i: Integer\r\n    :type val: Integer\r\n    :rtype: Void\r\n=end\r\n    def update(i, val)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type i: Integer\r\n    :type j: Integer\r\n    :rtype: Integer\r\n=end\r\n    def sum_range(i, j)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray.new(nums)\r\n# obj.update(i,val)\r\n# param_2 = obj.sum_range(i,j)"},{"value":"swift","text":"Swift","defaultCode":"\nclass NumArray {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func update(_ i: Int, _ val: Int) {\n      \n    }\n    \n    func sumRange(_ i: Int, _ j: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray(nums)\n * obj.update(i, val)\n * let ret_2: Int = obj.sumRange(i, j)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type NumArray struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(nums []int) NumArray {\r\n    \r\n}\r\n\r\n\r\nfunc (this *NumArray) Update(i int, val int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *NumArray) SumRange(i int, j int) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * obj := Constructor(nums);\r\n * obj.Update(i,val);\r\n * param_2 := obj.SumRange(i,j);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class NumArray(_nums: Array[Int]) {\r\n\r\n    def update(i: Int, `val`: Int) {\r\n        \r\n    }\r\n\r\n    def sumRange(i: Int, j: Int): Int = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = new NumArray(nums)\r\n * obj.update(i,`val`)\r\n * var param_2 = obj.sumRange(i,j)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class NumArray(nums: IntArray) {\r\n\r\n    fun update(i: Int, `val`: Int) {\r\n        \r\n    }\r\n\r\n    fun sumRange(i: Int, j: Int): Int {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = NumArray(nums)\r\n * obj.update(i,`val`)\r\n * var param_2 = obj.sumRange(i,j)\r\n */"}],"testcase":"[\"NumArray\",\"sumRange\",\"update\",\"sumRange\"]\n[[[1,3,5]],[0,2],[1,2],[0,2]]","testable":true,"templateMeta":{"classname":"NumArray","maxbytesperline":170000,"constructor":{"params":[{"type":"integer[]","name":"nums"},{"type":"integer","name":"numsSize","lang":"c","value":"size_1"}]},"methods":[{"name":"update","params":[{"type":"integer","name":"i"},{"type":"integer","name":"val"}],"return":{"type":"void"}},{"name":"sumRange","params":[{"type":"integer","name":"i"},{"type":"integer","name":"j"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}