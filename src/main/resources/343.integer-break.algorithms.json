{"id":343,"fid":343,"name":"Integer Break","slug":"integer-break","link":"https://leetcode.com/problems/integer-break/description/","percent":46.80174122800937,"level":"Medium","category":"algorithms","totalAC":"67.5K","totalSubmit":"144.3K","desc":"Given a positive integer n, break it into the sum of at least two positive integers and maximize the product of those integers. Return the maximum product you can get.\r\n\r\nExample 1:\r\n\r\n\r\n\r\nInput: 2\r\nOutput: 1\r\nExplanation: 2 = 1 + 1, 1 × 1 = 1.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: 10\r\nOutput: 36\r\nExplanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.\r\n\r\nNote: You may assume that n is not less than 2 and not larger than 58.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int integerBreak(int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int integerBreak(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def integerBreak(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def integerBreak(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int integerBreak(int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int IntegerBreak(int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar integerBreak = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @return {Integer}\r\ndef integer_break(n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func integerBreak(_ n: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func integerBreak(n int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def integerBreak(n: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun integerBreak(n: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"2","testable":true,"templateMeta":{"name":"integerBreak","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"}}}