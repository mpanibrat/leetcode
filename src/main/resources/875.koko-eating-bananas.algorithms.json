{"id":907,"fid":875,"name":"Koko Eating Bananas","slug":"koko-eating-bananas","link":"https://leetcode.com/problems/koko-eating-bananas/description/","percent":42.524494210459345,"level":"Medium","category":"algorithms","totalAC":"6.7K","totalSubmit":"15.7K","desc":"Koko loves to eat bananas.  There are N piles of bananas, the i-th pile has piles[i] bananas.  The guards have gone and will come back in H hours.\r\n\r\nKoko can decide her bananas-per-hour eating speed of K.  Each hour, she chooses some pile of bananas, and eats K bananas from that pile.  If the pile has less than K bananas, she eats all of them instead, and won't eat any more bananas during this hour.\r\n\r\nKoko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back.\r\n\r\nReturn the minimum integer K such that she can eat all the bananas within H hours.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: piles = [3,6,7,11], H = 8\r\nOutput: 4\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: piles = [30,11,23,4,20], H = 5\r\nOutput: 30\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: piles = [30,11,23,4,20], H = 6\r\nOutput: 23\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= piles.length <= 10^4\r\n\tpiles.length <= H <= 10^9\r\n\t1 <= piles[i] <= 10^9\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minEatingSpeed(vector<int>& piles, int H) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minEatingSpeed(int[] piles, int H) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minEatingSpeed(self, piles, H):\r\n        \"\"\"\r\n        :type piles: List[int]\r\n        :type H: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minEatingSpeed(self, piles, H):\r\n        \"\"\"\r\n        :type piles: List[int]\r\n        :type H: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minEatingSpeed(int* piles, int pilesSize, int H) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinEatingSpeed(int[] piles, int H) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} piles\r\n * @param {number} H\r\n * @return {number}\r\n */\r\nvar minEatingSpeed = function(piles, H) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} piles\r\n# @param {Integer} h\r\n# @return {Integer}\r\ndef min_eating_speed(piles, h)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minEatingSpeed(_ piles: [Int], _ H: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minEatingSpeed(piles []int, H int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minEatingSpeed(piles: Array[Int], H: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minEatingSpeed(piles: IntArray, H: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[3,6,7,11]\n8","testable":true,"templateMeta":{"name":"minEatingSpeed","params":[{"name":"piles","type":"integer[]"},{"name":"H","type":"integer"}],"return":{"type":"integer"}}}