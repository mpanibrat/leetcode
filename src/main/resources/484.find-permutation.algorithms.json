{"id":484,"fid":484,"name":"Find Permutation","slug":"find-permutation","link":"https://leetcode.com/problems/find-permutation/description/","percent":56.15875912408759,"level":"Medium","category":"algorithms","totalAC":"11.1K","totalSubmit":"19.7K","desc":"\r\nBy now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature \"DI\" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the \"DI\" secret signature.\r\n\r\n\r\n\r\nOn the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.\r\n\r\n\r\nExample 1:\r\n\r\nInput: \"I\"\r\nOutput: [1,2]\r\nExplanation: [1,2] is the only legal initial spectial string can construct secret signature \"I\", where the number 1 and 2 construct an increasing relationship.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: \"DI\"\r\nOutput: [2,1,3]\r\nExplanation: Both [2,1,3] and [3,1,2] can construct the secret signature \"DI\", but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]\r\n\r\n\r\n\r\nNote:\r\nThe input string will only contain the character 'D' and 'I'.\r\nThe length of input string is a positive integer and will not exceed 10,000\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findPermutation(string s) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] findPermutation(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findPermutation(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findPermutation(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findPermutation(char* s, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] FindPermutation(string s) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @return {number[]}\r\n */\r\nvar findPermutation = function(s) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {Integer[]}\r\ndef find_permutation(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findPermutation(_ s: String) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findPermutation(s string) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findPermutation(s: String): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findPermutation(s: String): IntArray {\n        \n    }\n}"}],"testcase":"\"DDIIDI\"","testable":true,"templateMeta":{"name":"findPermutation","params":[{"name":"s","type":"string"}],"return":{"type":"integer[]"}}}