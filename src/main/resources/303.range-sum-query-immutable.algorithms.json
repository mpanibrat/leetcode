{"id":303,"fid":303,"name":"Range Sum Query - Immutable","slug":"range-sum-query-immutable","link":"https://leetcode.com/problems/range-sum-query-immutable/description/","percent":34.805826283187734,"level":"Easy","category":"algorithms","totalAC":"113.7K","totalSubmit":"326.6K","desc":"Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.\r\n\r\nExample:\r\n\r\nGiven nums = [-2, 0, 3, -5, 2, -1]\r\n\r\nsumRange(0, 2) -> 1\r\nsumRange(2, 5) -> -1\r\nsumRange(0, 5) -> -3\r\n\r\n\r\n\r\nNote:\r\n\r\nYou may assume that the array does not change.\r\nThere are many calls to sumRange function.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class NumArray {\r\npublic:\r\n    NumArray(vector<int> nums) {\r\n        \r\n    }\r\n    \r\n    int sumRange(int i, int j) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.sumRange(i,j);\r\n */"},{"value":"java","text":"Java","defaultCode":"class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public int sumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.sumRange(i,j);\r\n */"},{"value":"python","text":"Python","defaultCode":"class NumArray(object):\r\n\r\n    def __init__(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def sumRange(self, i, j):\r\n        \"\"\"\r\n        :type i: int\r\n        :type j: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray(nums)\r\n# param_1 = obj.sumRange(i,j)"},{"value":"python3","text":"Python3","defaultCode":"class NumArray:\r\n\r\n    def __init__(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def sumRange(self, i, j):\r\n        \"\"\"\r\n        :type i: int\r\n        :type j: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray(nums)\r\n# param_1 = obj.sumRange(i,j)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} NumArray;\r\n\r\nNumArray* numArrayCreate(int* nums, int numsSize) {\r\n    \r\n}\r\n\r\nint numArraySumRange(NumArray* obj, int i, int j) {\r\n    \r\n}\r\n\r\nvoid numArrayFree(NumArray* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your NumArray struct will be instantiated and called as such:\r\n * struct NumArray* obj = numArrayCreate(nums, numsSize);\r\n * int param_1 = numArraySumRange(obj, i, j);\r\n * numArrayFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class NumArray {\r\n\r\n    public NumArray(int[] nums) {\r\n        \r\n    }\r\n    \r\n    public int SumRange(int i, int j) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * NumArray obj = new NumArray(nums);\r\n * int param_1 = obj.SumRange(i,j);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n */\r\nvar NumArray = function(nums) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} i \r\n * @param {number} j\r\n * @return {number}\r\n */\r\nNumArray.prototype.sumRange = function(i, j) {\r\n    \r\n};\r\n\r\n/** \r\n * Your NumArray object will be instantiated and called as such:\r\n * var obj = Object.create(NumArray).createNew(nums)\r\n * var param_1 = obj.sumRange(i,j)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class NumArray\r\n\r\n=begin\r\n    :type nums: Integer[]\r\n=end\r\n    def initialize(nums)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type i: Integer\r\n    :type j: Integer\r\n    :rtype: Integer\r\n=end\r\n    def sum_range(i, j)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your NumArray object will be instantiated and called as such:\r\n# obj = NumArray.new(nums)\r\n# param_1 = obj.sum_range(i, j)"},{"value":"swift","text":"Swift","defaultCode":"\nclass NumArray {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func sumRange(_ i: Int, _ j: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * let obj = NumArray(nums)\n * let ret_1: Int = obj.sumRange(i, j)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type NumArray struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(nums []int) NumArray {\r\n    \r\n}\r\n\r\n\r\nfunc (this *NumArray) SumRange(i int, j int) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your NumArray object will be instantiated and called as such:\r\n * obj := Constructor(nums);\r\n * param_1 := obj.SumRange(i,j);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class NumArray(_nums: Array[Int]) {\n\n    def sumRange(i: Int, j: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = new NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class NumArray(nums: IntArray) {\n\n    fun sumRange(i: Int, j: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * var obj = NumArray(nums)\n * var param_1 = obj.sumRange(i,j)\n */"}],"testcase":"[\"NumArray\",\"sumRange\",\"sumRange\",\"sumRange\"]\n[[[-2,0,3,-5,2,-1]],[0,2],[2,5],[0,5]]","testable":true,"templateMeta":{"classname":"NumArray","maxbytesperline":135000,"constructor":{"params":[{"type":"integer[]","name":"nums"},{"type":"integer","name":"numsSize","lang":"c","value":"size_1"}]},"methods":[{"name":"sumRange","params":[{"type":"integer","name":"i"},{"type":"integer","name":"j"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}