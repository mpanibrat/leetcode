{"id":931,"fid":895,"name":"Maximum Frequency Stack","slug":"maximum-frequency-stack","link":"https://leetcode.com/problems/maximum-frequency-stack/description/","percent":48.21793416572077,"level":"Hard","category":"algorithms","totalAC":"4.2K","totalSubmit":"8.8K","desc":"Implement FreqStack, a class which simulates the operation of a stack-like data structure.\r\n\r\nFreqStack has two functions:\r\n\r\n\r\n\tpush(int x), which pushes an integer x onto the stack.\r\n\tpop(), which removes and returns the most frequent element in the stack.\r\n\t\r\n\t\tIf there is a tie for most frequent element, the element closest to the top of the stack is removed and returned.\r\n\t\r\n\t\r\n\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\n[\"FreqStack\",\"push\",\"push\",\"push\",\"push\",\"push\",\"push\",\"pop\",\"pop\",\"pop\",\"pop\"],\r\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]\r\nOutput: [null,null,null,null,null,null,null,5,7,5,4]\r\nExplanation:\r\nAfter making six .push operations, the stack is [5,7,5,7,4,5] from bottom to top.  Then:\r\n\r\npop() -> returns 5, as 5 is the most frequent.\r\nThe stack becomes [5,7,5,7,4].\r\n\r\npop() -> returns 7, as 5 and 7 is the most frequent, but 7 is closest to the top.\r\nThe stack becomes [5,7,5,4].\r\n\r\npop() -> returns 5.\r\nThe stack becomes [5,7,4].\r\n\r\npop() -> returns 4.\r\nThe stack becomes [5,7].\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tCalls to FreqStack.push(int x) will be such that 0 <= x <= 10^9.\r\n\tIt is guaranteed that FreqStack.pop() won't be called if the stack has zero elements.\r\n\tThe total number of FreqStack.push calls will not exceed 10000 in a single test case.\r\n\tThe total number of FreqStack.pop calls will not exceed 10000 in a single test case.\r\n\tThe total number of FreqStack.push and FreqStack.pop calls will not exceed 150000 across all test cases.\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class FreqStack {\npublic:\n    FreqStack() {\n        \n    }\n    \n    void push(int x) {\n        \n    }\n    \n    int pop() {\n        \n    }\n};\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n */"},{"value":"java","text":"Java","defaultCode":"class FreqStack {\n\n    public FreqStack() {\n        \n    }\n    \n    public void push(int x) {\n        \n    }\n    \n    public int pop() {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n */"},{"value":"python","text":"Python","defaultCode":"class FreqStack(object):\n\n    def __init__(self):\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()"},{"value":"python3","text":"Python3","defaultCode":"class FreqStack:\n\n    def __init__(self):\n        \n\n    def push(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: void\n        \"\"\"\n        \n\n    def pop(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack()\n# obj.push(x)\n# param_2 = obj.pop()"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} FreqStack;\n\nFreqStack* freqStackCreate() {\n    \n}\n\nvoid freqStackPush(FreqStack* obj, int x) {\n    \n}\n\nint freqStackPop(FreqStack* obj) {\n    \n}\n\nvoid freqStackFree(FreqStack* obj) {\n    \n}\n\n/**\n * Your FreqStack struct will be instantiated and called as such:\n * struct FreqStack* obj = freqStackCreate();\n * freqStackPush(obj, x);\n * int param_2 = freqStackPop(obj);\n * freqStackFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class FreqStack {\n\n    public FreqStack() {\n        \n    }\n    \n    public void Push(int x) {\n        \n    }\n    \n    public int Pop() {\n        \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack obj = new FreqStack();\n * obj.Push(x);\n * int param_2 = obj.Pop();\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar FreqStack = function() {\n    \n};\n\n/** \n * @param {number} x\n * @return {void}\n */\nFreqStack.prototype.push = function(x) {\n    \n};\n\n/**\n * @return {number}\n */\nFreqStack.prototype.pop = function() {\n    \n};\n\n/** \n * Your FreqStack object will be instantiated and called as such:\n * var obj = Object.create(FreqStack).createNew()\n * obj.push(x)\n * var param_2 = obj.pop()\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class FreqStack\n    def initialize()\n        \n    end\n\n\n=begin\n    :type x: Integer\n    :rtype: Void\n=end\n    def push(x)\n        \n    end\n\n\n=begin\n    :rtype: Integer\n=end\n    def pop()\n        \n    end\n\n\nend\n\n# Your FreqStack object will be instantiated and called as such:\n# obj = FreqStack.new()\n# obj.push(x)\n# param_2 = obj.pop()"},{"value":"swift","text":"Swift","defaultCode":"\nclass FreqStack {\n\n    init() {\n        \n    }\n    \n    func push(_ x: Int) {\n      \n    }\n    \n    func pop() -> Int {\n      \n    }\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * let obj = FreqStack()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type FreqStack struct {\n    \n}\n\n\nfunc Constructor() FreqStack {\n    \n}\n\n\nfunc (this *FreqStack) Push(x int)  {\n    \n}\n\n\nfunc (this *FreqStack) Pop() int {\n    \n}\n\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Push(x);\n * param_2 := obj.Pop();\n */"},{"value":"scala","text":"Scala","defaultCode":"class FreqStack() {\n\n    def push(x: Int) {\n        \n    }\n\n    def pop(): Int = {\n        \n    }\n\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = new FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class FreqStack() {\n\n    fun push(x: Int) {\n        \n    }\n\n    fun pop(): Int {\n        \n    }\n\n}\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * var obj = FreqStack()\n * obj.push(x)\n * var param_2 = obj.pop()\n */"}],"testcase":"[\"FreqStack\",\"push\",\"push\",\"push\",\"push\",\"push\",\"push\",\"pop\",\"pop\",\"pop\",\"pop\"]\n[[],[5],[7],[5],[7],[4],[5],[],[],[],[]]","testable":true,"templateMeta":{"classname":"FreqStack","maxbytesperline":200000,"constructor":{"params":[]},"methods":[{"name":"push","params":[{"type":"integer","name":"x"}],"return":{"type":"void"}},{"name":"pop","params":[],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}