{"id":47,"fid":47,"name":"Permutations II","slug":"permutations-ii","link":"https://leetcode.com/problems/permutations-ii/description/","percent":37.48099066857788,"level":"Medium","category":"algorithms","totalAC":"197.4K","totalSubmit":"526.7K","desc":"Given a collection of numbers that might contain duplicates, return all possible unique permutations.\r\n\r\nExample:\r\n\r\n\r\nInput: [1,1,2]\r\nOutput:\r\n[\r\n  [1,1,2],\r\n  [1,2,1],\r\n  [2,1,1]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> permuteUnique(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> permuteUnique(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def permuteUnique(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def permuteUnique(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** permuteUnique(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> PermuteUnique(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar permuteUnique = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef permute_unique(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func permuteUnique(_ nums: [Int]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func permuteUnique(nums []int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def permuteUnique(nums: Array[Int]): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun permuteUnique(nums: IntArray): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"[1,1,2]","testable":true,"templateMeta":{"name":"permuteUnique","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<list<integer>>","colsize":"size_1","dealloc":true}}}