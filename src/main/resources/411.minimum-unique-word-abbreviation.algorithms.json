{"id":411,"fid":411,"name":"Minimum Unique Word Abbreviation","slug":"minimum-unique-word-abbreviation","link":"https://leetcode.com/problems/minimum-unique-word-abbreviation/description/","percent":33.92843221330007,"level":"Hard","category":"algorithms","totalAC":"8.7K","totalSubmit":"25.7K","desc":"A string such as \"word\" contains the following abbreviations:\r\n\r\n[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\r\n\r\n\r\nGiven a target string and a set of strings in a dictionary, find an abbreviation of this target string with the smallest possible length such that it does not conflict with abbreviations of the strings in the dictionary. \r\n\r\nEach number or letter in the abbreviation is considered length = 1. For example, the abbreviation \"a32bc\" has length = 4.\r\n\r\nNote:\r\n\r\nIn the case of multiple answers as shown in the second example below, you may return any one of them.\r\nAssume length of target string = m, and dictionary size = n. You may assume that m ≤ 21, n ≤ 1000, and log2(n) + m ≤ 20.\r\n\r\n\r\n\r\nExamples:\r\n\r\n\"apple\", [\"blade\"] -> \"a4\" (because \"5\" or \"4e\" conflicts with \"blade\")\r\n\r\n\"apple\", [\"plain\", \"amber\", \"blade\"] -> \"1p3\" (other valid answers include \"ap3\", \"a3e\", \"2p2\", \"3le\", \"3l1\").\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string minAbbreviation(string target, vector<string>& dictionary) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String minAbbreviation(String target, String[] dictionary) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minAbbreviation(self, target, dictionary):\r\n        \"\"\"\r\n        :type target: str\r\n        :type dictionary: List[str]\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minAbbreviation(self, target, dictionary):\n        \"\"\"\n        :type target: str\n        :type dictionary: List[str]\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* minAbbreviation(char* target, char** dictionary, int dictionarySize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string MinAbbreviation(string target, string[] dictionary) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} target\r\n * @param {string[]} dictionary\r\n * @return {string}\r\n */\r\nvar minAbbreviation = function(target, dictionary) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} target\r\n# @param {String[]} dictionary\r\n# @return {String}\r\ndef min_abbreviation(target, dictionary)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minAbbreviation(_ target: String, _ dictionary: [String]) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minAbbreviation(target string, dictionary []string) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minAbbreviation(target: String, dictionary: Array[String]): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minAbbreviation(target: String, dictionary: Array<String>): String {\n        \n    }\n}"}],"testcase":"\"apple\"\n[\"blade\"]","testable":true,"templateMeta":{"name":"minAbbreviation","params":[{"name":"target","type":"string"},{"name":"dictionary","type":"string[]"}],"return":{"type":"string"}}}