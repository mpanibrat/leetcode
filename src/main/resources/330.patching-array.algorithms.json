{"id":330,"fid":330,"name":"Patching Array","slug":"patching-array","link":"https://leetcode.com/problems/patching-array/description/","percent":32.95490849345078,"level":"Hard","category":"algorithms","totalAC":"28.9K","totalSubmit":"87.6K","desc":"Given a sorted positive integer array nums and an integer n, add/patch elements to the array such that any number in range [1, n] inclusive can be formed by the sum of some elements in the array. Return the minimum number of patches required.\r\n\r\nExample 1:\r\n\r\n\r\nInput: nums = [1,3], n = 6\r\nOutput: 1 \r\nExplanation:\r\nCombinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\r\nNow if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\r\nPossible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\r\nSo we only need 1 patch.\r\n\r\nExample 2:\r\n\r\n\r\nInput: nums = [1,5,10], n = 20\r\nOutput: 2\r\nExplanation: The two patches can be [2, 4].\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: nums = [1,2,2], n = 5\r\nOutput: 0\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minPatches(vector<int>& nums, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minPatches(int[] nums, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minPatches(self, nums, n):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minPatches(self, nums, n):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int minPatches(int* nums, int numsSize, int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinPatches(int[] nums, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar minPatches = function(nums, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef min_patches(nums, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minPatches(_ nums: [Int], _ n: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minPatches(nums []int, n int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minPatches(nums: Array[Int], n: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minPatches(nums: IntArray, n: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[1,3]\n6","testable":true,"templateMeta":{"name":"minPatches","params":[{"name":"nums","type":"integer[]"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}