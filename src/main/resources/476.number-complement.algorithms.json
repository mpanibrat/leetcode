{"id":476,"fid":476,"name":"Number Complement","slug":"number-complement","link":"https://leetcode.com/problems/number-complement/description/","percent":61.48298190270629,"level":"Easy","category":"algorithms","totalAC":"92.6K","totalSubmit":"150.6K","desc":"Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.\r\n\r\nNote:\r\n\r\nThe given integer is guaranteed to fit within the range of a 32-bit signed integer.\r\nYou could assume no leading zero bit in the integerâ€™s binary representation.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: 5\r\nOutput: 2\r\nExplanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: 1\r\nOutput: 0\r\nExplanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findComplement(int num) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findComplement(int num) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findComplement(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int findComplement(int num) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindComplement(int num) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} num\r\n * @return {number}\r\n */\r\nvar findComplement = function(num) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\r\n# @return {Integer}\r\ndef find_complement(num)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findComplement(_ num: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findComplement(num int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findComplement(num: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findComplement(num: Int): Int {\n        \n    }\n}"}],"testcase":"5","testable":true,"templateMeta":{"name":"findComplement","params":[{"name":"num","type":"integer"}],"return":{"type":"integer"}}}