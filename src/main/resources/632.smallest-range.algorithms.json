{"id":632,"fid":632,"name":"Smallest Range","slug":"smallest-range","link":"https://leetcode.com/problems/smallest-range/description/","percent":44.16342956152363,"level":"Hard","category":"algorithms","totalAC":"15.8K","totalSubmit":"35.8K","desc":"You have k lists of sorted integers in ascending order. Find the smallest range that includes at least one number from each of the k lists. \r\n\r\nWe define the range [a,b] is smaller than range [c,d] if b-a < d-c or a < c if b-a == d-c.\r\n\r\nExample 1:\r\n\r\nInput:[[4,10,15,24,26], [0,9,12,20], [5,18,22,30]]\r\nOutput: [20,24]\r\nExplanation: \r\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\r\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\r\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nThe given list may contain duplicates, so ascending order means >= here.\r\n1 k \r\n -105 value of elements 5.\r\nFor Java users, please note that the input type has been changed to List<List<Integer>>. And after you reset the code template, you'll see this point.\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> smallestRange(vector<vector<int>>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def smallestRange(self, nums):\r\n        \"\"\"\r\n        :type nums: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def smallestRange(self, nums):\r\n        \"\"\"\r\n        :type nums: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* smallestRange(int** nums, int numsRowSize, int *numsColSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] SmallestRange(IList<IList<int>> nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} nums\r\n * @return {number[]}\r\n */\r\nvar smallestRange = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} nums\r\n# @return {Integer[]}\r\ndef smallest_range(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func smallestRange(_ nums: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func smallestRange(nums [][]int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def smallestRange(nums: List[List[Int]]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun smallestRange(nums: List<List<Int>>): IntArray {\n        \n    }\n}"}],"testcase":"[[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]","testable":true,"templateMeta":{"name":"smallestRange","params":[{"name":"nums","type":"list<list<integer>>"}],"return":{"type":"integer[]"}}}