{"id":674,"fid":674,"name":"Longest Continuous Increasing Subsequence","slug":"longest-continuous-increasing-subsequence","link":"https://leetcode.com/problems/longest-continuous-increasing-subsequence/description/","percent":43.04902558949144,"level":"Easy","category":"algorithms","totalAC":"48K","totalSubmit":"111.5K","desc":"\r\nGiven an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,3,5,4,7]\r\nOutput: 3\r\nExplanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. \r\nEven though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. \r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [2,2,2,2,2]\r\nOutput: 1\r\nExplanation: The longest continuous increasing subsequence is [2], its length is 1. \r\n\r\n\r\n\r\nNote:\r\nLength of the array will not exceed 10,000.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findLengthOfLCIS(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int findLengthOfLCIS(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findLengthOfLCIS(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findLengthOfLCIS(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findLengthOfLCIS(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindLengthOfLCIS(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar findLengthOfLCIS = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef find_length_of_lcis(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findLengthOfLCIS(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findLengthOfLCIS(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findLengthOfLCIS(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findLengthOfLCIS(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[1,3,5,4,7]","testable":true,"templateMeta":{"name":"findLengthOfLCIS","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}