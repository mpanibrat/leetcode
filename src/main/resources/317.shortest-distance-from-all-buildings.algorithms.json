{"id":317,"fid":317,"name":"Shortest Distance from All Buildings","slug":"shortest-distance-from-all-buildings","link":"https://leetcode.com/problems/shortest-distance-from-all-buildings/description/","percent":35.626670401363164,"level":"Hard","category":"algorithms","totalAC":"30.5K","totalSubmit":"85.7K","desc":"You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:\r\n\r\n\r\n\tEach 0 marks an empty land which you can pass by freely.\r\n\tEach 1 marks a building which you cannot pass through.\r\n\tEach 2 marks an obstacle which you cannot pass through.\r\n\r\n\r\nExample:\r\n\r\n\r\nInput: [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]\r\n\r\n1 - 0 - 2 - 0 - 1\r\n|   |   |   |   |\r\n0 - 0 - 0 - 0 - 0\r\n|   |   |   |   |\r\n0 - 0 - 1 - 0 - 0\r\n\r\nOutput: 7 \r\n\r\nExplanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2),\r\n             the point (1,2) is an ideal empty land to build a house, as the total \r\nÂ             travel distance of 3+3+1=7 is minimal. So return 7.\r\n\r\nNote:\r\nThere will be at least one building. If it is not possible to build such house according to the above rules, return -1.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int shortestDistance(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int shortestDistance(int[][] grid) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def shortestDistance(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def shortestDistance(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int shortestDistance(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int ShortestDistance(int[,] grid) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar shortestDistance = function(grid) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef shortest_distance(grid)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func shortestDistance(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func shortestDistance(grid [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def shortestDistance(grid: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun shortestDistance(grid: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]","testable":true,"templateMeta":{"name":"shortestDistance","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}