{"id":753,"fid":752,"name":"Open the Lock","slug":"open-the-lock","link":"https://leetcode.com/problems/open-the-lock/description/","percent":42.252642252642254,"level":"Medium","category":"algorithms","totalAC":"10.8K","totalSubmit":"25.6K","desc":"\r\nYou have a lock in front of you with 4 circular wheels.  Each wheel has 10 slots: '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'.  The wheels can rotate freely and wrap around: for example we can turn '9' to be '0', or '0' to be '9'.  Each move consists of turning one wheel one slot.\r\n\r\nThe lock initially starts at '0000', a string representing the state of the 4 wheels.\r\n\r\nYou are given a list of deadends dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.\r\n\r\nGiven a target representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.\r\n\r\n\r\nExample 1:\r\n\r\nInput: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\r\nOutput: 6\r\nExplanation:\r\nA sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\r\nNote that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\r\nbecause the wheels of the lock become stuck after the display becomes the dead end \"0102\".\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: deadends = [\"8888\"], target = \"0009\"\r\nOutput: 1\r\nExplanation:\r\nWe can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\r\nOutput: -1\r\nExplanation:\r\nWe can't reach the target without getting stuck.\r\n\r\n\r\n\r\nExample 4:\r\n\r\nInput: deadends = [\"0000\"], target = \"8888\"\r\nOutput: -1\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of deadends will be in the range [1, 500].\r\ntarget will not be in the list deadends.\r\nEvery string in deadends and the string target will be a string of 4 digits from the 10,000 possibilities '0000' to '9999'.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int openLock(vector<string>& deadends, string target) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int openLock(String[] deadends, String target) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def openLock(self, deadends, target):\r\n        \"\"\"\r\n        :type deadends: List[str]\r\n        :type target: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def openLock(self, deadends, target):\r\n        \"\"\"\r\n        :type deadends: List[str]\r\n        :type target: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int openLock(char** deadends, int deadendsSize, char* target) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int OpenLock(string[] deadends, string target) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} deadends\r\n * @param {string} target\r\n * @return {number}\r\n */\r\nvar openLock = function(deadends, target) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} deadends\r\n# @param {String} target\r\n# @return {Integer}\r\ndef open_lock(deadends, target)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func openLock(_ deadends: [String], _ target: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func openLock(deadends []string, target string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def openLock(deadends: Array[String], target: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun openLock(deadends: Array<String>, target: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"]\n\"0202\"","testable":true,"templateMeta":{"name":"openLock","params":[{"name":"deadends","type":"string[]"},{"name":"target","type":"string"}],"return":{"type":"integer"}}}