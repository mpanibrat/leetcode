{"id":960,"fid":924,"name":"Minimize Malware Spread","slug":"minimize-malware-spread","link":"https://leetcode.com/problems/minimize-malware-spread/description/","percent":35.57272421901243,"level":"Hard","category":"algorithms","totalAC":"3.2K","totalSubmit":"8.9K","desc":"In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.\r\n\r\nSome nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.\r\n\r\nSuppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.\r\n\r\nWe will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.\r\n\r\nNote that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\r\nOutput: 0\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\r\nOutput: 0\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\r\nOutput: 1\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 < graph.length = graph[0].length <= 300\r\n\t0 <= graph[i][j] == graph[j][i] <= 1\r\n\tgraph[i][i] = 1\r\n\t1 <= initial.length < graph.length\r\n\t0 <= initial[i] < graph.length\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minMalwareSpread(int[][] graph, int[] initial) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minMalwareSpread(self, graph, initial):\r\n        \"\"\"\r\n        :type graph: List[List[int]]\r\n        :type initial: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minMalwareSpread(self, graph, initial):\r\n        \"\"\"\r\n        :type graph: List[List[int]]\r\n        :type initial: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minMalwareSpread(int** graph, int graphRowSize, int *graphColSizes, int* initial, int initialSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinMalwareSpread(int[][] graph, int[] initial) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} graph\r\n * @param {number[]} initial\r\n * @return {number}\r\n */\r\nvar minMalwareSpread = function(graph, initial) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} graph\r\n# @param {Integer[]} initial\r\n# @return {Integer}\r\ndef min_malware_spread(graph, initial)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func minMalwareSpread(_ graph: [[Int]], _ initial: [Int]) -> Int {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func minMalwareSpread(graph [][]int, initial []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minMalwareSpread(graph: Array[Array[Int]], initial: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minMalwareSpread(graph: Array<IntArray>, initial: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]","testable":true,"templateMeta":{"name":"minMalwareSpread","params":[{"name":"graph","type":"integer[][]"},{"name":"initial","type":"integer[]"}],"return":{"type":"integer"}}}