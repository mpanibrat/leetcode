{"id":334,"fid":334,"name":"Increasing Triplet Subsequence","slug":"increasing-triplet-subsequence","link":"https://leetcode.com/problems/increasing-triplet-subsequence/description/","percent":39.335171376652674,"level":"Medium","category":"algorithms","totalAC":"75.3K","totalSubmit":"191.5K","desc":"Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.\r\n\r\nFormally the function should:\r\n\r\nReturn true if there exists i, j, k \r\nsuch that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.\r\n\r\nNote: Your algorithm should run in O(n) time complexity and O(1) space complexity.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,2,3,4,5]\r\nOutput: true\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [5,4,3,2,1]\r\nOutput: false\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool increasingTriplet(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean increasingTriplet(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def increasingTriplet(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def increasingTriplet(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"bool increasingTriplet(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool IncreasingTriplet(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar increasingTriplet = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef increasing_triplet(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func increasingTriplet(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func increasingTriplet(nums []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def increasingTriplet(nums: Array[Int]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun increasingTriplet(nums: IntArray): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3,4,5]","testable":true,"templateMeta":{"name":"increasingTriplet","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}