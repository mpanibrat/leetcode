{"id":66,"fid":66,"name":"Plus One","slug":"plus-one","link":"https://leetcode.com/problems/plus-one/description/","percent":40.023323203976176,"level":"Easy","category":"algorithms","totalAC":"306.5K","totalSubmit":"765.8K","desc":"Given a non-empty array of digitsÂ representing a non-negative integer, plus one to the integer.\r\n\r\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\r\n\r\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,2,3]\r\nOutput: [1,2,4]\r\nExplanation: The array represents the integer 123.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [4,3,2,1]\r\nOutput: [4,3,2,2]\r\nExplanation: The array represents the integer 4321.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> plusOne(vector<int>& digits) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] plusOne(int[] digits) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def plusOne(self, digits):\r\n        \"\"\"\r\n        :type digits: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def plusOne(self, digits):\r\n        \"\"\"\r\n        :type digits: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* plusOne(int* digits, int digitsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] PlusOne(int[] digits) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} digits\r\n * @return {number[]}\r\n */\r\nvar plusOne = function(digits) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} digits\r\n# @return {Integer[]}\r\ndef plus_one(digits)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func plusOne(_ digits: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func plusOne(digits []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def plusOne(digits: Array[Int]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun plusOne(digits: IntArray): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3]","testable":true,"templateMeta":{"name":"plusOne","params":[{"name":"digits","type":"integer[]"}],"return":{"type":"integer[]"}}}