{"id":261,"fid":261,"name":"Graph Valid Tree","slug":"graph-valid-tree","link":"https://leetcode.com/problems/graph-valid-tree/description/","percent":38.937793107950775,"level":"Medium","category":"algorithms","totalAC":"71.6K","totalSubmit":"183.8K","desc":"Given n nodes labeled from 0 to n-1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.\r\n\r\nExample 1:\r\n\r\n\r\nInput: n = 5, and edges = [[0,1], [0,2], [0,3], [1,4]]\r\nOutput: true\r\n\r\nExample 2:\r\n\r\n\r\nInput: n = 5, and edges = [[0,1], [1,2], [2,3], [1,3], [1,4]]\r\nOutput: false\r\n\r\nNote: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0,1] is the same as [1,0] and thus will not appear together in edges.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool validTree(int n, vector<pair<int, int>>& edges) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean validTree(int n, int[][] edges) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def validTree(self, n, edges):\r\n        \"\"\"\r\n        :type n: int\r\n        :type edges: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def validTree(self, n, edges):\r\n        \"\"\"\r\n        :type n: int\r\n        :type edges: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool validTree(int n, int** edges, int edgesRowSize, int edgesColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool ValidTree(int n, int[,] edges) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @param {number[][]} edges\r\n * @return {boolean}\r\n */\r\nvar validTree = function(n, edges) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @param {Integer[][]} edges\r\n# @return {Boolean}\r\ndef valid_tree(n, edges)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func validTree(_ n: Int, _ edges: [[Int]]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func validTree(n int, edges [][]int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def validTree(n: Int, edges: Array[Array[Int]]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun validTree(n: Int, edges: Array<IntArray>): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"5\n[[0,1],[0,2],[0,3],[1,4]]","testable":true,"templateMeta":{"name":"validTree","params":[{"name":"n","type":"integer"},{"name":"edges","type":"pair<integer,integer>[]"}],"return":{"type":"boolean"}}}