{"id":912,"fid":528,"name":"Random Pick with Weight","slug":"random-pick-with-weight","link":"https://leetcode.com/problems/random-pick-with-weight/description/","percent":41.68442882654531,"level":"Medium","category":"algorithms","totalAC":"7.2K","totalSubmit":"17.4K","desc":"Given an array w of positive integers, where w[i] describes the weight of index i, write a function pickIndex which randomly picks an index in proportion to its weight.\r\n\r\nNote:\r\n\r\n\r\n\t1 <= w.length <= 10000\r\n\t1 <= w[i] <= 10^5\r\n\tpickIndex will be called at most 10000 times.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pickIndex\"]\r\n[[[1]],[]]\r\nOutput: [null,0]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\r\n[[[1,3]],[],[],[],[],[]]\r\nOutput: [null,0,1,1,1,0]\r\n\r\n\r\nExplanation of Input Syntax:\r\n\r\nThe input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array w. pickIndex has no arguments. Arguments are always wrapped with a list, even if there aren't any.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    Solution(vector<int> w) {\r\n        \r\n    }\r\n    \r\n    int pickIndex() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(w);\r\n * int param_1 = obj.pickIndex();\r\n */"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n\r\n    public Solution(int[] w) {\r\n        \r\n    }\r\n    \r\n    public int pickIndex() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(w);\r\n * int param_1 = obj.pickIndex();\r\n */"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n\r\n    def __init__(self, w):\r\n        \"\"\"\r\n        :type w: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def pickIndex(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(w)\r\n# param_1 = obj.pickIndex()"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n\r\n    def __init__(self, w):\r\n        \"\"\"\r\n        :type w: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def pickIndex(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(w)\r\n# param_1 = obj.pickIndex()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Solution;\r\n\r\nSolution* solutionCreate(int* w, int wSize) {\r\n    \r\n}\r\n\r\nint solutionPickIndex(Solution* obj) {\r\n    \r\n}\r\n\r\nvoid solutionFree(Solution* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Solution struct will be instantiated and called as such:\r\n * struct Solution* obj = solutionCreate(w, wSize);\r\n * int param_1 = solutionPickIndex(obj);\r\n * solutionFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n\r\n    public Solution(int[] w) {\r\n        \r\n    }\r\n    \r\n    public int PickIndex() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(w);\r\n * int param_1 = obj.PickIndex();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} w\r\n */\r\nvar Solution = function(w) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nSolution.prototype.pickIndex = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(w)\r\n * var param_1 = obj.pickIndex()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Solution\r\n\r\n=begin\r\n    :type w: Integer[]\r\n=end\r\n    def initialize(w)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def pick_index()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(w)\r\n# param_1 = obj.pick_index()"},{"value":"swift","text":"Swift","defaultCode":"\nclass Solution {\n\n    init(_ w: [Int]) {\n        \n    }\n    \n    func pickIndex() -> Int {\n      \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(w)\n * let ret_1: Int = obj.pickIndex()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Solution struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(w []int) Solution {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Solution) PickIndex() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(w);\r\n * param_1 := obj.PickIndex();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Solution(_w: Array[Int]) {\r\n\r\n    def pickIndex(): Int = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = new Solution(w)\r\n * var param_1 = obj.pickIndex()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution(w: IntArray) {\r\n\r\n    fun pickIndex(): Int {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Solution(w)\r\n * var param_1 = obj.pickIndex()\r\n */"}],"testcase":"[\"Solution\", \"pickIndex\"]\n[[[1]], []]","testable":true,"templateMeta":{"classname":"Solution","maxbytesperline":200000,"constructor":{"params":[{"name":"w","type":"integer[]"},{"name":"wSize","type":"integer","lang":"c","value":"size_1"}]},"methods":[{"name":"pickIndex","params":[],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}