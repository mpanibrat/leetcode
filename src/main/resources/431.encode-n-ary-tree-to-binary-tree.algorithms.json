{"id":771,"fid":431,"name":"Encode N-ary Tree to Binary Tree","slug":"encode-n-ary-tree-to-binary-tree","link":"https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree/description/","percent":53.91737891737892,"level":"Hard","category":"algorithms","totalAC":"757","totalSubmit":"1.4K","desc":"Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.\r\n\r\nFor example, you may encode the following 3-ary tree to a binary tree in this way:\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\nNote that the above is just an example which might or might not work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tN is in the range of  [1, 1000]\r\n\tDo not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\npublic:\r\n    int val = NULL;\r\n    vector<Node*> children;\r\n\r\n    Node() {}\r\n\r\n    Node(int _val, vector<Node*> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\n/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Codec {\r\npublic:\r\n\r\n    // Encodes an n-ary tree to a binary tree.\r\n    TreeNode* encode(Node* root) {\r\n        \r\n    }\r\n\r\n    // Decodes your binary tree to an n-ary tree.\r\n    Node* decode(TreeNode* root) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.decode(codec.encode(root));"},{"value":"java","text":"Java","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public int val;\r\n    public List<Node> children;\r\n\r\n    public Node() {}\r\n\r\n    public Node(int _val,List<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Codec {\r\n\r\n    // Encodes an n-ary tree to a binary tree.\r\n    public TreeNode encode(Node root) {\r\n        \r\n    }\r\n\r\n    // Decodes your binary tree to an n-ary tree.\r\n    public Node decode(TreeNode root) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(root));"},{"value":"python","text":"Python","defaultCode":"\"\"\"\r\n# Definition for a Node.\r\nclass Node(object):\r\n    def __init__(self, val, children):\r\n        self.val = val\r\n        self.children = children\r\n\"\"\"\r\n\"\"\"\r\n# Definition for a binary tree node.\r\nclass TreeNode(object):\r\n    def __init__(self, x):\r\n        self.val = x\r\n        self.left = None\r\n        self.right = None\r\n\"\"\"\r\nclass Codec:\r\n\r\n    def encode(self, root):\r\n        \"\"\"Encodes an n-ary tree to a binary tree.\r\n        \r\n        :type root: Node\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        \r\n\r\n    def decode(self, data):\r\n        \"\"\"Decodes your binary tree to an n-ary tree.\r\n        \r\n        :type data: TreeNode\r\n        :rtype: Node\r\n        \"\"\"\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.decode(codec.encode(root))"},{"value":"csharp","text":"C#","defaultCode":"/*\r\n// Definition for a Node.\r\npublic class Node {\r\n    public int val;\r\n    public IList<Node> children;\r\n\r\n    public Node(){}\r\n    public Node(int _val,IList<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n}\r\n*/\r\n/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Codec {\r\n\r\n    // Encodes an n-ary tree to a binary tree.\r\n    public TreeNode encode(Node root) {\r\n        \r\n    }\r\n\r\n    // Decodes your binary tree to an n-ary tree.\r\n    public Node decode(TreeNode root) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(root));"}],"testcase":"{\"$id\":\"1\",\"children\":[{\"$id\":\"2\",\"children\":[{\"$id\":\"5\",\"children\":[],\"val\":5},{\"$id\":\"6\",\"children\":[],\"val\":6}],\"val\":3},{\"$id\":\"3\",\"children\":[],\"val\":2},{\"$id\":\"4\",\"children\":[],\"val\":4}],\"val\":1}","testable":true,"templateMeta":{"name":"CodecDriver","params":[{"name":"root","type":"Node"}],"return":{"type":"Node"},"generatedriver":false,"generatedefinition":false}}