{"id":211,"fid":211,"name":"Add and Search Word - Data structure design","slug":"add-and-search-word-data-structure-design","link":"https://leetcode.com/problems/add-and-search-word-data-structure-design/description/","percent":27.589224586992113,"level":"Medium","category":"algorithms","totalAC":"92.7K","totalSubmit":"335.9K","desc":"Design a data structure that supports the following two operations:\r\n\r\n\r\nvoid addWord(word)\r\nbool search(word)\r\n\r\n\r\nsearch(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.\r\n\r\nExample:\r\n\r\n\r\naddWord(\"bad\")\r\naddWord(\"dad\")\r\naddWord(\"mad\")\r\nsearch(\"pad\") -> false\r\nsearch(\"bad\") -> true\r\nsearch(\".ad\") -> true\r\nsearch(\"b..\") -> true\r\n\r\n\r\nNote:\r\nYou may assume that all words are consist of lowercase letters a-z.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class WordDictionary {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    void addWord(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    bool search(string word) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.addWord(word);\r\n * bool param_2 = obj.search(word);\r\n */"},{"value":"java","text":"Java","defaultCode":"class WordDictionary {\r\n\r\n    /** Initialize your data structure here. */\r\n    public WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    public void addWord(String word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    public boolean search(String word) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.addWord(word);\r\n * boolean param_2 = obj.search(word);\r\n */"},{"value":"python","text":"Python","defaultCode":"class WordDictionary(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def addWord(self, word):\r\n        \"\"\"\r\n        Adds a word into the data structure.\r\n        :type word: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your WordDictionary object will be instantiated and called as such:\r\n# obj = WordDictionary()\r\n# obj.addWord(word)\r\n# param_2 = obj.search(word)"},{"value":"python3","text":"Python3","defaultCode":"class WordDictionary:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def addWord(self, word):\r\n        \"\"\"\r\n        Adds a word into the data structure.\r\n        :type word: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your WordDictionary object will be instantiated and called as such:\r\n# obj = WordDictionary()\r\n# obj.addWord(word)\r\n# param_2 = obj.search(word)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} WordDictionary;\r\n\r\n/** Initialize your data structure here. */\r\nWordDictionary* wordDictionaryCreate() {\r\n    \r\n}\r\n\r\n/** Adds a word into the data structure. */\r\nvoid wordDictionaryAddWord(WordDictionary* obj, char* word) {\r\n    \r\n}\r\n\r\n/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\nbool wordDictionarySearch(WordDictionary* obj, char* word) {\r\n    \r\n}\r\n\r\nvoid wordDictionaryFree(WordDictionary* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your WordDictionary struct will be instantiated and called as such:\r\n * struct WordDictionary* obj = wordDictionaryCreate();\r\n * wordDictionaryAddWord(obj, word);\r\n * bool param_2 = wordDictionarySearch(obj, word);\r\n * wordDictionaryFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class WordDictionary {\r\n\r\n    /** Initialize your data structure here. */\r\n    public WordDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Adds a word into the data structure. */\r\n    public void AddWord(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    public bool Search(string word) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * WordDictionary obj = new WordDictionary();\r\n * obj.AddWord(word);\r\n * bool param_2 = obj.Search(word);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar WordDictionary = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Adds a word into the data structure. \r\n * @param {string} word\r\n * @return {void}\r\n */\r\nWordDictionary.prototype.addWord = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. \r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nWordDictionary.prototype.search = function(word) {\r\n    \r\n};\r\n\r\n/** \r\n * Your WordDictionary object will be instantiated and called as such:\r\n * var obj = Object.create(WordDictionary).createNew()\r\n * obj.addWord(word)\r\n * var param_2 = obj.search(word)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class WordDictionary\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Adds a word into the data structure.\r\n    :type word: String\r\n    :rtype: Void\r\n=end\r\n    def add_word(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.\r\n    :type word: String\r\n    :rtype: Boolean\r\n=end\r\n    def search(word)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your WordDictionary object will be instantiated and called as such:\r\n# obj = WordDictionary.new()\r\n# obj.add_word(word)\r\n# param_2 = obj.search(word)"},{"value":"swift","text":"Swift","defaultCode":"\nclass WordDictionary {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Adds a word into the data structure. */\n    func addWord(_ word: String) {\n      \n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n    func search(_ word: String) -> Bool {\n      \n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * let obj = WordDictionary()\n * obj.addWord(word)\n * let ret_2: Bool = obj.search(word)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type WordDictionary struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() WordDictionary {\r\n    \r\n}\r\n\r\n\r\n/** Adds a word into the data structure. */\r\nfunc (this *WordDictionary) AddWord(word string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\nfunc (this *WordDictionary) Search(word string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.AddWord(word);\r\n * param_2 := obj.Search(word);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class WordDictionary() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Adds a word into the data structure. */\r\n    def addWord(word: String) {\r\n        \r\n    }\r\n\r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    def search(word: String): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * var obj = new WordDictionary()\r\n * obj.addWord(word)\r\n * var param_2 = obj.search(word)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class WordDictionary() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Adds a word into the data structure. */\r\n    fun addWord(word: String) {\r\n        \r\n    }\r\n\r\n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\r\n    fun search(word: String): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your WordDictionary object will be instantiated and called as such:\r\n * var obj = WordDictionary()\r\n * obj.addWord(word)\r\n * var param_2 = obj.search(word)\r\n */"}],"testcase":"[\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n[[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]","testable":true,"templateMeta":{"classname":"WordDictionary","maxbytesperline":400000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"addWord","params":[{"type":"string","name":"word"}],"return":{"type":"void"},"comment":"Adds a word into the data structure."},{"name":"search","params":[{"type":"string","name":"word"}],"return":{"type":"boolean"},"comment":"Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}