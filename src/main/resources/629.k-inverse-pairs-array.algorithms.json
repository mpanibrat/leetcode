{"id":629,"fid":629,"name":"K Inverse Pairs Array","slug":"k-inverse-pairs-array","link":"https://leetcode.com/problems/k-inverse-pairs-array/description/","percent":28.02556250832113,"level":"Hard","category":"algorithms","totalAC":"6.3K","totalSubmit":"22.5K","desc":"\r\nGiven two integers n and k, find how many different arrays consist of numbers from 1 to n such that there are exactly k inverse pairs. \r\n\r\n\r\nWe define an inverse pair as following:\r\nFor ith and jth element in the array, if i < j and a[i] > a[j] then it's an inverse pair; Otherwise, it's not.\r\n\r\n\r\n\r\nSince the answer may be very large, the answer should be modulo 109 + 7.\r\n\r\n\r\nExample 1:\r\n\r\nInput: n = 3, k = 0\r\nOutput: 1\r\nExplanation: \r\nOnly the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: n = 3, k = 1\r\nOutput: 2\r\nExplanation: \r\nThe array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe integer n is in the range [1, 1000] and k is in the range [0, 1000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int kInversePairs(int n, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int kInversePairs(int n, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def kInversePairs(self, n, k):\r\n        \"\"\"\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def kInversePairs(self, n, k):\r\n        \"\"\"\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int kInversePairs(int n, int k) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int KInversePairs(int n, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar kInversePairs = function(n, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef k_inverse_pairs(n, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func kInversePairs(_ n: Int, _ k: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func kInversePairs(n int, k int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def kInversePairs(n: Int, k: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun kInversePairs(n: Int, k: Int): Int {\n        \n    }\n}"}],"testcase":"3\n0","testable":true,"templateMeta":{"name":"kInversePairs","params":[{"name":"n","type":"integer"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}