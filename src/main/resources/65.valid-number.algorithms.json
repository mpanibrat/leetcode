{"id":65,"fid":65,"name":"Valid Number","slug":"valid-number","link":"https://leetcode.com/problems/valid-number/description/","percent":13.325831295207369,"level":"Hard","category":"algorithms","totalAC":"102.4K","totalSubmit":"768.7K","desc":"Validate if a given string can be interpreted as a decimal number.\r\n\r\nSome examples:\r\n\"0\" => true\r\n\" 0.1 \" => true\r\n\"abc\" => false\r\n\"1 a\" => false\r\n\"2e10\" => true\r\n\" -90e3   \" => true\r\n\" 1e\" => false\r\n\"e3\" => false\r\n\" 6e-1\" => true\r\n\" 99e2.5 \" => false\r\n\"53.5e93\" => true\r\n\" --6 \" => false\r\n\"-+3\" => false\r\n\"95a54e53\" => false\r\n\r\nNote: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one. However, here is a list of characters that can be in a valid decimal number:\r\n\r\n\r\n\tNumbers 0-9\r\n\tExponent - \"e\"\r\n\tPositive/negative sign - \"+\"/\"-\"\r\n\tDecimal point - \".\"\r\n\r\n\r\nOf course, the context of these characters also matters in the input.\r\n\r\nUpdate (2015-02-10):\r\nThe signature of the C++ function had been updated. If you still see your function signature accepts a const char * argument, please click the reload button to reset your code definition.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isNumber(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isNumber(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool isNumber(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsNumber(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {boolean}\n */\nvar isNumber = function(s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Boolean}\ndef is_number(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isNumber(_ s: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isNumber(s string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isNumber(s: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isNumber(s: String): Boolean {\n        \n    }\n}"}],"testcase":"\"0\"","testable":true,"templateMeta":{"name":"isNumber","params":[{"name":"s","type":"string"}],"return":{"type":"boolean"}}}