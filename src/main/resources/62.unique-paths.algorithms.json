{"id":62,"fid":62,"name":"Unique Paths","slug":"unique-paths","link":"https://leetcode.com/problems/unique-paths/description/","percent":44.89769308314164,"level":"Medium","category":"algorithms","totalAC":"230.7K","totalSubmit":"513.8K","desc":"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\r\n\r\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\r\n\r\nHow many possible unique paths are there?\r\n\r\n\r\nAbove is a 7 x 3 grid. How many possible unique paths are there?\r\n\r\nNote: m and n will be at most 100.\r\n\r\nExample 1:\r\n\r\n\r\nInput: m = 3, n = 2\r\nOutput: 3\r\nExplanation:\r\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\r\n1. Right -> Right -> Down\r\n2. Right -> Down -> Right\r\n3. Down -> Right -> Right\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: m = 7, n = 3\r\nOutput: 28\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int uniquePaths(int m, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int uniquePaths(int m, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def uniquePaths(self, m, n):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def uniquePaths(self, m, n):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int uniquePaths(int m, int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int UniquePaths(int m, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} m\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar uniquePaths = function(m, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} m\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef unique_paths(m, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func uniquePaths(_ m: Int, _ n: Int) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func uniquePaths(m int, n int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def uniquePaths(m: Int, n: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun uniquePaths(m: Int, n: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"3\n2","testable":true,"templateMeta":{"name":"uniquePaths","params":[{"name":"m","type":"integer"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}