{"id":209,"fid":209,"name":"Minimum Size Subarray Sum","slug":"minimum-size-subarray-sum","link":"https://leetcode.com/problems/minimum-size-subarray-sum/description/","percent":33.40824692992132,"level":"Medium","category":"algorithms","totalAC":"145.4K","totalSubmit":"435.2K","desc":"Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum ≥ s. If there isn't one, return 0 instead.\r\n\r\nExample: \r\n\r\n\r\nInput: s = 7, nums = [2,3,1,2,4,3]\r\nOutput: 2\r\nExplanation: the subarray [4,3] has the minimal length under the problem constraint.\r\n\r\nFollow up:\r\n\r\nIf you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minSubArrayLen(int s, vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minSubArrayLen(int s, int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minSubArrayLen(self, s, nums):\r\n        \"\"\"\r\n        :type s: int\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minSubArrayLen(self, s, nums):\r\n        \"\"\"\r\n        :type s: int\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minSubArrayLen(int s, int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinSubArrayLen(int s, int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} s\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar minSubArrayLen = function(s, nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} s\r\n# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef min_sub_array_len(s, nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minSubArrayLen(_ s: Int, _ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minSubArrayLen(s int, nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minSubArrayLen(s: Int, nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minSubArrayLen(s: Int, nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"7\n[2,3,1,2,4,3]","testable":true,"templateMeta":{"name":"minSubArrayLen","params":[{"name":"s","type":"integer"},{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}