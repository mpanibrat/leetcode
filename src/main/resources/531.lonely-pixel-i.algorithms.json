{"id":531,"fid":531,"name":"Lonely Pixel I","slug":"lonely-pixel-i","link":"https://leetcode.com/problems/lonely-pixel-i/description/","percent":56.537158796573024,"level":"Medium","category":"algorithms","totalAC":"14.2K","totalSubmit":"25.1K","desc":"Given a picture consisting of black and white pixels, find the number of black lonely pixels.\r\n\r\nThe picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. \r\n\r\nA black lonely pixel is character 'B' that located at a specific position where the same row and same column don't have any other black pixels.\r\n\r\nExample:\r\n\r\nInput: \r\n[['W', 'W', 'B'],\r\n ['W', 'B', 'W'],\r\n ['B', 'W', 'W']]\r\n\r\nOutput: 3\r\nExplanation: All the three 'B's are black lonely pixels.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe range of width and height of the input 2D array is [1,500].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findLonelyPixel(vector<vector<char>>& picture) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int findLonelyPixel(char[][] picture) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findLonelyPixel(self, picture):\r\n        \"\"\"\r\n        :type picture: List[List[str]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findLonelyPixel(self, picture):\r\n        \"\"\"\r\n        :type picture: List[List[str]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findLonelyPixel(char** picture, int pictureRowSize, int pictureColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindLonelyPixel(char[,] picture) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} picture\r\n * @return {number}\r\n */\r\nvar findLonelyPixel = function(picture) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} picture\r\n# @return {Integer}\r\ndef find_lonely_pixel(picture)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findLonelyPixel(_ picture: [[Character]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findLonelyPixel(picture [][]byte) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findLonelyPixel(picture: Array[Array[Char]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findLonelyPixel(picture: Array<CharArray>): Int {\n        \n    }\n}"}],"testcase":"[[\"W\",\"W\",\"B\"],[\"W\",\"B\",\"W\"],[\"B\",\"W\",\"W\"]]","testable":true,"templateMeta":{"name":"findLonelyPixel","params":[{"name":"picture","type":"character[][]"}],"return":{"type":"integer"}}}