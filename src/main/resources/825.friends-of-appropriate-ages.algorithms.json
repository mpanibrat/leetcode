{"id":852,"fid":825,"name":"Friends Of Appropriate Ages","slug":"friends-of-appropriate-ages","link":"https://leetcode.com/problems/friends-of-appropriate-ages/description/","percent":32.97798377752028,"level":"Medium","category":"algorithms","totalAC":"10K","totalSubmit":"30.2K","desc":"Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person. \r\n\r\nPerson A will NOT friend request person B (B != A) if any of the following conditions are true:\r\n\r\n\r\n\tage[B] <= 0.5 * age[A] + 7\r\n\tage[B] > age[A]\r\n\tage[B] > 100 && age[A] < 100\r\n\r\n\r\nOtherwise, A will friend request B.\r\n\r\nNote that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.\r\n\r\nHow many total friend requests are made?\r\n\r\nExample 1:\r\n\r\n\r\nInput: [16,16]\r\nOutput: 2\r\nExplanation: 2 people friend request each other.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [16,17,18]\r\nOutput: 2\r\nExplanation: Friend requests are made 17 -> 16, 18 -> 17.\r\n\r\nExample 3:\r\n\r\n\r\nInput: [20,30,100,110,120]\r\nOutput: \r\nExplanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\r\n\r\n\r\n \r\n\r\nNotes:\r\n\r\n\r\n\t1 <= ages.length <= 20000.\r\n\t1 <= ages[i] <= 120.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numFriendRequests(vector<int>& ages) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numFriendRequests(int[] ages) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numFriendRequests(self, ages):\n        \"\"\"\n        :type ages: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numFriendRequests(self, ages):\n        \"\"\"\n        :type ages: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numFriendRequests(int* ages, int agesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumFriendRequests(int[] ages) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} ages\n * @return {number}\n */\nvar numFriendRequests = function(ages) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} ages\n# @return {Integer}\ndef num_friend_requests(ages)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numFriendRequests(_ ages: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numFriendRequests(ages []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numFriendRequests(ages: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numFriendRequests(ages: IntArray): Int {\n        \n    }\n}"}],"testcase":"[16,16]","testable":true,"templateMeta":{"name":"numFriendRequests","params":[{"name":"ages","type":"integer[]"}],"return":{"type":"integer"}}}