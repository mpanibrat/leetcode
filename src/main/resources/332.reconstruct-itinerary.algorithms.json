{"id":332,"fid":332,"name":"Reconstruct Itinerary","slug":"reconstruct-itinerary","link":"https://leetcode.com/problems/reconstruct-itinerary/description/","percent":30.03969061673112,"level":"Medium","category":"algorithms","totalAC":"59K","totalSubmit":"196.5K","desc":"Given a list of airline tickets represented by pairs of departure and arrival airports [from, to], reconstruct the itinerary in order. All of the tickets belong to a man who departs from JFK. Thus, the itinerary must begin with JFK.\r\n\r\nNote:\r\n\r\n\r\n\tIf there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. For example, the itinerary [\"JFK\", \"LGA\"] has a smaller lexical order than [\"JFK\", \"LGB\"].\r\n\tAll airports are represented by three capital letters (IATA code).\r\n\tYou may assume all tickets form at least one valid itinerary.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[\"MUC\", \"LHR\"], [\"JFK\", \"MUC\"], [\"SFO\", \"SJC\"], [\"LHR\", \"SFO\"]]\r\nOutput: [\"JFK\", \"MUC\", \"LHR\", \"SFO\", \"SJC\"]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\r\nOutput: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\r\nExplanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"].\r\nÂ             But it is larger in lexical order.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> findItinerary(vector<pair<string, string>> tickets) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> findItinerary(String[][] tickets) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findItinerary(self, tickets):\r\n        \"\"\"\r\n        :type tickets: List[List[str]]\r\n        :rtype: List[str]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findItinerary(self, tickets):\r\n        \"\"\"\r\n        :type tickets: List[List[str]]\r\n        :rtype: List[str]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findItinerary(char*** tickets, int ticketsRowSize, int ticketsColSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> FindItinerary(string[,] tickets) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[][]} tickets\r\n * @return {string[]}\r\n */\r\nvar findItinerary = function(tickets) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {string[][]} tickets\r\n# @return {String[]}\r\ndef find_itinerary(tickets)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findItinerary(_ tickets: [[String]]) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findItinerary(tickets [][]string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findItinerary(tickets: Array[Array[String]]): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findItinerary(tickets: Array<Array<String>>): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"[[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]","testable":true,"templateMeta":{"name":"findItinerary","params":[{"name":"tickets","type":"pair<string,string>[]"}],"return":{"type":"list<string>"}}}