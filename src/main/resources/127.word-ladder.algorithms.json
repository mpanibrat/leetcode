{"id":127,"fid":127,"name":"Word Ladder","slug":"word-ladder","link":"https://leetcode.com/problems/word-ladder/description/","percent":21.537776331229175,"level":"Medium","category":"algorithms","totalAC":"201.2K","totalSubmit":"934K","desc":"Given two words (beginWord and endWord), and a dictionary's word list, find the length of shortest transformation sequence from beginWord to endWord, such that:\r\n\r\n\r\n\tOnly one letter can be changed at a time.\r\n\tEach transformed word must exist in the word list. Note that beginWord is not a transformed word.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tReturn 0 if there is no such transformation sequence.\r\n\tAll words have the same length.\r\n\tAll words contain only lowercase alphabetic characters.\r\n\tYou may assume no duplicates in the word list.\r\n\tYou may assume beginWord and endWord are non-empty and are not the same.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\nbeginWord = \"hit\",\r\nendWord = \"cog\",\r\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\r\n\r\nOutput: 5\r\n\r\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\r\nreturn its length 5.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\nbeginWord = \"hit\"\r\nendWord = \"cog\"\r\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\r\n\r\nOutput: 0\r\n\r\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def ladderLength(self, beginWord, endWord, wordList):\r\n        \"\"\"\r\n        :type beginWord: str\r\n        :type endWord: str\r\n        :type wordList: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def ladderLength(self, beginWord, endWord, wordList):\r\n        \"\"\"\r\n        :type beginWord: str\r\n        :type endWord: str\r\n        :type wordList: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int ladderLength(char* beginWord, char* endWord, char** wordList, int wordListSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} beginWord\r\n * @param {string} endWord\r\n * @param {string[]} wordList\r\n * @return {number}\r\n */\r\nvar ladderLength = function(beginWord, endWord, wordList) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} begin_word\r\n# @param {String} end_word\r\n# @param {String[]} word_list\r\n# @return {Integer}\r\ndef ladder_length(begin_word, end_word, word_list)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func ladderLength(_ beginWord: String, _ endWord: String, _ wordList: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func ladderLength(beginWord string, endWord string, wordList []string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def ladderLength(beginWord: String, endWord: String, wordList: List[String]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun ladderLength(beginWord: String, endWord: String, wordList: List<String>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"hit\"\n\"cog\"\n[\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]","testable":true,"templateMeta":{"name":"ladderLength","params":[{"name":"beginWord","type":"string"},{"name":"endWord","type":"string"},{"name":"wordList","type":"list<string>"}],"return":{"type":"integer"}}}