{"id":643,"fid":643,"name":"Maximum Average Subarray I","slug":"maximum-average-subarray-i","link":"https://leetcode.com/problems/maximum-average-subarray-i/description/","percent":38.084764731643226,"level":"Easy","category":"algorithms","totalAC":"39.1K","totalSubmit":"102.8K","desc":"\r\nGiven an array consisting of n integers, find the contiguous subarray of given length k that has the maximum average value. And you need to output the maximum average value.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,12,-5,-6,50,3], k = 4\r\nOutput: 12.75\r\nExplanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75\r\n\r\n\r\n\r\nNote:\r\n\r\n1 k n \r\nElements of the given array will be in the range [-10,000, 10,000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    double findMaxAverage(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findMaxAverage(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findMaxAverage(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: float\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"double findMaxAverage(int* nums, int numsSize, int k) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public double FindMaxAverage(int[] nums, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar findMaxAverage = function(nums, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Float}\r\ndef find_max_average(nums, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMaxAverage(_ nums: [Int], _ k: Int) -> Double {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMaxAverage(nums []int, k int) float64 {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMaxAverage(nums: Array[Int], k: Int): Double = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findMaxAverage(nums: IntArray, k: Int): Double {\n        \n    }\n}"}],"testcase":"[1,12,-5,-6,50,3]\n4","testable":true,"templateMeta":{"name":"findMaxAverage","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"double"}}}