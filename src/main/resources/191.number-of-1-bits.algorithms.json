{"id":191,"fid":191,"name":"Number of 1 Bits","slug":"number-of-1-bits","link":"https://leetcode.com/problems/number-of-1-bits/description/","percent":40.918662251242985,"level":"Easy","category":"algorithms","totalAC":"223.3K","totalSubmit":"545.7K","desc":"Write a function that takes an unsigned integer and returns the number of '1'Â bits it has (also known as the Hamming weight).\r\n\r\nExample 1:\r\n\r\n\r\nInput: 11\r\nOutput: 3\r\nExplanation: Integer 11 has binary representation 00000000000000000000000000001011 \r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: 128\r\nOutput: 1\r\nExplanation: Integer 128 has binary representation 00000000000000000000000010000000\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int hammingWeight(uint32_t n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"public class Solution {\r\n    // you need to treat n as an unsigned value\r\n    public int hammingWeight(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def hammingWeight(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int hammingWeight(uint32_t n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int HammingWeight(uint n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n - a positive integer\r\n * @return {number}\r\n */\r\nvar hammingWeight = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n, a positive integer\r\n# @return {Integer}\r\ndef hamming_weight(n)\r\n    \r\nend"}],"testcase":"           0 (00000000000000000000000000000000)","testable":false,"templateMeta":{"name":"hammingWeight","params":[{"name":"n","type":"integer"}],"return":{"type":"integer"},"generatedriver":false,"generatedefinition":false}}