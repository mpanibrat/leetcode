{"id":249,"fid":249,"name":"Group Shifted Strings","slug":"group-shifted-strings","link":"https://leetcode.com/problems/group-shifted-strings/description/","percent":46.62780923730313,"level":"Medium","category":"algorithms","totalAC":"42.2K","totalSubmit":"90.4K","desc":"Given a string, we can \"shift\" each of its letter to its successive letter, for example: \"abc\" -> \"bcd\". We can keep \"shifting\" which forms the sequence:\r\n\r\n\r\n\"abc\" -> \"bcd\" -> ... -> \"xyz\"\r\n\r\nGiven a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.\r\n\r\nExample:\r\n\r\n\r\nInput: [\"abc\", \"bcd\", \"acef\", \"xyz\", \"az\", \"ba\", \"a\", \"z\"],\r\nOutput: \r\n[\r\n  [\"abc\",\"bcd\",\"xyz\"],\r\n  [\"az\",\"ba\"],\r\n  [\"acef\"],\r\n  [\"a\",\"z\"]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<string>> groupStrings(vector<string>& strings) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<String>> groupStrings(String[] strings) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def groupStrings(self, strings):\r\n        \"\"\"\r\n        :type strings: List[str]\r\n        :rtype: List[List[str]]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def groupStrings(self, strings):\r\n        \"\"\"\r\n        :type strings: List[str]\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** groupStrings(char** strings, int stringsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<string>> GroupStrings(string[] strings) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} strings\r\n * @return {string[][]}\r\n */\r\nvar groupStrings = function(strings) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} strings\r\n# @return {String[][]}\r\ndef group_strings(strings)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func groupStrings(_ strings: [String]) -> [[String]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func groupStrings(strings []string) [][]string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def groupStrings(strings: Array[String]): List[List[String]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun groupStrings(strings: Array<String>): List<List<String>> {\r\n        \r\n    }\r\n}"}],"testcase":"[\"abc\",\"bcd\",\"acef\",\"xyz\",\"az\",\"ba\",\"a\",\"z\"]","testable":true,"templateMeta":{"name":"groupStrings","params":[{"name":"strings","type":"string[]","dealloc":false}],"return":{"type":"list<list<string>>","dealloc":true}}}