{"id":135,"fid":135,"name":"Candy","slug":"candy","link":"https://leetcode.com/problems/candy/description/","percent":26.595920427000515,"level":"Hard","category":"algorithms","totalAC":"88.5K","totalSubmit":"332.9K","desc":"There are N children standing in a line. Each child is assigned a rating value.\r\n\r\nYou are giving candies to these children subjected to the following requirements:\r\n\r\n\r\n\tEach child must have at least one candy.\r\n\tChildren with a higher rating get more candies than their neighbors.\r\n\r\n\r\nWhat is the minimum candies you must give?\r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,0,2]\r\nOutput: 5\r\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,2,2]\r\nOutput: 4\r\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\r\n             The third child gets 1 candy because it satisfies the above two conditions.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int candy(vector<int>& ratings) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int candy(int[] ratings) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def candy(self, ratings):\r\n        \"\"\"\r\n        :type ratings: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def candy(self, ratings):\r\n        \"\"\"\r\n        :type ratings: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int candy(int* ratings, int ratingsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int Candy(int[] ratings) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} ratings\r\n * @return {number}\r\n */\r\nvar candy = function(ratings) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} ratings\r\n# @return {Integer}\r\ndef candy(ratings)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func candy(_ ratings: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func candy(ratings []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def candy(ratings: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun candy(ratings: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[1,0,2]","testable":true,"templateMeta":{"name":"candy","params":[{"name":"ratings","type":"integer[]"}],"return":{"type":"integer"}}}