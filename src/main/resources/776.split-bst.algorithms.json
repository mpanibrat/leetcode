{"id":791,"fid":776,"name":"Split BST","slug":"split-bst","link":"https://leetcode.com/problems/split-bst/description/","percent":50.62219649833599,"level":"Medium","category":"algorithms","totalAC":"7K","totalSubmit":"13.8K","desc":"Given a Binary Search Tree (BST) with root node root, and a target value V, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value.  It's not necessarily the case that the tree contains a node with value V.\r\n\r\nAdditionally, most of the structure of the original tree should remain.  Formally, for any child C with parent P in the original tree, if they are both in the same subtree after the split, then node C should still have the parent P.\r\n\r\nYou should output the root TreeNode of both subtrees after splitting, in any order.\r\n\r\nExample 1:\r\n\r\n\r\nInput: root = [4,2,6,1,3,5,7], V = 2\r\nOutput: [[2,1],[4,3,6,null,null,5,7]]\r\nExplanation:\r\nNote that root, output[0], and output[1] are TreeNode objects, not arrays.\r\n\r\nThe given tree [4,2,6,1,3,5,7] is represented by the following diagram:\r\n\r\n          4\r\n        /   \\\r\n      2      6\r\n     / \\    / \\\r\n    1   3  5   7\r\n\r\nwhile the diagrams for the outputs are:\r\n\r\n          4\r\n        /   \\\r\n      3      6      and    2\r\n            / \\           /\r\n           5   7         1\r\n\r\n\r\nNote:\r\n\r\n\r\n\tThe size of the BST will not exceed 50.\r\n\tThe BST is always valid and each node's value is different.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> splitBST(TreeNode* root, int V) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public TreeNode[] splitBST(TreeNode root, int V) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def splitBST(self, root, V):\n        \"\"\"\n        :type root: TreeNode\n        :type V: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def splitBST(self, root, V):\n        \"\"\"\n        :type root: TreeNode\n        :type V: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** splitBST(struct TreeNode* root, int V, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public TreeNode[] SplitBST(TreeNode root, int V) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @param {number} V\n * @return {TreeNode[]}\n */\nvar splitBST = function(root, V) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @param {Integer} v\n# @return {TreeNode[]}\ndef split_bst(root, v)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func splitBST(_ root: TreeNode?, _ V: Int) -> [TreeNode?] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc splitBST(root *TreeNode, V int) []*TreeNode {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def splitBST(root: TreeNode, V: Int): Array[TreeNode] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int = 0) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun splitBST(root: TreeNode?, V: Int): Array<TreeNode?> {\n        \n    }\n}"}],"testcase":"[4,2,6,1,3,5,7]\n2","testable":true,"templateMeta":{"name":"splitBST","params":[{"name":"root","type":"TreeNode"},{"name":"V","type":"integer"}],"return":{"type":"TreeNode[]"}}}