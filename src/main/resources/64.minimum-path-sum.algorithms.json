{"id":64,"fid":64,"name":"Minimum Path Sum","slug":"minimum-path-sum","link":"https://leetcode.com/problems/minimum-path-sum/description/","percent":43.600628333871185,"level":"Medium","category":"algorithms","totalAC":"183.7K","totalSubmit":"421.4K","desc":"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.\r\n\r\nNote: You can only move either down or right at any point in time.\r\n\r\nExample:\r\n\r\n\r\nInput:\r\n[\r\n  [1,3,1],\r\n  [1,5,1],\r\n  [4,2,1]\r\n]\r\nOutput: 7\r\nExplanation: Because the path 1→3→1→1→1 minimizes the sum.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minPathSum(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minPathSum(int[][] grid) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minPathSum(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minPathSum(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minPathSum(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinPathSum(int[,] grid) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar minPathSum = function(grid) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef min_path_sum(grid)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minPathSum(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minPathSum(grid [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minPathSum(grid: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minPathSum(grid: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,3,1],[1,5,1],[4,2,1]]","testable":true,"templateMeta":{"name":"minPathSum","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}