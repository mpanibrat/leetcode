{"id":881,"fid":851,"name":"Loud and Rich","slug":"loud-and-rich","link":"https://leetcode.com/problems/loud-and-rich/description/","percent":44.99557913351017,"level":"Medium","category":"algorithms","totalAC":"5.1K","totalSubmit":"11.3K","desc":"In a group of N people (labelled 0, 1, 2, ..., N-1), each person has different amounts of money, and different levels of quietness.\r\n\r\nFor convenience, we'll call the person with label x, simply \"person x\".\r\n\r\nWe'll say that richer[i] = [x, y] if person x definitely has more money than person y.  Note that richer may only be a subset of valid observations.\r\n\r\nAlso, we'll say quiet[x] = q if person x has quietness q.\r\n\r\nNow, return answer, where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]), among all people who definitely have equal to or more money than person x.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\r\nOutput: [5,5,2,5,4,5,6,7]\r\nExplanation: \r\nanswer[0] = 5.\r\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\r\nThe only person who is quieter (has lower quiet[x]) is person 7, but\r\nit isn't clear if they have more money than person 0.\r\n\r\nanswer[7] = 7.\r\nAmong all people that definitely have equal to or more money than person 7\r\n(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])\r\nis person 7.\r\n\r\nThe other answers can be filled out with similar reasoning.\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= quiet.length = N <= 500\r\n\t0 <= quiet[i] < N, all quiet[i] are different.\r\n\t0 <= richer.length <= N * (N-1) / 2\r\n\t0 <= richer[i][j] < N\r\n\tricher[i][0] != richer[i][1]\r\n\tricher[i]'s are all different.\r\n\tThe observations in richer are all logically consistent.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] loudAndRich(int[][] richer, int[] quiet) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def loudAndRich(self, richer, quiet):\n        \"\"\"\n        :type richer: List[List[int]]\n        :type quiet: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def loudAndRich(self, richer, quiet):\n        \"\"\"\n        :type richer: List[List[int]]\n        :type quiet: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* loudAndRich(int** richer, int richerRowSize, int *richerColSizes, int* quiet, int quietSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] LoudAndRich(int[][] richer, int[] quiet) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} richer\n * @param {number[]} quiet\n * @return {number[]}\n */\nvar loudAndRich = function(richer, quiet) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} richer\n# @param {Integer[]} quiet\n# @return {Integer[]}\ndef loud_and_rich(richer, quiet)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func loudAndRich(_ richer: [[Int]], _ quiet: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func loudAndRich(richer [][]int, quiet []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def loudAndRich(richer: Array[Array[Int]], quiet: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun loudAndRich(richer: Array<IntArray>, quiet: IntArray): IntArray {\n        \n    }\n}"}],"testcase":"[[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]]\n[3,2,5,4,6,1,7,0]","testable":true,"templateMeta":{"name":"loudAndRich","params":[{"name":"richer","type":"integer[][]"},{"name":"quiet","type":"integer[]"}],"return":{"type":"integer[]"}}}