{"id":942,"fid":906,"name":"Super Palindromes","slug":"super-palindromes","link":"https://leetcode.com/problems/super-palindromes/description/","percent":28.93854748603352,"level":"Hard","category":"algorithms","totalAC":"1.8K","totalSubmit":"6.3K","desc":"Let's say a positive integer is a superpalindrome if it is a palindrome, and it is also the square of a palindrome.\r\n\r\nNow, given two positive integers L and R (represented as strings), return the number of superpalindromes in the inclusive range [L, R].\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: L = \"4\", R = \"1000\"\r\nOutput: 4\r\nExplanation: 4, 9, 121, and 484 are superpalindromes.\r\nNote that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= len(L) <= 18\r\n\t1 <= len(R) <= 18\r\n\tL and R are strings representing integers in the range [1, 10^18).\r\n\tint(L) <= int(R)\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int superpalindromesInRange(string L, string R) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int superpalindromesInRange(String L, String R) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def superpalindromesInRange(self, L, R):\n        \"\"\"\n        :type L: str\n        :type R: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def superpalindromesInRange(self, L, R):\n        \"\"\"\n        :type L: str\n        :type R: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int superpalindromesInRange(char* L, char* R) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SuperpalindromesInRange(string L, string R) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} L\n * @param {string} R\n * @return {number}\n */\nvar superpalindromesInRange = function(L, R) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} l\n# @param {String} r\n# @return {Integer}\ndef superpalindromes_in_range(l, r)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func superpalindromesInRange(_ L: String, _ R: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func superpalindromesInRange(L string, R string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def superpalindromesInRange(L: String, R: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun superpalindromesInRange(L: String, R: String): Int {\n        \n    }\n}"}],"testcase":"\"4\"\n\"1000\"","testable":true,"templateMeta":{"name":"superpalindromesInRange","params":[{"name":"L","type":"string"},{"name":"R","type":"string"}],"return":{"type":"integer"}}}