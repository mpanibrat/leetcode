{"id":796,"fid":780,"name":"Reaching Points","slug":"reaching-points","link":"https://leetcode.com/problems/reaching-points/description/","percent":25.26254658084499,"level":"Hard","category":"algorithms","totalAC":"5.2K","totalSubmit":"20.7K","desc":"A move consists of taking a point (x, y) and transforming it to either (x, x+y) or (x+y, y).\r\n\r\nGiven a starting point (sx, sy) and a target point (tx, ty), return True if and only if a sequence of moves exists to transform the point (sx, sy) to (tx, ty). Otherwise, return False.\r\n\r\n\r\nExamples:\r\nInput: sx = 1, sy = 1, tx = 3, ty = 5\r\nOutput: True\r\nExplanation:\r\nOne series of moves that transforms the starting point to the target is:\r\n(1, 1) -> (1, 2)\r\n(1, 2) -> (3, 2)\r\n(3, 2) -> (3, 5)\r\n\r\nInput: sx = 1, sy = 1, tx = 2, ty = 2\r\nOutput: False\r\n\r\nInput: sx = 1, sy = 1, tx = 1, ty = 1\r\nOutput: True\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\tsx, sy, tx, ty will all be integers in the range [1, 10^9].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool reachingPoints(int sx, int sy, int tx, int ty) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean reachingPoints(int sx, int sy, int tx, int ty) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool reachingPoints(int sx, int sy, int tx, int ty) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool ReachingPoints(int sx, int sy, int tx, int ty) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} sx\n * @param {number} sy\n * @param {number} tx\n * @param {number} ty\n * @return {boolean}\n */\nvar reachingPoints = function(sx, sy, tx, ty) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} sx\n# @param {Integer} sy\n# @param {Integer} tx\n# @param {Integer} ty\n# @return {Boolean}\ndef reaching_points(sx, sy, tx, ty)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reachingPoints(_ sx: Int, _ sy: Int, _ tx: Int, _ ty: Int) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func reachingPoints(sx int, sy int, tx int, ty int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def reachingPoints(sx: Int, sy: Int, tx: Int, ty: Int): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun reachingPoints(sx: Int, sy: Int, tx: Int, ty: Int): Boolean {\n        \n    }\n}"}],"testcase":"9\n5\n12\n8","testable":true,"templateMeta":{"name":"reachingPoints","params":[{"name":"sx","type":"integer"},{"name":"sy","type":"integer"},{"name":"tx","type":"integer"},{"name":"ty","type":"integer"}],"return":{"type":"boolean"}}}