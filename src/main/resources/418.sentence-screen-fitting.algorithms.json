{"id":418,"fid":418,"name":"Sentence Screen Fitting","slug":"sentence-screen-fitting","link":"https://leetcode.com/problems/sentence-screen-fitting/description/","percent":29.19177406557588,"level":"Medium","category":"algorithms","totalAC":"27.2K","totalSubmit":"93.3K","desc":"Given a rows x cols screen and a sentence represented by a list of non-empty words, find how many times the given sentence can be fitted on the screen.\r\n\r\n\r\nNote:\r\n\r\nA word cannot be split into two lines.\r\nThe order of words in the sentence must remain unchanged.\r\nTwo consecutive words in a line must be separated by a single space.\r\nTotal words in the sentence won't exceed 100.\r\nLength of each word is greater than 0 and won't exceed 10.\r\n1 ≤ rows, cols ≤ 20,000.\r\n\r\n\r\n\r\n\r\nExample 1: \r\n\r\nInput:\r\nrows = 2, cols = 8, sentence = [\"hello\", \"world\"]\r\n\r\nOutput: \r\n1\r\n\r\nExplanation:\r\nhello---\r\nworld---\r\n\r\nThe character '-' signifies an empty space on the screen.\r\n\r\n\r\n\r\n\r\nExample 2: \r\n\r\nInput:\r\nrows = 3, cols = 6, sentence = [\"a\", \"bcd\", \"e\"]\r\n\r\nOutput: \r\n2\r\n\r\nExplanation:\r\na-bcd- \r\ne-a---\r\nbcd-e-\r\n\r\nThe character '-' signifies an empty space on the screen.\r\n\r\n\r\n\r\n\r\nExample 3: \r\n\r\nInput:\r\nrows = 4, cols = 5, sentence = [\"I\", \"had\", \"apple\", \"pie\"]\r\n\r\nOutput: \r\n1\r\n\r\nExplanation:\r\nI-had\r\napple\r\npie-I\r\nhad--\r\n\r\nThe character '-' signifies an empty space on the screen.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int wordsTyping(vector<string>& sentence, int rows, int cols) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int wordsTyping(String[] sentence, int rows, int cols) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def wordsTyping(self, sentence, rows, cols):\r\n        \"\"\"\r\n        :type sentence: List[str]\r\n        :type rows: int\r\n        :type cols: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def wordsTyping(self, sentence, rows, cols):\n        \"\"\"\n        :type sentence: List[str]\n        :type rows: int\n        :type cols: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int wordsTyping(char** sentence, int sentenceSize, int rows, int cols) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int WordsTyping(string[] sentence, int rows, int cols) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} sentence\r\n * @param {number} rows\r\n * @param {number} cols\r\n * @return {number}\r\n */\r\nvar wordsTyping = function(sentence, rows, cols) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} sentence\r\n# @param {Integer} rows\r\n# @param {Integer} cols\r\n# @return {Integer}\r\ndef words_typing(sentence, rows, cols)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordsTyping(_ sentence: [String], _ rows: Int, _ cols: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordsTyping(sentence []string, rows int, cols int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def wordsTyping(sentence: Array[String], rows: Int, cols: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun wordsTyping(sentence: Array<String>, rows: Int, cols: Int): Int {\n        \n    }\n}"}],"testcase":"[\"hello\",\"world\"]\n2\n8","testable":true,"templateMeta":{"name":"wordsTyping","params":[{"name":"sentence","type":"string[]"},{"name":"rows","type":"integer"},{"name":"cols","type":"integer"}],"return":{"type":"integer"}}}