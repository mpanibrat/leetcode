{"id":318,"fid":318,"name":"Maximum Product of Word Lengths","slug":"maximum-product-of-word-lengths","link":"https://leetcode.com/problems/maximum-product-of-word-lengths/description/","percent":46.887718855610075,"level":"Medium","category":"algorithms","totalAC":"70.6K","totalSubmit":"150.6K","desc":"Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\r\nOutput: 16 \r\nExplanation: The two words can be \"abcw\", \"xtfn\".\r\n\r\nExample 2:\r\n\r\n\r\nInput: [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\r\nOutput: 4 \r\nExplanation: The two words can be \"ab\", \"cd\".\r\n\r\nExample 3:\r\n\r\n\r\nInput: [\"a\",\"aa\",\"aaa\",\"aaaa\"]\r\nOutput: 0 \r\nExplanation: No such pair of words.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maxProduct(vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int maxProduct(String[] words) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxProduct(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maxProduct(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int maxProduct(char** words, int wordsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaxProduct(string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n * @return {number}\r\n */\r\nvar maxProduct = function(words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\r\n# @return {Integer}\r\ndef max_product(words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxProduct(_ words: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxProduct(words []string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maxProduct(words: Array[String]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maxProduct(words: Array<String>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]","testable":true,"templateMeta":{"name":"maxProduct","params":[{"name":"words","type":"string[]"}],"return":{"type":"integer"}}}