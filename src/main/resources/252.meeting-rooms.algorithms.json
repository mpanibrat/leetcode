{"id":252,"fid":252,"name":"Meeting Rooms","slug":"meeting-rooms","link":"https://leetcode.com/problems/meeting-rooms/description/","percent":50.16946499158546,"level":"Easy","category":"algorithms","totalAC":"64.1K","totalSubmit":"127.8K","desc":"Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[0,30],[5,10],[15,20]]\r\nOutput: false\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[7,10],[2,4]]\r\nOutput: true\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool canAttendMeetings(vector<Interval>& intervals) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() { start = 0; end = 0; }\r\n *     Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\nclass Solution {\r\n    public boolean canAttendMeetings(Interval[] intervals) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution(object):\r\n    def canAttendMeetings(self, intervals):\r\n        \"\"\"\r\n        :type intervals: List[Interval]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for an interval.\r\n# class Interval:\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution:\r\n    def canAttendMeetings(self, intervals):\r\n        \"\"\"\r\n        :type intervals: List[Interval]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n * };\r\n */\r\nbool canAttendMeetings(struct Interval* intervals, int intervalsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     public int start;\r\n *     public int end;\r\n *     public Interval() { start = 0; end = 0; }\r\n *     public Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool CanAttendMeetings(Interval[] intervals) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for an interval.\r\n * function Interval(start, end) {\r\n *     this.start = start;\r\n *     this.end = end;\r\n * }\r\n */\r\n/**\r\n * @param {Interval[]} intervals\r\n * @return {boolean}\r\n */\r\nvar canAttendMeetings = function(intervals) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for an interval.\r\n# class Interval\r\n#     attr_accessor :start, :end\r\n#     def initialize(s=0, e=0)\r\n#         @start = s\r\n#         @end = e\r\n#     end\r\n# end\r\n\r\n# @param {Interval[]} intervals\r\n# @return {Boolean}\r\ndef can_attend_meetings(intervals)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for an interval.\n * public class Interval {\n *   public var start: Int\n *   public var end: Int\n *   public init(_ start: Int, _ end: Int) {\n *     self.start = start\n *     self.end = end\n *   }\n * }\n */\nclass Solution {\n    func canAttendMeetings(_ intervals: [Interval]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canAttendMeetings(intervals []Interval) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for an interval.\r\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\r\n *   var start: Int = _start\r\n *   var end: Int = _end\r\n * }\r\n */\r\nobject Solution {\r\n    def canAttendMeetings(intervals: Array[Interval]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for an interval.\r\n * class Interval(\r\n *     var start: Int = 0,\r\n *     var end: Int = 0\r\n * )\r\n */\r\nclass Solution {\r\n    fun canAttendMeetings(intervals: Array<Interval>): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[[0,30],[5,10],[15,20]]","testable":true,"templateMeta":{"name":"canAttendMeetings","params":[{"name":"intervals","type":"Interval[]"}],"return":{"type":"boolean"}}}