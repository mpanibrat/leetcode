{"id":582,"fid":582,"name":"Kill Process","slug":"kill-process","link":"https://leetcode.com/problems/kill-process/description/","percent":53.386096132660754,"level":"Medium","category":"algorithms","totalAC":"18.4K","totalSubmit":"34.5K","desc":"Given n processes, each process has a unique PID (process id) and its PPID (parent process id). \r\n\r\nEach process only has one parent process, but may have one or more children processes. This is just like a tree structure.  Only one process has PPID that is 0, which means this process has no parent process. All the PIDs will be distinct positive integers.\r\n\r\nWe use two list of integers to represent a list of processes, where the first list contains PID for each process and the second list contains the corresponding PPID. \r\n \r\nNow given the two lists, and a PID representing a process you want to kill, return a list of PIDs of processes that will be killed in the end. You should assume that when a process is killed, all its children processes will be killed. No order is required for the final answer.\r\n\r\nExample 1:\r\n\r\nInput: \r\npid =  [1, 3, 10, 5]\r\nppid = [3, 0, 5, 3]\r\nkill = 5\r\nOutput: [5,10]\r\nExplanation: \r\n           3\r\n         /   \\\r\n        1     5\r\n             /\r\n            10\r\nKill 5 will also kill 10.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe given kill id is guaranteed to be one of the given PIDs.\r\nn >= 1.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> killProcess(vector<int>& pid, vector<int>& ppid, int kill) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> killProcess(List<Integer> pid, List<Integer> ppid, int kill) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def killProcess(self, pid, ppid, kill):\n        \"\"\"\n        :type pid: List[int]\n        :type ppid: List[int]\n        :type kill: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def killProcess(self, pid, ppid, kill):\n        \"\"\"\n        :type pid: List[int]\n        :type ppid: List[int]\n        :type kill: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* killProcess(int* pid, int pidSize, int* ppid, int ppidSize, int kill, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> KillProcess(IList<int> pid, IList<int> ppid, int kill) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} pid\n * @param {number[]} ppid\n * @param {number} kill\n * @return {number[]}\n */\nvar killProcess = function(pid, ppid, kill) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} pid\n# @param {Integer[]} ppid\n# @param {Integer} kill\n# @return {Integer[]}\ndef kill_process(pid, ppid, kill)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func killProcess(_ pid: [Int], _ ppid: [Int], _ kill: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func killProcess(pid []int, ppid []int, kill int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def killProcess(pid: List[Int], ppid: List[Int], kill: Int): List[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun killProcess(pid: List<Int>, ppid: List<Int>, kill: Int): List<Int> {\n        \n    }\n}"}],"testcase":"[1,3,10,5]\n[3,0,5,3]\n5","testable":true,"templateMeta":{"name":"killProcess","params":[{"name":"pid","type":"list<integer>"},{"name":"ppid","type":"list<integer>"},{"name":"kill","type":"integer"}],"return":{"type":"list<integer>"}}}