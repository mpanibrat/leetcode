{"id":676,"fid":676,"name":"Implement Magic Dictionary","slug":"implement-magic-dictionary","link":"https://leetcode.com/problems/implement-magic-dictionary/description/","percent":49.68531747085535,"level":"Medium","category":"algorithms","totalAC":"18.7K","totalSubmit":"37.7K","desc":"\r\nImplement a magic directory with buildDict, and search methods.\r\n\r\n\r\n\r\nFor the method buildDict, you'll be given a list of non-repetitive words to build a dictionary.\r\n\r\n\r\n\r\nFor the method search, you'll be given a word, and judge whether if you modify exactly one character into another character in this word, the modified word is in the dictionary you just built.\r\n\r\n\r\nExample 1:\r\n\r\nInput: buildDict([\"hello\", \"leetcode\"]), Output: Null\r\nInput: search(\"hello\"), Output: False\r\nInput: search(\"hhllo\"), Output: True\r\nInput: search(\"hell\"), Output: False\r\nInput: search(\"leetcoded\"), Output: False\r\n\r\n\r\n\r\nNote:\r\n\r\nYou may assume that all the inputs are consist of lowercase letters a-z.\r\nFor contest purpose, the test data is rather small by now. You could think about highly efficient algorithm after the contest.\r\nPlease remember to RESET your class variables declared in class MagicDictionary, as static/class variables are persisted across multiple test cases. Please see here for more details.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MagicDictionary {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MagicDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Build a dictionary through a list of words */\r\n    void buildDict(vector<string> dict) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\r\n    bool search(string word) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MagicDictionary object will be instantiated and called as such:\r\n * MagicDictionary obj = new MagicDictionary();\r\n * obj.buildDict(dict);\r\n * bool param_2 = obj.search(word);\r\n */"},{"value":"java","text":"Java","defaultCode":"class MagicDictionary {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MagicDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Build a dictionary through a list of words */\r\n    public void buildDict(String[] dict) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\r\n    public boolean search(String word) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MagicDictionary object will be instantiated and called as such:\r\n * MagicDictionary obj = new MagicDictionary();\r\n * obj.buildDict(dict);\r\n * boolean param_2 = obj.search(word);\r\n */"},{"value":"python","text":"Python","defaultCode":"class MagicDictionary(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def buildDict(self, dict):\r\n        \"\"\"\r\n        Build a dictionary through a list of words\r\n        :type dict: List[str]\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if there is any word in the trie that equals to the given word after modifying exactly one character\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MagicDictionary object will be instantiated and called as such:\r\n# obj = MagicDictionary()\r\n# obj.buildDict(dict)\r\n# param_2 = obj.search(word)"},{"value":"python3","text":"Python3","defaultCode":"class MagicDictionary:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def buildDict(self, dict):\r\n        \"\"\"\r\n        Build a dictionary through a list of words\r\n        :type dict: List[str]\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if there is any word in the trie that equals to the given word after modifying exactly one character\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MagicDictionary object will be instantiated and called as such:\r\n# obj = MagicDictionary()\r\n# obj.buildDict(dict)\r\n# param_2 = obj.search(word)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MagicDictionary;\r\n\r\n/** Initialize your data structure here. */\r\nMagicDictionary* magicDictionaryCreate() {\r\n    \r\n}\r\n\r\n/** Build a dictionary through a list of words */\r\nvoid magicDictionaryBuildDict(MagicDictionary* obj, char** dict) {\r\n    \r\n}\r\n\r\n/** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\r\nbool magicDictionarySearch(MagicDictionary* obj, char* word) {\r\n    \r\n}\r\n\r\nvoid magicDictionaryFree(MagicDictionary* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MagicDictionary struct will be instantiated and called as such:\r\n * struct MagicDictionary* obj = magicDictionaryCreate();\r\n * magicDictionaryBuildDict(obj, dict);\r\n * bool param_2 = magicDictionarySearch(obj, word);\r\n * magicDictionaryFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MagicDictionary {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MagicDictionary() {\r\n        \r\n    }\r\n    \r\n    /** Build a dictionary through a list of words */\r\n    public void BuildDict(string[] dict) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\r\n    public bool Search(string word) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MagicDictionary object will be instantiated and called as such:\r\n * MagicDictionary obj = new MagicDictionary();\r\n * obj.BuildDict(dict);\r\n * bool param_2 = obj.Search(word);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MagicDictionary = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Build a dictionary through a list of words \r\n * @param {string[]} dict\r\n * @return {void}\r\n */\r\nMagicDictionary.prototype.buildDict = function(dict) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if there is any word in the trie that equals to the given word after modifying exactly one character \r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nMagicDictionary.prototype.search = function(word) {\r\n    \r\n};\r\n\r\n/** \r\n * Your MagicDictionary object will be instantiated and called as such:\r\n * var obj = Object.create(MagicDictionary).createNew()\r\n * obj.buildDict(dict)\r\n * var param_2 = obj.search(word)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MagicDictionary\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Build a dictionary through a list of words\r\n    :type dict: String[]\r\n    :rtype: Void\r\n=end\r\n    def build_dict(dict)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if there is any word in the trie that equals to the given word after modifying exactly one character\r\n    :type word: String\r\n    :rtype: Boolean\r\n=end\r\n    def search(word)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MagicDictionary object will be instantiated and called as such:\r\n# obj = MagicDictionary.new()\r\n# obj.build_dict(dict)\r\n# param_2 = obj.search(word)"},{"value":"swift","text":"Swift","defaultCode":"\nclass MagicDictionary {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Build a dictionary through a list of words */\n    func buildDict(_ dict: [String]) {\n      \n    }\n    \n    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\n    func search(_ word: String) -> Bool {\n      \n    }\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * let obj = MagicDictionary()\n * obj.buildDict(dict)\n * let ret_2: Bool = obj.search(word)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MagicDictionary struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MagicDictionary {\r\n    \r\n}\r\n\r\n\r\n/** Build a dictionary through a list of words */\r\nfunc (this *MagicDictionary) BuildDict(dict []string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\r\nfunc (this *MagicDictionary) Search(word string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MagicDictionary object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.BuildDict(dict);\r\n * param_2 := obj.Search(word);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MagicDictionary() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Build a dictionary through a list of words */\n    def buildDict(dict: Array[String]) {\n        \n    }\n\n    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\n    def search(word: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = new MagicDictionary()\n * obj.buildDict(dict)\n * var param_2 = obj.search(word)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MagicDictionary() {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Build a dictionary through a list of words */\n    fun buildDict(dict: Array<String>) {\n        \n    }\n\n    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */\n    fun search(word: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your MagicDictionary object will be instantiated and called as such:\n * var obj = MagicDictionary()\n * obj.buildDict(dict)\n * var param_2 = obj.search(word)\n */"}],"testcase":"[\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n[[], [[\"hello\",\"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]","testable":true,"templateMeta":{"classname":"MagicDictionary","maxbytesperline":210000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"buildDict","params":[{"type":"string[]","name":"dict"}],"return":{"type":"void"},"comment":"Build a dictionary through a list of words"},{"name":"search","params":[{"type":"string","name":"word"}],"return":{"type":"boolean"},"comment":"Returns if there is any word in the trie that equals to the given word after modifying exactly one character"}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}