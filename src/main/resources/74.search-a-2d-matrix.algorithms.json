{"id":74,"fid":74,"name":"Search a 2D Matrix","slug":"search-a-2d-matrix","link":"https://leetcode.com/problems/search-a-2d-matrix/description/","percent":34.42068095931982,"level":"Medium","category":"algorithms","totalAC":"185.9K","totalSubmit":"540.1K","desc":"Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\r\n\r\n\r\n\tIntegers in each row are sorted from left to right.\r\n\tThe first integer of each row is greater than the last integer of the previous row.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\nmatrix = [\r\n  [1,   3,  5,  7],\r\n  [10, 11, 16, 20],\r\n  [23, 30, 34, 50]\r\n]\r\ntarget = 3\r\nOutput: true\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\nmatrix = [\r\n  [1,   3,  5,  7],\r\n  [10, 11, 16, 20],\r\n  [23, 30, 34, 50]\r\n]\r\ntarget = 13\r\nOutput: false\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool searchMatrix(vector<vector<int>>& matrix, int target) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean searchMatrix(int[][] matrix, int target) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def searchMatrix(self, matrix, target):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :type target: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def searchMatrix(self, matrix, target):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :type target: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool searchMatrix(int** matrix, int matrixRowSize, int matrixColSize, int target) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool SearchMatrix(int[,] matrix, int target) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} matrix\r\n * @param {number} target\r\n * @return {boolean}\r\n */\r\nvar searchMatrix = function(matrix, target) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\r\n# @param {Integer} target\r\n# @return {Boolean}\r\ndef search_matrix(matrix, target)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func searchMatrix(_ matrix: [[Int]], _ target: Int) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func searchMatrix(matrix [][]int, target int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def searchMatrix(matrix: Array[Array[Int]], target: Int): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun searchMatrix(matrix: Array<IntArray>, target: Int): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,3,5,7],[10,11,16,20],[23,30,34,50]]\n3","testable":true,"templateMeta":{"name":"searchMatrix","params":[{"name":"matrix","type":"integer[][]"},{"name":"target","type":"integer"}],"return":{"type":"boolean"}}}