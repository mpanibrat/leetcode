{"id":889,"fid":859,"name":"Buddy Strings","slug":"buddy-strings","link":"https://leetcode.com/problems/buddy-strings/description/","percent":26.634196359907715,"level":"Easy","category":"algorithms","totalAC":"13.5K","totalSubmit":"50.7K","desc":"Given two strings A and B of lowercase letters, return true if and only if we can swap two letters in A so that the result equals B.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\n\r\nInput: A = \"ab\", B = \"ba\"\r\nOutput: true\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: A = \"ab\", B = \"ab\"\r\nOutput: false\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: A = \"aa\", B = \"aa\"\r\nOutput: true\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: A = \"aaaaaaabc\", B = \"aaaaaaacb\"\r\nOutput: true\r\n\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: A = \"\", B = \"aa\"\r\nOutput: false\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t0 <= A.length <= 20000\r\n\t0 <= B.length <= 20000\r\n\tA and B consist only of lowercase letters.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool buddyStrings(string A, string B) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean buddyStrings(String A, String B) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def buddyStrings(self, A, B):\r\n        \"\"\"\r\n        :type A: str\r\n        :type B: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def buddyStrings(self, A, B):\r\n        \"\"\"\r\n        :type A: str\r\n        :type B: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool buddyStrings(char* A, char* B) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool BuddyStrings(string A, string B) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} A\r\n * @param {string} B\r\n * @return {boolean}\r\n */\r\nvar buddyStrings = function(A, B) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} a\r\n# @param {String} b\r\n# @return {Boolean}\r\ndef buddy_strings(a, b)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func buddyStrings(_ A: String, _ B: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func buddyStrings(A string, B string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def buddyStrings(A: String, B: String): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun buddyStrings(A: String, B: String): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"\"ab\"\n\"ba\"","testable":true,"templateMeta":{"name":"buddyStrings","params":[{"name":"A","type":"string"},{"name":"B","type":"string"}],"return":{"type":"boolean"}}}