{"id":354,"fid":354,"name":"Russian Doll Envelopes","slug":"russian-doll-envelopes","link":"https://leetcode.com/problems/russian-doll-envelopes/description/","percent":32.898219659886145,"level":"Hard","category":"algorithms","totalAC":"36.3K","totalSubmit":"110.3K","desc":"You have a number of envelopes with widths and heights given as a pair of integers (w, h). One envelope can fit into another if and only if both the width and height of one envelope is greater than the width and height of the other envelope.\r\n\r\nWhat is the maximum number of envelopes can you Russian doll? (put one inside other)\r\n\r\nNote:\r\nRotation is not allowed.\r\n\r\nExample:\r\n\r\n\r\n\r\nInput: [[5,4],[6,4],[6,7],[2,3]]\r\nOutput: 3 \r\nExplanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maxEnvelopes(vector<pair<int, int>>& envelopes) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int maxEnvelopes(int[][] envelopes) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxEnvelopes(self, envelopes):\r\n        \"\"\"\r\n        :type envelopes: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maxEnvelopes(self, envelopes):\r\n        \"\"\"\r\n        :type envelopes: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int maxEnvelopes(int** envelopes, int envelopesRowSize, int envelopesColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaxEnvelopes(int[,] envelopes) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} envelopes\r\n * @return {number}\r\n */\r\nvar maxEnvelopes = function(envelopes) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} envelopes\r\n# @return {Integer}\r\ndef max_envelopes(envelopes)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxEnvelopes(_ envelopes: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxEnvelopes(envelopes [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maxEnvelopes(envelopes: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maxEnvelopes(envelopes: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[5,4],[6,4],[6,7],[2,3]]","testable":true,"templateMeta":{"name":"maxEnvelopes","params":[{"name":"envelopes","type":"pair<integer,integer>[]"}],"return":{"type":"integer"}}}