{"id":164,"fid":164,"name":"Maximum Gap","slug":"maximum-gap","link":"https://leetcode.com/problems/maximum-gap/description/","percent":31.09239492160719,"level":"Hard","category":"algorithms","totalAC":"62.1K","totalSubmit":"199.8K","desc":"Given an unsorted array, find the maximum difference between the successive elements in its sorted form.\r\n\r\nReturn 0 if the array contains less than 2 elements.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [3,6,9,1]\r\nOutput: 3\r\nExplanation: The sorted form of the array is [1,3,6,9], either\r\nÂ             (3,6) or (6,9) has the maximum difference 3.\r\n\r\nExample 2:\r\n\r\n\r\nInput: [10]\r\nOutput: 0\r\nExplanation: The array contains less than 2 elements, therefore return 0.\r\n\r\nNote:\r\n\r\n\r\n\tYou may assume all elements in the array are non-negative integers and fit in the 32-bit signed integer range.\r\n\tTry to solve it in linear time/space.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maximumGap(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int maximumGap(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maximumGap(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maximumGap(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int maximumGap(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaximumGap(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maximumGap = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef maximum_gap(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maximumGap(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maximumGap(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maximumGap(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maximumGap(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[3,6,9,1]","testable":true,"templateMeta":{"name":"maximumGap","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}