{"id":393,"fid":393,"name":"UTF-8 Validation","slug":"utf-8-validation","link":"https://leetcode.com/problems/utf-8-validation/description/","percent":34.934906225059855,"level":"Medium","category":"algorithms","totalAC":"28K","totalSubmit":"80.2K","desc":"A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:\r\n\r\nFor 1-byte character, the first bit is a 0, followed by its unicode code.\r\nFor n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with most significant 2 bits being 10.\r\n\r\nThis is how the UTF-8 encoding would work:\r\n\r\n   Char. number range  |        UTF-8 octet sequence\r\n      (hexadecimal)    |              (binary)\r\n   --------------------+---------------------------------------------\r\n   0000 0000-0000 007F | 0xxxxxxx\r\n   0000 0080-0000 07FF | 110xxxxx 10xxxxxx\r\n   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\r\n   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\r\n\r\n\r\nGiven an array of integers representing the data, return whether it is a valid utf-8 encoding.\r\n\r\n\r\nNote:\r\nThe input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.\r\n\r\n\r\n\r\nExample 1:\r\n\r\ndata = [197, 130, 1], which represents the octet sequence: 11000101 10000010 00000001.\r\n\r\nReturn true.\r\nIt is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\ndata = [235, 140, 4], which represented the octet sequence: 11101011 10001100 00000100.\r\n\r\nReturn false.\r\nThe first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\r\nThe next byte is a continuation byte which starts with 10 and that's correct.\r\nBut the second continuation byte does not start with 10, so it is invalid.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool validUtf8(vector<int>& data) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean validUtf8(int[] data) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def validUtf8(self, data):\r\n        \"\"\"\r\n        :type data: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def validUtf8(self, data):\n        \"\"\"\n        :type data: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool validUtf8(int* data, int dataSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool ValidUtf8(int[] data) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} data\r\n * @return {boolean}\r\n */\r\nvar validUtf8 = function(data) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} data\r\n# @return {Boolean}\r\ndef valid_utf8(data)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func validUtf8(_ data: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func validUtf8(data []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def validUtf8(data: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun validUtf8(data: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[197,130,1]","testable":true,"templateMeta":{"name":"validUtf8","params":[{"name":"data","type":"integer[]"}],"return":{"type":"boolean"}}}