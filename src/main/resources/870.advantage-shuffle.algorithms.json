{"id":901,"fid":870,"name":"Advantage Shuffle","slug":"advantage-shuffle","link":"https://leetcode.com/problems/advantage-shuffle/description/","percent":39.96604825997333,"level":"Medium","category":"algorithms","totalAC":"6.6K","totalSubmit":"16.5K","desc":"Given two arrays A and B of equal size, the advantage of A with respect to B is the number of indices i for which A[i] > B[i].\r\n\r\nReturn any permutation of A that maximizes its advantage with respect to B.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: A = [2,7,11,15], B = [1,10,4,11]\r\nOutput: [2,11,7,15]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: A = [12,24,8,32], B = [13,25,32,11]\r\nOutput: [24,32,8,12]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length = B.length <= 10000\r\n\t0 <= A[i] <= 10^9\r\n\t0 <= B[i] <= 10^9\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> advantageCount(vector<int>& A, vector<int>& B) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] advantageCount(int[] A, int[] B) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def advantageCount(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def advantageCount(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* advantageCount(int* A, int ASize, int* B, int BSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] AdvantageCount(int[] A, int[] B) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number[]}\n */\nvar advantageCount = function(A, B) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer[]}\ndef advantage_count(a, b)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func advantageCount(_ A: [Int], _ B: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func advantageCount(A []int, B []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def advantageCount(A: Array[Int], B: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun advantageCount(A: IntArray, B: IntArray): IntArray {\n        \n    }\n}"}],"testcase":"[2,7,11,15]\n[1,10,4,11]","testable":true,"templateMeta":{"name":"advantageCount","params":[{"name":"A","type":"integer[]"},{"name":"B","type":"integer[]"}],"return":{"type":"integer[]"}}}