{"id":904,"fid":872,"name":"Leaf-Similar Trees","slug":"leaf-similar-trees","link":"https://leetcode.com/problems/leaf-similar-trees/description/","percent":60.51724137931034,"level":"Easy","category":"algorithms","totalAC":"21.8K","totalSubmit":"36K","desc":"Consider all the leaves of a binary tree.  From left to right order, the values of those leaves form a leaf value sequence.\r\n\r\n\r\n\r\nFor example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\r\n\r\nTwo binary trees are considered leaf-similar if their leaf value sequence is the same.\r\n\r\nReturn true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tBoth of the given trees will have between 1 and 100 nodes.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def leafSimilar(self, root1, root2):\r\n        \"\"\"\r\n        :type root1: TreeNode\r\n        :type root2: TreeNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def leafSimilar(self, root1, root2):\r\n        \"\"\"\r\n        :type root1: TreeNode\r\n        :type root2: TreeNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool leafSimilar(struct TreeNode* root1, struct TreeNode* root2) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool LeafSimilar(TreeNode root1, TreeNode root2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root1\r\n * @param {TreeNode} root2\r\n * @return {boolean}\r\n */\r\nvar leafSimilar = function(root1, root2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root1\r\n# @param {TreeNode} root2\r\n# @return {Boolean}\r\ndef leaf_similar(root1, root2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func leafSimilar(_ root1: TreeNode?, _ root2: TreeNode?) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc leafSimilar(root1 *TreeNode, root2 *TreeNode) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def leafSimilar(root1: TreeNode, root2: TreeNode): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun leafSimilar(root1: TreeNode?, root2: TreeNode?): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[3,5,1,6,2,9,8,null,null,7,4]\n[3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]","testable":true,"templateMeta":{"name":"leafSimilar","params":[{"name":"root1","type":"TreeNode"},{"name":"root2","type":"TreeNode"}],"return":{"type":"boolean"}}}