{"id":711,"fid":711,"name":"Number of Distinct Islands II","slug":"number-of-distinct-islands-ii","link":"https://leetcode.com/problems/number-of-distinct-islands-ii/description/","percent":43.72437716808578,"level":"Hard","category":"algorithms","totalAC":"2.8K","totalSubmit":"6.3K","desc":"Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.\r\n\r\nCount the number of distinct islands.  An island is considered to be the same as another if they have the same shape, or have the same shape after rotation (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).\r\n\r\nExample 1:\r\n\r\n11000\r\n10000\r\n00001\r\n00011\r\n\r\nGiven the above grid map, return 1.\r\n\r\nNotice that:\r\n\r\n11\r\n1\r\n\r\nand\r\n\r\n 1\r\n11\r\n\r\nare considered same island shapes. Because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.\r\n\r\n\r\nExample 2:\r\n\r\n11100\r\n10001\r\n01001\r\n01110\r\nGiven the above grid map, return 2.\r\n\r\nHere are the two distinct islands:\r\n\r\n111\r\n1\r\n\r\nand\r\n\r\n1\r\n1\r\n\r\n\r\nNotice that:\r\n\r\n111\r\n1\r\n\r\nand\r\n\r\n1\r\n111\r\n\r\nare considered same island shapes. Because if we flip the first array in the up/down direction, then they have the same shapes.\r\n\r\n\r\nNote:\r\nThe length of each dimension in the given grid does not exceed 50.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int numDistinctIslands2(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int numDistinctIslands2(int[][] grid) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def numDistinctIslands2(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def numDistinctIslands2(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int numDistinctIslands2(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int NumDistinctIslands2(int[,] grid) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar numDistinctIslands2 = function(grid) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef num_distinct_islands2(grid)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numDistinctIslands2(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numDistinctIslands2(grid [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numDistinctIslands2(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numDistinctIslands2(grid: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[1,1,0,0,0],[1,0,0,0,0],[0,0,0,0,1],[0,0,0,1,1]]","testable":true,"templateMeta":{"name":"numDistinctIslands2","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}