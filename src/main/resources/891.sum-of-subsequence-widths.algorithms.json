{"id":927,"fid":891,"name":"Sum of Subsequence Widths","slug":"sum-of-subsequence-widths","link":"https://leetcode.com/problems/sum-of-subsequence-widths/description/","percent":25.59075792053212,"level":"Hard","category":"algorithms","totalAC":"2.9K","totalSubmit":"11.4K","desc":"Given an array of integers A, consider all non-empty subsequences of A.\r\n\r\nFor any sequence S, let the width of S be the difference between the maximum and minimum element of S.\r\n\r\nReturn the sum of the widths of all subsequences of A. \r\n\r\nAs the answer may be very large, return the answer modulo 10^9 + 7.\r\n\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [2,1,3]\r\nOutput: 6\r\nExplanation:\r\nSubsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\r\nThe corresponding widths are 0, 0, 0, 1, 1, 2, 2.\r\nThe sum of these widths is 6.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 20000\r\n\t1 <= A[i] <= 20000\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int sumSubseqWidths(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int sumSubseqWidths(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def sumSubseqWidths(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sumSubseqWidths(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int sumSubseqWidths(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SumSubseqWidths(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar sumSubseqWidths = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer}\ndef sum_subseq_widths(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sumSubseqWidths(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func sumSubseqWidths(A []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sumSubseqWidths(A: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sumSubseqWidths(A: IntArray): Int {\n        \n    }\n}"}],"testcase":"[2,1,3]","testable":true,"templateMeta":{"name":"sumSubseqWidths","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}