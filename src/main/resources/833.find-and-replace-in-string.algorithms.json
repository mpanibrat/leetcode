{"id":862,"fid":833,"name":"Find And Replace in String","slug":"find-and-replace-in-string","link":"https://leetcode.com/problems/find-and-replace-in-string/description/","percent":41.70106556590189,"level":"Medium","category":"algorithms","totalAC":"8.7K","totalSubmit":"20.8K","desc":"To some string S, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).\r\n\r\nEach replacement operation has 3 parameters: a starting index i, a source word x and a target word y.  The rule is that if x starts at position i in the original string S, then we will replace that occurrence of x with y.  If not, we do nothing.\r\n\r\nFor example, if we have S = \"abcd\" and we have some replacement operation i = 2, x = \"cd\", y = \"ffff\", then because \"cd\" starts at position 2 in the original string S, we will replace it with \"ffff\".\r\n\r\nUsing another example on S = \"abcd\", if we have both the replacement operation i = 0, x = \"ab\", y = \"eee\", as well as another replacement operation i = 2, x = \"ec\", y = \"ffff\", this second operation does nothing because in the original string S[2] = 'c', which doesn't match x[0] = 'e'.\r\n\r\nAll these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, S = \"abc\", indexes = [0, 1], sources = [\"ab\",\"bc\"] is not a valid test case.\r\n\r\nExample 1:\r\n\r\n\r\nInput: S = \"abcd\", indexes = [0,2], sources = [\"a\",\"cd\"], targets = [\"eee\",\"ffff\"]\r\nOutput: \"eeebffff\"\r\nExplanation: \"a\" starts at index 0 in S, so it's replaced by \"eee\".\r\n\"cd\" starts at index 2 in S, so it's replaced by \"ffff\".\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: S = \"abcd\", indexes = [0,2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\r\nOutput: \"eeecd\"\r\nExplanation: \"ab\" starts at index 0 in S, so it's replaced by \"eee\". \r\n\"ec\" doesn't starts at index 2 in the original S, so we do nothing.\r\n\r\n\r\nNotes:\r\n\r\n\r\n\t0 <= indexes.length = sources.length = targets.length <= 100\r\n\t0 < indexes[i] < S.length <= 1000\r\n\tAll characters in given inputs are lowercase letters.\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string findReplaceString(string S, vector<int>& indexes, vector<string>& sources, vector<string>& targets) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String findReplaceString(String S, int[] indexes, String[] sources, String[] targets) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findReplaceString(self, S, indexes, sources, targets):\n        \"\"\"\n        :type S: str\n        :type indexes: List[int]\n        :type sources: List[str]\n        :type targets: List[str]\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findReplaceString(self, S, indexes, sources, targets):\n        \"\"\"\n        :type S: str\n        :type indexes: List[int]\n        :type sources: List[str]\n        :type targets: List[str]\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* findReplaceString(char* S, int* indexes, int indexesSize, char** sources, int sourcesSize, char** targets, int targetsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string FindReplaceString(string S, int[] indexes, string[] sources, string[] targets) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @param {number[]} indexes\n * @param {string[]} sources\n * @param {string[]} targets\n * @return {string}\n */\nvar findReplaceString = function(S, indexes, sources, targets) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer[]} indexes\n# @param {String[]} sources\n# @param {String[]} targets\n# @return {String}\ndef find_replace_string(s, indexes, sources, targets)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findReplaceString(_ S: String, _ indexes: [Int], _ sources: [String], _ targets: [String]) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findReplaceString(S string, indexes []int, sources []string, targets []string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findReplaceString(S: String, indexes: Array[Int], sources: Array[String], targets: Array[String]): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findReplaceString(S: String, indexes: IntArray, sources: Array<String>, targets: Array<String>): String {\n        \n    }\n}"}],"testcase":"\"abcd\"\n[0, 2]\n[\"a\", \"cd\"]\n[\"eee\", \"ffff\"]","testable":true,"templateMeta":{"name":"findReplaceString","params":[{"name":"S","type":"string"},{"name":"indexes","type":"integer[]"},{"name":"sources","type":"string[]"},{"name":"targets","type":"string[]"}],"return":{"type":"string"}}}