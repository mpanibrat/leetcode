{"id":407,"fid":407,"name":"Trapping Rain Water II","slug":"trapping-rain-water-ii","link":"https://leetcode.com/problems/trapping-rain-water-ii/description/","percent":38.08000848146447,"level":"Hard","category":"algorithms","totalAC":"21.6K","totalSubmit":"56.6K","desc":"Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.\r\n\r\n \r\n\r\nNote:\r\n\r\nBoth m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\nGiven the following 3x6 height map:\r\n[\r\n  [1,4,3,1,3,2],\r\n  [3,2,1,3,2,4],\r\n  [2,3,3,2,3,1]\r\n]\r\n\r\nReturn 4.\r\n\r\n\r\n\r\n\r\nThe above image represents the elevation map [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] before the rain.\r\n\r\n \r\n\r\n\r\n\r\nAfter the rain, water is trapped between the blocks. The total volume of water trapped is 4.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int trapRainWater(vector<vector<int>>& heightMap) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int trapRainWater(int[][] heightMap) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def trapRainWater(self, heightMap):\r\n        \"\"\"\r\n        :type heightMap: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def trapRainWater(self, heightMap):\r\n        \"\"\"\r\n        :type heightMap: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int trapRainWater(int** heightMap, int heightMapRowSize, int heightMapColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int TrapRainWater(int[,] heightMap) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} heightMap\r\n * @return {number}\r\n */\r\nvar trapRainWater = function(heightMap) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} height_map\r\n# @return {Integer}\r\ndef trap_rain_water(height_map)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func trapRainWater(_ heightMap: [[Int]]) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func trapRainWater(heightMap [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def trapRainWater(heightMap: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun trapRainWater(heightMap: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]","testable":true,"templateMeta":{"name":"trapRainWater","params":[{"name":"heightMap","type":"integer[][]"}],"return":{"type":"integer"}}}