{"id":133,"fid":133,"name":"Clone Graph","slug":"clone-graph","link":"https://leetcode.com/problems/clone-graph/description/","percent":25.078335973819126,"level":"Medium","category":"algorithms","totalAC":"178.4K","totalSubmit":"711.4K","desc":"Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a label (int) and a list (List[UndirectedGraphNode]) of its neighbors. There is an edge between the given node and each of the nodes in its neighbors.\r\n\r\n\r\nOJ's undirected graph serialization (so you can understand error output):\r\n\r\nNodes are labeled uniquely.\r\nWe use # as a separator for each node, and , as a separator for node label and each neighbor of the node.\r\n\r\n \r\n\r\nAs an example, consider the serialized graph {0,1,2#1,2#2,2}.\r\n\r\nThe graph has a total of three nodes, and therefore contains three parts as separated by #.\r\n\r\n\r\n\tFirst node is labeled as 0. Connect node 0 to both nodes 1 and 2.\r\n\tSecond node is labeled as 1. Connect node 1 to node 2.\r\n\tThird node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.\r\n\r\n\r\n \r\n\r\nVisually, the graph looks like the following:\r\n\r\n\r\n       1\r\n      / \\\r\n     /   \\\r\n    0 --- 2\r\n         / \\\r\n         \\_/\r\n\r\n\r\nNote: The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for undirected graph.\r\n * class UndirectedGraphNode {\r\n *     int label;\r\n *     List<UndirectedGraphNode> neighbors;\r\n *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }\r\n * };\r\n */\r\npublic class Solution {\r\n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a undirected graph node\r\n# class UndirectedGraphNode:\r\n#     def __init__(self, x):\r\n#         self.label = x\r\n#         self.neighbors = []\r\n\r\nclass Solution:\r\n    # @param node, a undirected graph node\r\n    # @return a undirected graph node\r\n    def cloneGraph(self, node):\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * #define NEIGHBORS_MAX_SIZE 100\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     struct UndirectedGraphNode *neighbors[NEIGHBORS_MAX_SIZE];\r\n *     int neighborsCount;\r\n * };\r\n */\r\nstruct UndirectedGraphNode *cloneGraph(struct UndirectedGraphNode *graph) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for undirected graph.\r\n * public class UndirectedGraphNode {\r\n *     public int label;\r\n *     public IList<UndirectedGraphNode> neighbors;\r\n *     public UndirectedGraphNode(int x) { label = x; neighbors = new List<UndirectedGraphNode>(); }\r\n * };\r\n */\r\npublic class Solution {\r\n    public UndirectedGraphNode CloneGraph(UndirectedGraphNode node) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for undirected graph.\r\n * function UndirectedGraphNode(label) {\r\n *     this.label = label;\r\n *     this.neighbors = [];   // Array of UndirectedGraphNode\r\n * }\r\n */\r\n\r\n/**\r\n * @param {UndirectedGraphNode} graph\r\n * @return {UndirectedGraphNode}\r\n */\r\nvar cloneGraph = function(graph) {\r\n    \r\n};"}],"testcase":"{}","testable":false,"templateMeta":{"name":"cloneGraph","params":[{"name":"node","type":"UndirectedGraphNode"}],"return":{"type":"UndirectedGraphNode"},"generatedriver":false,"generatedefinition":false}}