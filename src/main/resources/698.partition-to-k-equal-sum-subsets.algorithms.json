{"id":698,"fid":698,"name":"Partition to K Equal Sum Subsets","slug":"partition-to-k-equal-sum-subsets","link":"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/description/","percent":39.38503982556846,"level":"Medium","category":"algorithms","totalAC":"26.6K","totalSubmit":"67.4K","desc":"Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.\r\n\r\nExample 1:\r\n\r\nInput: nums = [4, 3, 2, 3, 5, 2, 1], k = 4\r\nOutput: True\r\nExplanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\r\n\r\n\r\n\r\nNote:\r\n1 .\r\n0 < nums[i] < 10000.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool canPartitionKSubsets(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean canPartitionKSubsets(int[] nums, int k) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def canPartitionKSubsets(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def canPartitionKSubsets(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool canPartitionKSubsets(int* nums, int numsSize, int k) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CanPartitionKSubsets(int[] nums, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {boolean}\r\n */\r\nvar canPartitionKSubsets = function(nums, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Boolean}\r\ndef can_partition_k_subsets(nums, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canPartitionKSubsets(_ nums: [Int], _ k: Int) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canPartitionKSubsets(nums []int, k int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def canPartitionKSubsets(nums: Array[Int], k: Int): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun canPartitionKSubsets(nums: IntArray, k: Int): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[4,3,2,3,5,2,1]\n4","testable":true,"templateMeta":{"name":"canPartitionKSubsets","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"boolean"}}}