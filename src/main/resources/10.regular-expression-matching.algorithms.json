{"id":10,"fid":10,"name":"Regular Expression Matching","slug":"regular-expression-matching","link":"https://leetcode.com/problems/regular-expression-matching/description/","percent":24.469643540814477,"level":"Hard","category":"algorithms","totalAC":"242.9K","totalSubmit":"992.5K","desc":"Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*'.\r\n\r\n\r\n'.' Matches any single character.\r\n'*' Matches zero or more of the preceding element.\r\n\r\n\r\nThe matching should cover the entire input string (not partial).\r\n\r\nNote:\r\n\r\n\r\n\ts could be empty and contains only lowercase letters a-z.\r\n\tp could be empty and contains only lowercase letters a-z, and characters like . or *.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\ns = \"aa\"\r\np = \"a\"\r\nOutput: false\r\nExplanation: \"a\" does not match the entire string \"aa\".\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\ns = \"aa\"\r\np = \"a*\"\r\nOutput: true\r\nExplanation: '*' means zero or more of the precedeng element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput:\r\ns = \"ab\"\r\np = \".*\"\r\nOutput: true\r\nExplanation: \".*\" means \"zero or more (*) of any character (.)\".\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput:\r\ns = \"aab\"\r\np = \"c*a*b\"\r\nOutput: true\r\nExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore it matches \"aab\".\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput:\r\ns = \"mississippi\"\r\np = \"mis*is*p*.\"\r\nOutput: false\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool isMatch(string s, string p) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean isMatch(String s, String p) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def isMatch(self, s, p):\r\n        \"\"\"\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def isMatch(self, s, p):\r\n        \"\"\"\r\n        :type s: str\r\n        :type p: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool isMatch(char* s, char* p) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool IsMatch(string s, string p) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @param {string} p\r\n * @return {boolean}\r\n */\r\nvar isMatch = function(s, p) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String} p\r\n# @return {Boolean}\r\ndef is_match(s, p)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isMatch(_ s: String, _ p: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isMatch(s string, p string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def isMatch(s: String, p: String): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun isMatch(s: String, p: String): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"\"aa\"\n\"a\"","testable":true,"templateMeta":{"name":"isMatch","params":[{"name":"s","type":"string"},{"name":"p","type":"string"}],"return":{"type":"boolean"}}}