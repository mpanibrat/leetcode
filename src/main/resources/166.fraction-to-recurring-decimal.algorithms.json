{"id":166,"fid":166,"name":"Fraction to Recurring Decimal","slug":"fraction-to-recurring-decimal","link":"https://leetcode.com/problems/fraction-to-recurring-decimal/description/","percent":18.65225629938206,"level":"Medium","category":"algorithms","totalAC":"75.4K","totalSubmit":"404.2K","desc":"Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\r\n\r\nIf the fractional part is repeating, enclose the repeating part in parentheses.\r\n\r\nExample 1:\r\n\r\n\r\nInput: numerator = 1, denominator = 2\r\nOutput: \"0.5\"\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: numerator = 2, denominator = 1\r\nOutput: \"2\"\r\n\r\nExample 3:\r\n\r\n\r\nInput: numerator = 2, denominator = 3\r\nOutput: \"0.(6)\"\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string fractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String fractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def fractionToDecimal(self, numerator, denominator):\r\n        \"\"\"\r\n        :type numerator: int\r\n        :type denominator: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def fractionToDecimal(self, numerator, denominator):\r\n        \"\"\"\r\n        :type numerator: int\r\n        :type denominator: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* fractionToDecimal(int numerator, int denominator) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string FractionToDecimal(int numerator, int denominator) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} numerator\r\n * @param {number} denominator\r\n * @return {string}\r\n */\r\nvar fractionToDecimal = function(numerator, denominator) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} numerator\r\n# @param {Integer} denominator\r\n# @return {String}\r\ndef fraction_to_decimal(numerator, denominator)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func fractionToDecimal(_ numerator: Int, _ denominator: Int) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func fractionToDecimal(numerator int, denominator int) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def fractionToDecimal(numerator: Int, denominator: Int): String = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun fractionToDecimal(numerator: Int, denominator: Int): String {\r\n        \r\n    }\r\n}"}],"testcase":"1\n2","testable":true,"templateMeta":{"name":"fractionToDecimal","params":[{"name":"numerator","type":"integer"},{"name":"denominator","type":"integer"}],"return":{"type":"string"}}}