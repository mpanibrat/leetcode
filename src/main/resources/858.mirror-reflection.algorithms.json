{"id":888,"fid":858,"name":"Mirror Reflection","slug":"mirror-reflection","link":"https://leetcode.com/problems/mirror-reflection/description/","percent":49.95997712978845,"level":"Medium","category":"algorithms","totalAC":"4.4K","totalSubmit":"8.7K","desc":"There is a special square room with mirrors on each of the four walls.  Except for the southwest corner, there are receptors on each of the remaining corners, numbered 0, 1, and 2.\r\n\r\nThe square room has walls of length p, and a laser ray from the southwest corner first meets the east wall at a distance q from the 0th receptor.\r\n\r\nReturn the number of the receptor that the ray meets first.  (It is guaranteed that the ray will meet a receptor eventually.)\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: p = 2, q = 1\r\nOutput: 2\r\nExplanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= p <= 1000\r\n\t0 <= q <= p\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int mirrorReflection(int p, int q) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int mirrorReflection(int p, int q) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def mirrorReflection(self, p, q):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def mirrorReflection(self, p, q):\n        \"\"\"\n        :type p: int\n        :type q: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int mirrorReflection(int p, int q) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MirrorReflection(int p, int q) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} p\n * @param {number} q\n * @return {number}\n */\nvar mirrorReflection = function(p, q) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} p\n# @param {Integer} q\n# @return {Integer}\ndef mirror_reflection(p, q)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func mirrorReflection(_ p: Int, _ q: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func mirrorReflection(p int, q int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def mirrorReflection(p: Int, q: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun mirrorReflection(p: Int, q: Int): Int {\n        \n    }\n}"}],"testcase":"2\n1","testable":true,"templateMeta":{"name":"mirrorReflection","params":[{"name":"p","type":"integer"},{"name":"q","type":"integer"}],"return":{"type":"integer"}}}