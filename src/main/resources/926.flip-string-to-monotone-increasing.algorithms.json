{"id":962,"fid":926,"name":"Flip String to Monotone Increasing","slug":"flip-string-to-monotone-increasing","link":"https://leetcode.com/problems/flip-string-to-monotone-increasing/description/","percent":42.94364684051177,"level":"Medium","category":"algorithms","totalAC":"4.4K","totalSubmit":"10.2K","desc":"A string of '0's and '1's is monotone increasing if it consists of some number of '0's (possibly 0), followed by some number of '1's (also possibly 0.)\r\n\r\nWe are given a string S of '0's and '1's, and we may flip any '0' to a '1' or a '1' to a '0'.\r\n\r\nReturn the minimum number of flips to make S monotone increasing.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: \"00110\"\r\nOutput: 1\r\nExplanation: We flip the last digit to get 00111.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \"010110\"\r\nOutput: 2\r\nExplanation: We flip to get 011111, or alternatively 000111.\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: \"00011000\"\r\nOutput: 2\r\nExplanation: We flip to get 00000000.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= S.length <= 20000\r\n\tS only consists of '0' and '1' characters.\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minFlipsMonoIncr(string S) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minFlipsMonoIncr(String S) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minFlipsMonoIncr(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minFlipsMonoIncr(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minFlipsMonoIncr(char* S) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinFlipsMonoIncr(string S) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} S\r\n * @return {number}\r\n */\r\nvar minFlipsMonoIncr = function(S) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {Integer}\r\ndef min_flips_mono_incr(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func minFlipsMonoIncr(_ S: String) -> Int {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func minFlipsMonoIncr(S string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minFlipsMonoIncr(S: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minFlipsMonoIncr(S: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"00110\"","testable":true,"templateMeta":{"name":"minFlipsMonoIncr","params":[{"name":"S","type":"string"}],"return":{"type":"integer"}}}