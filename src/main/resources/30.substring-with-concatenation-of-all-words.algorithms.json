{"id":30,"fid":30,"name":"Substring with Concatenation of All Words","slug":"substring-with-concatenation-of-all-words","link":"https://leetcode.com/problems/substring-with-concatenation-of-all-words/description/","percent":22.515903121082445,"level":"Hard","category":"algorithms","totalAC":"111.2K","totalSubmit":"493.8K","desc":"You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.\r\n\r\nExample 1:\r\n\r\n\r\nInput:\r\n  s = \"barfoothefoobarman\",\r\n  words = [\"foo\",\"bar\"]\r\nOutput: [0,9]\r\nExplanation: Substrings starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively.\r\nThe output order does not matter, returning [9,0] is fine too.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput:\r\n  s = \"wordgoodstudentgoodword\",\r\n  words = [\"word\",\"student\"]\r\nOutput: []\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findSubstring(string s, vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> findSubstring(String s, String[] words) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findSubstring(self, s, words):\r\n        \"\"\"\r\n        :type s: str\r\n        :type words: List[str]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findSubstring(self, s, words):\r\n        \"\"\"\r\n        :type s: str\r\n        :type words: List[str]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findSubstring(char* s, char** words, int wordsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> FindSubstring(string s, string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @param {string[]} words\r\n * @return {number[]}\r\n */\r\nvar findSubstring = function(s, words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String[]} words\r\n# @return {Integer[]}\r\ndef find_substring(s, words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findSubstring(_ s: String, _ words: [String]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findSubstring(s string, words []string) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findSubstring(s: String, words: Array[String]): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findSubstring(s: String, words: Array<String>): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"\"barfoothefoobarman\"\n[\"foo\",\"bar\"]","testable":true,"templateMeta":{"name":"findSubstring","params":[{"name":"s","type":"string"},{"name":"words","type":"string[]"}],"return":{"type":"list<integer>"}}}