{"id":227,"fid":227,"name":"Basic Calculator II","slug":"basic-calculator-ii","link":"https://leetcode.com/problems/basic-calculator-ii/description/","percent":31.562210698238033,"level":"Medium","category":"algorithms","totalAC":"83.9K","totalSubmit":"265.7K","desc":"Implement a basic calculator to evaluate a simple expression string.\r\n\r\nThe expression string contains only non-negative integers, +, -, *, / operators and empty spaces  . The integer division should truncate toward zero.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \"3+2*2\"\r\nOutput: 7\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \" 3/2 \"\r\nOutput: 1\r\n\r\nExample 3:\r\n\r\n\r\nInput: \" 3+5 / 2 \"\r\nOutput: 5\r\n\r\n\r\nNote:\r\n\r\n\r\n\tYou may assume that the given expression is always valid.\r\n\tDo not use the eval built-in library function.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int calculate(string s) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int calculate(String s) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def calculate(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def calculate(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int calculate(char* s) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int Calculate(string s) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar calculate = function(s) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {Integer}\r\ndef calculate(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func calculate(_ s: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func calculate(s string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def calculate(s: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun calculate(s: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"3+2*2\"","testable":true,"templateMeta":{"name":"calculate","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}