{"id":150,"fid":150,"name":"Evaluate Reverse Polish Notation","slug":"evaluate-reverse-polish-notation","link":"https://leetcode.com/problems/evaluate-reverse-polish-notation/description/","percent":30.21817541811571,"level":"Medium","category":"algorithms","totalAC":"135.6K","totalSubmit":"448.9K","desc":"Evaluate the value of an arithmetic expression in Reverse Polish Notation.\r\n\r\nValid operators are +, -, *, /. Each operand may be an integer or another expression.\r\n\r\nNote:\r\n\r\n\r\n\tDivision between two integers should truncate toward zero.\r\n\tThe given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"2\", \"1\", \"+\", \"3\", \"*\"]\r\nOutput: 9\r\nExplanation: ((2 + 1) * 3) = 9\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [\"4\", \"13\", \"5\", \"/\", \"+\"]\r\nOutput: 6\r\nExplanation: (4 + (13 / 5)) = 6\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [\"10\", \"6\", \"9\", \"3\", \"+\", \"-11\", \"*\", \"/\", \"*\", \"17\", \"+\", \"5\", \"+\"]\r\nOutput: 22\r\nExplanation: \r\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\r\n= ((10 * (6 / (12 * -11))) + 17) + 5\r\n= ((10 * (6 / -132)) + 17) + 5\r\n= ((10 * 0) + 17) + 5\r\n= (0 + 17) + 5\r\n= 17 + 5\r\n= 22\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int evalRPN(vector<string>& tokens) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int evalRPN(String[] tokens) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def evalRPN(self, tokens):\r\n        \"\"\"\r\n        :type tokens: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def evalRPN(self, tokens):\r\n        \"\"\"\r\n        :type tokens: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int evalRPN(char** tokens, int tokensSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int EvalRPN(string[] tokens) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} tokens\r\n * @return {number}\r\n */\r\nvar evalRPN = function(tokens) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} tokens\r\n# @return {Integer}\r\ndef eval_rpn(tokens)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func evalRPN(_ tokens: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func evalRPN(tokens []string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def evalRPN(tokens: Array[String]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun evalRPN(tokens: Array<String>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[\"2\",\"1\",\"+\",\"3\",\"*\"]","testable":true,"templateMeta":{"name":"evalRPN","params":[{"name":"tokens","type":"string[]"}],"return":{"type":"integer"}}}