{"id":865,"fid":489,"name":"Robot Room Cleaner","slug":"robot-room-cleaner","link":"https://leetcode.com/problems/robot-room-cleaner/description/","percent":56.32592956190944,"level":"Hard","category":"algorithms","totalAC":"9.2K","totalSubmit":"16.3K","desc":"Given a robot cleaner in a room modeled as a grid.\r\n\r\nEach cell in the grid can be empty or blocked.\r\n\r\nThe robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.\r\n\r\nWhen it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.\r\n\r\nDesign an algorithm to clean the entire room using only the 4 given APIs shown below.\r\n\r\n\r\ninterface Robot {\r\n  // returns true if next cell is open and robot moves into the cell.\r\n  // returns false if next cell is obstacle and robot stays on the current cell.\r\n  boolean move();\r\n\r\n  // Robot will stay on the same cell after calling turnLeft/turnRight.\r\n  // Each turn will be 90 degrees.\r\n  void turnLeft();\r\n  void turnRight();\r\n\r\n  // Clean the current cell.\r\n  void clean();\r\n}\r\n\r\n\r\nExample:\r\n\r\n\r\nInput:\r\nroom = [\r\n  [1,1,1,1,1,0,1,1],\r\n  [1,1,1,1,1,0,1,1],\r\n  [1,0,1,1,1,1,1,1],\r\n  [0,0,0,1,0,0,0,0],\r\n  [1,1,1,1,1,1,1,1]\r\n],\r\nrow = 1,\r\ncol = 3\r\n\r\nExplanation:\r\nAll grids in the room are marked by either 0 or 1.\r\n0 means the cell is blocked, while 1 means the cell is accessible.\r\nThe robot initially starts at the position of row=1, col=3.\r\nFrom the top left corner, its position is one row below and three columns right.\r\n\r\n\r\nNotes:\r\n\r\n\r\n\tThe input is only given to initialize the room and the robot's position internally. You must solve this problem \"blindfolded\". In other words, you must control the robot using only the mentioned 4 APIs, without knowing the room layout and the initial robot's position.\r\n\tThe robot's initial position will always be in an accessible cell.\r\n\tThe initial direction of the robot will be facing up.\r\n\tAll accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot.\r\n\tAssume all four edges of the grid are all surrounded by wall.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * // This is the robot's control interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * class Robot {\r\n *   public:\r\n *     // Returns true if the cell in front is open and robot moves into the cell.\r\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\r\n *     bool move();\r\n *\r\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\r\n *     // Each turn will be 90 degrees.\r\n *     void turnLeft();\r\n *     void turnRight();\r\n *\r\n *     // Clean the current cell.\r\n *     void clean();\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    void cleanRoom(Robot& robot) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * // This is the robot's control interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * interface Robot {\r\n *     // Returns true if the cell in front is open and robot moves into the cell.\r\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\r\n *     public boolean move();\r\n *\r\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\r\n *     // Each turn will be 90 degrees.\r\n *     public void turnLeft();\r\n *     public void turnRight();\r\n *\r\n *     // Clean the current cell.\r\n *     public void clean();\r\n * }\r\n */\r\nclass Solution {\r\n    public void cleanRoom(Robot robot) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# \"\"\"\r\n# This is the robot's control interface.\r\n# You should not implement it, or speculate about its implementation\r\n# \"\"\"\r\n#class Robot(object):\r\n#    def move(self):\r\n#        \"\"\"\r\n#        Returns true if the cell in front is open and robot moves into the cell.\r\n#        Returns false if the cell in front is blocked and robot stays in the current cell.\r\n#        :rtype bool\r\n#        \"\"\"\r\n#\r\n#    def turnLeft(self):\r\n#        \"\"\"\r\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\r\n#        Each turn will be 90 degrees.\r\n#        :rtype void\r\n#        \"\"\"\r\n#\r\n#    def turnRight(self):\r\n#        \"\"\"\r\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\r\n#        Each turn will be 90 degrees.\r\n#        :rtype void\r\n#        \"\"\"\r\n#\r\n#    def clean(self):\r\n#        \"\"\"\r\n#        Clean the current cell.\r\n#        :rtype void\r\n#        \"\"\"\r\n\r\nclass Solution(object):\r\n    def cleanRoom(self, robot):\r\n        \"\"\"\r\n        :type robot: Robot\r\n        :rtype: None\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"# \"\"\"\r\n# This is the robot's control interface.\r\n# You should not implement it, or speculate about its implementation\r\n# \"\"\"\r\n#class Robot:\r\n#    def move(self):\r\n#        \"\"\"\r\n#        Returns true if the cell in front is open and robot moves into the cell.\r\n#        Returns false if the cell in front is blocked and robot stays in the current cell.\r\n#        :rtype bool\r\n#        \"\"\"\r\n#\r\n#    def turnLeft(self):\r\n#        \"\"\"\r\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\r\n#        Each turn will be 90 degrees.\r\n#        :rtype void\r\n#        \"\"\"\r\n#\r\n#    def turnRight(self):\r\n#        \"\"\"\r\n#        Robot will stay in the same cell after calling turnLeft/turnRight.\r\n#        Each turn will be 90 degrees.\r\n#        :rtype void\r\n#        \"\"\"\r\n#\r\n#    def clean(self):\r\n#        \"\"\"\r\n#        Clean the current cell.\r\n#        :rtype void\r\n#        \"\"\"\r\n\r\nclass Solution:\r\n    def cleanRoom(self, robot):\r\n        \"\"\"\r\n        :type robot: Robot\r\n        :rtype: None\r\n        \"\"\""},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * // This is the robot's control interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * interface Robot {\r\n *     // Returns true if the cell in front is open and robot moves into the cell.\r\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\r\n *     public bool Move();\r\n *\r\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\r\n *     // Each turn will be 90 degrees.\r\n *     public void TurnLeft();\r\n *     public void TurnRight();\r\n *\r\n *     // Clean the current cell.\r\n *     public void Clean();\r\n * }\r\n */\r\nclass Solution {\r\n    public void CleanRoom(Robot robot) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * // This is the robot's control interface.\r\n * // You should not implement it, or speculate about its implementation\r\n * function Robot() {\r\n *\r\n *     // Returns true if the cell in front is open and robot moves into the cell.\r\n *     // Returns false if the cell in front is blocked and robot stays in the current cell.\r\n *     @return {boolean}\r\n *     this.move = function() {\r\n *         ...\r\n *     };\r\n *\r\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\r\n *     // Each turn will be 90 degrees.\r\n *     @return {void}\r\n *     this.turnLeft = function() {\r\n *         ...\r\n *     };\r\n * \r\n *     // Robot will stay in the same cell after calling turnLeft/turnRight.\r\n *     // Each turn will be 90 degrees.\r\n *     @return {void} \r\n *     this.turnRight = function() {\r\n *         ...\r\n *     };\r\n *\r\n *     // Clean the current cell.\r\n *     @return {void}\r\n *     this.clean = function() {\r\n *         ...\r\n *     };\r\n * };\r\n */\r\n/**\r\n * @param {Robot} robot\r\n * @return {void}\r\n */\r\nvar cleanRoom = function(robot) {\r\n    \r\n};"}],"testcase":"[[1,1,1,1,1,0,1,1],[1,1,1,1,1,0,1,1],[1,0,1,1,1,1,1,1],[0,0,0,1,0,0,0,0],[1,1,1,1,1,1,1,1]]\n1\n3","testable":true,"templateMeta":{"name":"cleanRoom","params":[{"name":"room","type":"integer[][]"},{"name":"row","type":"integer"},{"name":"col","type":"integer"}],"return":{"type":"void"},"generatedriver":false,"generatedefinition":false}}