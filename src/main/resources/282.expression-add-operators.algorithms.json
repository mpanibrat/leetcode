{"id":282,"fid":282,"name":"Expression Add Operators","slug":"expression-add-operators","link":"https://leetcode.com/problems/expression-add-operators/description/","percent":31.402516910841822,"level":"Hard","category":"algorithms","totalAC":"56.5K","totalSubmit":"180.1K","desc":"Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.\r\n\r\nExample 1:\r\n\r\n\r\nInput: num = \"123\", target = 6\r\nOutput: [\"1+2+3\", \"1*2*3\"] \r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: num = \"232\", target = 8\r\nOutput: [\"2*3+2\", \"2+3*2\"]\r\n\r\nExample 3:\r\n\r\n\r\nInput: num = \"105\", target = 5\r\nOutput: [\"1*0+5\",\"10-5\"]\r\n\r\nExample 4:\r\n\r\n\r\nInput: num = \"00\", target = 0\r\nOutput: [\"0+0\", \"0-0\", \"0*0\"]\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: num = \"3456237490\", target = 9191\r\nOutput: []\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> addOperators(string num, int target) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> addOperators(String num, int target) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def addOperators(self, num, target):\r\n        \"\"\"\r\n        :type num: str\r\n        :type target: int\r\n        :rtype: List[str]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def addOperators(self, num, target):\r\n        \"\"\"\r\n        :type num: str\r\n        :type target: int\r\n        :rtype: List[str]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** addOperators(char* num, int target, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> AddOperators(string num, int target) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} num\r\n * @param {number} target\r\n * @return {string[]}\r\n */\r\nvar addOperators = function(num, target) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} num\r\n# @param {Integer} target\r\n# @return {String[]}\r\ndef add_operators(num, target)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func addOperators(_ num: String, _ target: Int) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func addOperators(num string, target int) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def addOperators(num: String, target: Int): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun addOperators(num: String, target: Int): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"\"123\"\n6","testable":true,"templateMeta":{"name":"addOperators","params":[{"name":"num","type":"string"},{"name":"target","type":"integer"}],"return":{"type":"list<string>"}}}