{"id":853,"fid":826,"name":"Most Profit Assigning Work","slug":"most-profit-assigning-work","link":"https://leetcode.com/problems/most-profit-assigning-work/description/","percent":33.20805929637749,"level":"Medium","category":"algorithms","totalAC":"6.4K","totalSubmit":"19.2K","desc":"We have jobs: difficulty[i] is the difficulty of the ith job, and profit[i] is the profit of the ith job. \r\n\r\nNow we have some workers. worker[i] is the ability of the ith worker, which means that this worker can only complete a job with difficulty at most worker[i]. \r\n\r\nEvery worker can be assigned at most one job, but one job can be completed multiple times.\r\n\r\nFor example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.\r\n\r\nWhat is the most profit we can make?\r\n\r\nExample 1:\r\n\r\n\r\nInput: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\r\nOutput: 100 \r\nExplanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.\r\n\r\nNotes:\r\n\r\n\r\n\t1 <= difficulty.length = profit.length <= 10000\r\n\t1 <= worker.length <= 10000\r\n\tdifficulty[i], profit[i], worker[i]  are in range [1, 10^5]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxProfitAssignment(vector<int>& difficulty, vector<int>& profit, vector<int>& worker) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxProfitAssignment(self, difficulty, profit, worker):\n        \"\"\"\n        :type difficulty: List[int]\n        :type profit: List[int]\n        :type worker: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxProfitAssignment(self, difficulty, profit, worker):\n        \"\"\"\n        :type difficulty: List[int]\n        :type profit: List[int]\n        :type worker: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int maxProfitAssignment(int* difficulty, int difficultySize, int* profit, int profitSize, int* worker, int workerSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxProfitAssignment(int[] difficulty, int[] profit, int[] worker) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} difficulty\n * @param {number[]} profit\n * @param {number[]} worker\n * @return {number}\n */\nvar maxProfitAssignment = function(difficulty, profit, worker) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} difficulty\n# @param {Integer[]} profit\n# @param {Integer[]} worker\n# @return {Integer}\ndef max_profit_assignment(difficulty, profit, worker)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxProfitAssignment(_ difficulty: [Int], _ profit: [Int], _ worker: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxProfitAssignment(difficulty []int, profit []int, worker []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxProfitAssignment(difficulty: Array[Int], profit: Array[Int], worker: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxProfitAssignment(difficulty: IntArray, profit: IntArray, worker: IntArray): Int {\n        \n    }\n}"}],"testcase":"[2,4,6,8,10]\n[10,20,30,40,50]\n[4,5,6,7]","testable":true,"templateMeta":{"name":"maxProfitAssignment","params":[{"name":"difficulty","type":"integer[]"},{"name":"profit","type":"integer[]"},{"name":"worker","type":"integer[]"}],"return":{"type":"integer"}}}