{"id":741,"fid":741,"name":"Cherry Pickup","slug":"cherry-pickup","link":"https://leetcode.com/problems/cherry-pickup/description/","percent":25.56967694977885,"level":"Hard","category":"algorithms","totalAC":"4.6K","totalSubmit":"17.9K","desc":"\r\nIn a N x N grid representing a field of cherries, each cell is one of three possible integers.\r\n\r\n0 means the cell is empty, so you can pass through;\r\n1 means the cell contains a cherry, that you can pick up and pass through;\r\n-1 means the cell contains a thorn that blocks your way.\r\n\r\nYour task is to collect maximum number of cherries possible by following the rules below:\r\n\r\nStarting at the position (0, 0) and reaching (N-1, N-1) by moving right or down through valid path cells (cells with value 0 or 1);\r\nAfter reaching (N-1, N-1), returning to (0, 0) by moving left or up through valid path cells;\r\nWhen passing through a path cell containing a cherry, you pick it up and the cell becomes an empty cell (0);\r\nIf there is no valid path between (0, 0) and (N-1, N-1), then no cherries can be collected.\r\n\r\n\r\nExample 1:\r\n\r\nInput: grid =\r\n[[0, 1, -1],\r\n [1, 0, -1],\r\n [1, 1,  1]]\r\nOutput: 5\r\nExplanation: \r\nThe player started at (0, 0) and went down, down, right right to reach (2, 2).\r\n4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\r\nThen, the player went left, up, up, left to return home, picking up one more cherry.\r\nThe total number of cherries picked up is 5, and this is the maximum possible.\r\n\r\n\r\n\r\nNote:\r\ngrid is an N by N 2D array, with 1 .\r\nEach grid[i][j] is an integer in the set {-1, 0, 1}.\r\nIt is guaranteed that grid[0][0] and grid[N-1][N-1] are not -1.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int cherryPickup(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int cherryPickup(int[][] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int cherryPickup(int** grid, int gridRowSize, int gridColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CherryPickup(int[,] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar cherryPickup = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef cherry_pickup(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func cherryPickup(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func cherryPickup(grid [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def cherryPickup(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun cherryPickup(grid: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[0,1,-1],[1,0,-1],[1,1,1]]","testable":true,"templateMeta":{"name":"cherryPickup","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}