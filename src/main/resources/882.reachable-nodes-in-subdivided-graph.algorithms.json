{"id":918,"fid":882,"name":"Reachable Nodes In Subdivided Graph","slug":"reachable-nodes-in-subdivided-graph","link":"https://leetcode.com/problems/reachable-nodes-in-subdivided-graph/description/","percent":34.49618966977138,"level":"Hard","category":"algorithms","totalAC":"2K","totalSubmit":"5.9K","desc":"Starting with an undirected graph (the \"original graph\") with nodes from 0 to N-1, subdivisions are made to some of the edges.\r\n\r\nThe graph is given as follows: edges[k] is a list of integer pairs (i, j, n) such that (i, j) is an edge of the original graph,\r\n\r\nand n is the total number of new nodes on that edge. \r\n\r\nThen, the edge (i, j) is deleted from the original graph, n new nodes (x_1, x_2, ..., x_n) are added to the original graph,\r\n\r\nand n+1 new edges (i, x_1), (x_1, x_2), (x_2, x_3), ..., (x_{n-1}, x_n), (x_n, j) are added to the original graph.\r\n\r\nNow, you start at node 0 from the original graph, and in each move, you travel along one edge. \r\n\r\nReturn how many nodes you can reach in at most M moves.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: edges = [[0,1,10],[0,2,1],[1,2,2]], M = 6, N = 3\r\nOutput: 13\r\nExplanation: \r\nThe nodes that are reachable in the final graph after M = 6 moves are indicated below.\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], M = 10, N = 4\r\nOutput: 23\r\n\r\n \r\n\r\n\r\nNote:\r\n\r\n\r\n\t0 <= edges.length <= 10000\r\n\t0 <= edges[i][0] < edges[i][1] < N\r\n\tThere does not exist any i != j for which edges[i][0] == edges[j][0] and edges[i][1] == edges[j][1].\r\n\tThe original graph has no parallel edges.\r\n\t0 <= edges[i][2] <= 10000\r\n\t0 <= M <= 10^9\r\n\t1 <= N <= 3000\r\n\tA reachable node is a node that can be travelled to using at most M moves starting from node 0.\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int reachableNodes(vector<vector<int>>& edges, int M, int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int reachableNodes(int[][] edges, int M, int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def reachableNodes(self, edges, M, N):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type M: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def reachableNodes(self, edges, M, N):\n        \"\"\"\n        :type edges: List[List[int]]\n        :type M: int\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int reachableNodes(int** edges, int edgesRowSize, int *edgesColSizes, int M, int N) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ReachableNodes(int[][] edges, int M, int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} edges\n * @param {number} M\n * @param {number} N\n * @return {number}\n */\nvar reachableNodes = function(edges, M, N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} edges\n# @param {Integer} m\n# @param {Integer} n\n# @return {Integer}\ndef reachable_nodes(edges, m, n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reachableNodes(_ edges: [[Int]], _ M: Int, _ N: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func reachableNodes(edges [][]int, M int, N int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def reachableNodes(edges: Array[Array[Int]], M: Int, N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun reachableNodes(edges: Array<IntArray>, M: Int, N: Int): Int {\n        \n    }\n}"}],"testcase":"[[0,1,10],[0,2,1],[1,2,2]]\n6\n3","testable":true,"templateMeta":{"name":"reachableNodes","params":[{"name":"edges","type":"integer[][]"},{"name":"M","type":"integer"},{"name":"N","type":"integer"}],"return":{"type":"integer"}}}