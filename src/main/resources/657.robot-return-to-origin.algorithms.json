{"id":657,"fid":657,"name":"Robot Return to Origin","slug":"robot-return-to-origin","link":"https://leetcode.com/problems/robot-return-to-origin/description/","percent":69.41470572251508,"level":"Easy","category":"algorithms","totalAC":"115K","totalSubmit":"165.6K","desc":"There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.\r\n\r\nThe move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.\r\n\r\nNote: The way that the robot is \"facing\" is irrelevant. \"R\" will always make the robot move to the right once, \"L\" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \"UD\"\r\nOutput: true \r\nExplanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\r\n\r\n\r\nÂ \r\n\r\nExample 2:\r\n\r\n\r\nInput: \"LL\"\r\nOutput: false\r\nExplanation: The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool judgeCircle(string moves) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean judgeCircle(String moves) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def judgeCircle(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def judgeCircle(self, moves):\n        \"\"\"\n        :type moves: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool judgeCircle(char* moves) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool JudgeCircle(string moves) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} moves\n * @return {boolean}\n */\nvar judgeCircle = function(moves) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} moves\n# @return {Boolean}\ndef judge_circle(moves)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func judgeCircle(_ moves: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func judgeCircle(moves string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def judgeCircle(moves: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun judgeCircle(moves: String): Boolean {\n        \n    }\n}"}],"testcase":"\"UD\"","testable":true,"templateMeta":{"name":"judgeCircle","params":[{"name":"moves","type":"string"}],"return":{"type":"boolean"}}}