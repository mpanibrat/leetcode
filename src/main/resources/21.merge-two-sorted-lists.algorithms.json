{"id":21,"fid":21,"name":"Merge Two Sorted Lists","slug":"merge-two-sorted-lists","link":"https://leetcode.com/problems/merge-two-sorted-lists/description/","percent":43.7835391999871,"level":"Easy","category":"algorithms","totalAC":"434.5K","totalSubmit":"992.3K","desc":"Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.\r\n\r\nExample:\r\n\r\nInput: 1->2->4, 1->3->4\r\nOutput: 1->1->2->3->4->4\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def mergeTwoLists(self, l1, l2):\r\n        \"\"\"\r\n        :type l1: ListNode\r\n        :type l2: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    def mergeTwoLists(self, l1, l2):\r\n        \"\"\"\r\n        :type l1: ListNode\r\n        :type l2: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode MergeTwoLists(ListNode l1, ListNode l2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} l1\r\n * @param {ListNode} l2\r\n * @return {ListNode}\r\n */\r\nvar mergeTwoLists = function(l1, l2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} l1\r\n# @param {ListNode} l2\r\n# @return {ListNode}\r\ndef merge_two_lists(l1, l2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func mergeTwoLists(_ l1: ListNode?, _ l2: ListNode?) -> ListNode? {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var _x: Int = 0) {\r\n *   var next: ListNode = null\r\n *   var x: Int = _x\r\n * }\r\n */\r\nobject Solution {\r\n    def mergeTwoLists(l1: ListNode, l2: ListNode): ListNode = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var `val`: Int = 0) {\r\n *     var next: ListNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun mergeTwoLists(l1: ListNode?, l2: ListNode?): ListNode? {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,4]\n[1,3,4]","testable":true,"templateMeta":{"name":"mergeTwoLists","params":[{"name":"l1","type":"ListNode","dealloc":false},{"name":"l2","type":"ListNode","dealloc":false}],"return":{"type":"ListNode","dealloc":true}}}