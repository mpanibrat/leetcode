{"id":825,"fid":807,"name":"Max Increase to Keep City Skyline","slug":"max-increase-to-keep-city-skyline","link":"https://leetcode.com/problems/max-increase-to-keep-city-skyline/description/","percent":80.12491781722551,"level":"Medium","category":"algorithms","totalAC":"24.4K","totalSubmit":"30.4K","desc":"In a 2 dimensional array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. \r\n\r\nAt the end, the \"skyline\" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.\r\n\r\nWhat is the maximum total sum that the height of the buildings can be increased?\r\n\r\n\r\nExample:\r\nInput: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\r\nOutput: 35\r\nExplanation: \r\nThe grid is:\r\n[ [3, 0, 8, 4], \r\n  [2, 4, 5, 7],\r\n  [9, 2, 6, 3],\r\n  [0, 3, 1, 0] ]\r\n\r\nThe skyline viewed from top or bottom is: [9, 4, 8, 7]\r\nThe skyline viewed from left or right is: [8, 7, 9, 3]\r\n\r\nThe grid after increasing the height of buildings without affecting skylines is:\r\n\r\ngridNew = [ [8, 4, 8, 7],\r\n            [7, 4, 7, 7],\r\n            [9, 4, 8, 7],\r\n            [3, 3, 3, 3] ]\r\n\r\n\r\n\r\nNotes: \r\n\r\n\r\n\t1 < grid.length = grid[0].length <= 50.\r\n\tAll heights grid[i][j] are in the range [0, 100].\r\n\tAll buildings in grid[i][j] occupy the entire grid cell: that is, they are a 1 x 1 x grid[i][j] rectangular prism.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxIncreaseKeepingSkyline(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxIncreaseKeepingSkyline(int[][] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxIncreaseKeepingSkyline(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxIncreaseKeepingSkyline(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int maxIncreaseKeepingSkyline(int** grid, int gridRowSize, int *gridColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxIncreaseKeepingSkyline(int[][] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar maxIncreaseKeepingSkyline = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef max_increase_keeping_skyline(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxIncreaseKeepingSkyline(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxIncreaseKeepingSkyline(grid [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxIncreaseKeepingSkyline(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxIncreaseKeepingSkyline(grid: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]","testable":true,"templateMeta":{"name":"maxIncreaseKeepingSkyline","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}