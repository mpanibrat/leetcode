{"id":112,"fid":112,"name":"Path Sum","slug":"path-sum","link":"https://leetcode.com/problems/path-sum/description/","percent":36.1072019721782,"level":"Easy","category":"algorithms","totalAC":"256.3K","totalSubmit":"709.9K","desc":"Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.\r\n\r\nNote:Â A leaf is a node with no children.\r\n\r\nExample:\r\n\r\nGiven the below binary tree and sum = 22,\r\n\r\n\r\n      5\r\n     / \\\r\n    4   8\r\n   /   / \\\r\n  11  13  4\r\n /  \\      \\\r\n7    2      1\r\n\r\n\r\nreturn true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool hasPathSum(TreeNode* root, int sum) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public boolean hasPathSum(TreeNode root, int sum) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def hasPathSum(self, root, sum):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type sum: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def hasPathSum(self, root, sum):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type sum: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool hasPathSum(struct TreeNode* root, int sum) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool HasPathSum(TreeNode root, int sum) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} sum\r\n * @return {boolean}\r\n */\r\nvar hasPathSum = function(root, sum) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} sum\r\n# @return {Boolean}\r\ndef has_path_sum(root, sum)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func hasPathSum(_ root: TreeNode?, _ sum: Int) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc hasPathSum(root *TreeNode, sum int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def hasPathSum(root: TreeNode, sum: Int): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun hasPathSum(root: TreeNode?, sum: Int): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[5,4,8,11,null,13,4,7,2,null,null,null,1]\n22","testable":true,"templateMeta":{"name":"hasPathSum","params":[{"name":"root","type":"TreeNode"},{"name":"sum","type":"integer"}],"return":{"type":"boolean"}}}