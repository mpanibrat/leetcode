{"id":811,"fid":795,"name":"Number of Subarrays with Bounded Maximum","slug":"number-of-subarrays-with-bounded-maximum","link":"https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/description/","percent":41.44063795183883,"level":"Medium","category":"algorithms","totalAC":"7.9K","totalSubmit":"19.1K","desc":"We are given an array A of positive integers, and two positive integers L and R (L <= R).\r\n\r\nReturn the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.\r\n\r\n\r\nExample :\r\nInput: \r\nA = [2, 1, 4, 3]\r\nL = 2\r\nR = 3\r\nOutput: 3\r\nExplanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\r\n\r\n\r\nNote:\r\n\r\n\r\n\tL, RÂ  and A[i] will be an integer in the range [0, 10^9].\r\n\tThe length of A will be in the range of [1, 50000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numSubarrayBoundedMax(vector<int>& A, int L, int R) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numSubarrayBoundedMax(int[] A, int L, int R) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numSubarrayBoundedMax(self, A, L, R):\n        \"\"\"\n        :type A: List[int]\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numSubarrayBoundedMax(self, A, L, R):\n        \"\"\"\n        :type A: List[int]\n        :type L: int\n        :type R: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numSubarrayBoundedMax(int* A, int ASize, int L, int R) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumSubarrayBoundedMax(int[] A, int L, int R) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @param {number} L\n * @param {number} R\n * @return {number}\n */\nvar numSubarrayBoundedMax = function(A, L, R) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @param {Integer} l\n# @param {Integer} r\n# @return {Integer}\ndef num_subarray_bounded_max(a, l, r)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numSubarrayBoundedMax(_ A: [Int], _ L: Int, _ R: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numSubarrayBoundedMax(A []int, L int, R int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numSubarrayBoundedMax(A: Array[Int], L: Int, R: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numSubarrayBoundedMax(A: IntArray, L: Int, R: Int): Int {\n        \n    }\n}"}],"testcase":"[2,1,4,3]\n2\n3","testable":true,"templateMeta":{"name":"numSubarrayBoundedMax","params":[{"name":"A","type":"integer[]"},{"name":"L","type":"integer"},{"name":"R","type":"integer"}],"return":{"type":"integer"}}}