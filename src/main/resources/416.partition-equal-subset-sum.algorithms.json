{"id":416,"fid":416,"name":"Partition Equal Subset Sum","slug":"partition-equal-subset-sum","link":"https://leetcode.com/problems/partition-equal-subset-sum/description/","percent":38.87597097301717,"level":"Medium","category":"algorithms","totalAC":"60.9K","totalSubmit":"156.5K","desc":"Given a non-empty array containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.\r\n\r\n\r\nNote:\r\n\r\nEach of the array element will not exceed 100.\r\nThe array size will not exceed 200.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1, 5, 11, 5]\r\n\r\nOutput: true\r\n\r\nExplanation: The array can be partitioned as [1, 5, 5] and [11].\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1, 2, 3, 5]\r\n\r\nOutput: false\r\n\r\nExplanation: The array cannot be partitioned into equal sum subsets.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool canPartition(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean canPartition(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def canPartition(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def canPartition(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool canPartition(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CanPartition(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar canPartition = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef can_partition(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canPartition(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canPartition(nums []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canPartition(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canPartition(nums: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[1,5,11,5]","testable":true,"templateMeta":{"name":"canPartition","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}