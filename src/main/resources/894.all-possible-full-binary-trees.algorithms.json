{"id":930,"fid":894,"name":"All Possible Full Binary Trees","slug":"all-possible-full-binary-trees","link":"https://leetcode.com/problems/all-possible-full-binary-trees/description/","percent":65.96239928379588,"level":"Medium","category":"algorithms","totalAC":"7.4K","totalSubmit":"11.2K","desc":"A full binary tree is a binary tree where each node has exactly 0 or 2 children.\r\n\r\nReturn a list of all possible full binary trees with N nodes.  Each element of the answer is the root node of one possible tree.\r\n\r\nEach node of each tree in the answer must have node.val = 0.\r\n\r\nYou may return the final list of trees in any order.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: 7\r\nOutput: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\r\nExplanation:\r\n\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 20\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    vector<TreeNode*> allPossibleFBT(int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public List<TreeNode> allPossibleFBT(int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def allPossibleFBT(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def allPossibleFBT(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: List[TreeNode]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\n/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct TreeNode** allPossibleFBT(int N, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public IList<TreeNode> AllPossibleFBT(int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {number} N\n * @return {TreeNode[]}\n */\nvar allPossibleFBT = function(N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {Integer} n\n# @return {TreeNode[]}\ndef all_possible_fbt(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func allPossibleFBT(_ N: Int) -> [TreeNode?] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc allPossibleFBT(N int) []*TreeNode {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def allPossibleFBT(N: Int): List[TreeNode] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int = 0) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun allPossibleFBT(N: Int): List<TreeNode?> {\n        \n    }\n}"}],"testcase":"7","testable":true,"templateMeta":{"name":"allPossibleFBT","params":[{"name":"N","type":"integer"}],"return":{"type":"list<TreeNode>"}}}