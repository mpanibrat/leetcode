{"id":302,"fid":302,"name":"Smallest Rectangle Enclosing Black Pixels","slug":"smallest-rectangle-enclosing-black-pixels","link":"https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels/description/","percent":47.702924428144,"level":"Hard","category":"algorithms","totalAC":"19.8K","totalSubmit":"41.4K","desc":"An image is represented by a binary matrix with 0 as a white pixel and 1 as a black pixel. The black pixels are connected, i.e., there is only one black region. Pixels are connected horizontally and vertically. Given the location (x, y) of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.\r\n\r\nExample:\r\n\r\n\r\nInput:\r\n[\r\n  \"0010\",\r\n  \"0110\",\r\n  \"0100\"\r\n]\r\nand x = 0, y = 2\r\n\r\nOutput: 6\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minArea(vector<vector<char>>& image, int x, int y) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minArea(char[][] image, int x, int y) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minArea(self, image, x, y):\r\n        \"\"\"\r\n        :type image: List[List[str]]\r\n        :type x: int\r\n        :type y: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minArea(self, image, x, y):\r\n        \"\"\"\r\n        :type image: List[List[str]]\r\n        :type x: int\r\n        :type y: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minArea(char** image, int imageRowSize, int imageColSize, int x, int y) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinArea(char[,] image, int x, int y) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} image\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {number}\r\n */\r\nvar minArea = function(image, x, y) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} image\r\n# @param {Integer} x\r\n# @param {Integer} y\r\n# @return {Integer}\r\ndef min_area(image, x, y)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minArea(_ image: [[Character]], _ x: Int, _ y: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minArea(image [][]byte, x int, y int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minArea(image: Array[Array[Char]], x: Int, y: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minArea(image: Array<CharArray>, x: Int, y: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[\"0\",\"0\",\"1\",\"0\"],[\"0\",\"1\",\"1\",\"0\"],[\"0\",\"1\",\"0\",\"0\"]]\n0\n2","testable":true,"templateMeta":{"name":"minArea","params":[{"name":"image","type":"character[][]"},{"name":"x","type":"integer"},{"name":"y","type":"integer"}],"return":{"type":"integer"}}}