{"id":935,"fid":899,"name":"Orderly Queue","slug":"orderly-queue","link":"https://leetcode.com/problems/orderly-queue/description/","percent":43.09281786368938,"level":"Hard","category":"algorithms","totalAC":"2.6K","totalSubmit":"6K","desc":"A string S of lowercase letters is given.  Then, we may make any number of moves.\r\n\r\nIn each move, we choose one of the first K letters (starting from the left), remove it, and place it at the end of the string.\r\n\r\nReturn the lexicographically smallest string we could have after any number of moves.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: S = \"cba\", K = 1\r\nOutput: \"acb\"\r\nExplanation: \r\nIn the first move, we move the 1st character (\"c\") to the end, obtaining the string \"bac\".\r\nIn the second move, we move the 1st character (\"b\") to the end, obtaining the final result \"acb\".\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: S = \"baaca\", K = 3\r\nOutput: \"aaabc\"\r\nExplanation: \r\nIn the first move, we move the 1st character (\"b\") to the end, obtaining the string \"aacab\".\r\nIn the second move, we move the 3rd character (\"c\") to the end, obtaining the final result \"aaabc\".\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= K <= S.length <= 1000\r\n\tS consists of lowercase letters only.\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string orderlyQueue(string S, int K) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String orderlyQueue(String S, int K) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def orderlyQueue(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def orderlyQueue(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* orderlyQueue(char* S, int K) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string OrderlyQueue(string S, int K) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar orderlyQueue = function(S, K) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef orderly_queue(s, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func orderlyQueue(_ S: String, _ K: Int) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func orderlyQueue(S string, K int) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def orderlyQueue(S: String, K: Int): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun orderlyQueue(S: String, K: Int): String {\n        \n    }\n}"}],"testcase":"\"cba\"\n1","testable":true,"templateMeta":{"name":"orderlyQueue","params":[{"name":"S","type":"string"},{"name":"K","type":"integer"}],"return":{"type":"string"}}}