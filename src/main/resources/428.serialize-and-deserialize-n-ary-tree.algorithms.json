{"id":765,"fid":428,"name":"Serialize and Deserialize N-ary Tree","slug":"serialize-and-deserialize-n-ary-tree","link":"https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree/description/","percent":47.360993508326274,"level":"Hard","category":"algorithms","totalAC":"3.4K","totalSubmit":"7.1K","desc":"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.\r\n\r\nDesign an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.\r\n\r\nFor example, you may serialize the following 3-ary tree\r\n\r\n \r\n\r\n\r\n\r\n \r\n\r\nas [1 [3[5 6] 2 4]]. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tN is in the range of  [1, 1000]\r\n\tDo not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\npublic:\r\n    int val = NULL;\r\n    vector<Node*> children;\r\n\r\n    Node() {}\r\n\r\n    Node(int _val, vector<Node*> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\nclass Codec {\r\npublic:\r\n\r\n    // Encodes a tree to a single string.\r\n    string serialize(Node* root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    Node* deserialize(string data) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec;\r\n// codec.deserialize(codec.serialize(root));"},{"value":"java","text":"Java","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public int val;\r\n    public List<Node> children;\r\n\r\n    public Node() {}\r\n\r\n    public Node(int _val,List<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n    }\r\n};\r\n*/\r\nclass Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public String serialize(Node root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public Node deserialize(String data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));"},{"value":"python","text":"Python","defaultCode":"\"\"\"\r\n# Definition for a Node.\r\nclass Node(object):\r\n    def __init__(self, val, children):\r\n        self.val = val\r\n        self.children = children\r\n\"\"\"\r\nclass Codec:\r\n\r\n    def serialize(self, root):\r\n        \"\"\"Encodes a tree to a single string.\r\n        \r\n        :type root: Node\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def deserialize(self, data):\r\n        \"\"\"Decodes your encoded data to tree.\r\n        \r\n        :type data: str\r\n        :rtype: Node\r\n        \"\"\"\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.deserialize(codec.serialize(root))"},{"value":"csharp","text":"C#","defaultCode":"/*\r\n// Definition for a Node.\r\npublic class Node {\r\n    public int val;\r\n    public IList<Node> children;\r\n\r\n    public Node(){}\r\n    public Node(int _val,IList<Node> _children) {\r\n        val = _val;\r\n        children = _children;\r\n}\r\n*/\r\npublic class Codec {\r\n\r\n    // Encodes a tree to a single string.\r\n    public string serialize(Node root) {\r\n        \r\n    }\r\n\r\n    // Decodes your encoded data to tree.\r\n    public Node deserialize(string data) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.deserialize(codec.serialize(root));"}],"testcase":"{\"$id\":\"1\",\"children\":[{\"$id\":\"2\",\"children\":[{\"$id\":\"5\",\"children\":[],\"val\":5},{\"$id\":\"6\",\"children\":[],\"val\":6}],\"val\":3},{\"$id\":\"3\",\"children\":[],\"val\":2},{\"$id\":\"4\",\"children\":[],\"val\":4}],\"val\":1}","testable":true,"templateMeta":{"name":"CodecDriver","params":[{"name":"root","type":"Node"}],"return":{"type":"Node"},"generatedriver":false,"generatedefinition":false}}