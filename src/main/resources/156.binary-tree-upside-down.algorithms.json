{"id":156,"fid":156,"name":"Binary Tree Upside Down","slug":"binary-tree-upside-down","link":"https://leetcode.com/problems/binary-tree-upside-down/description/","percent":48.2507150793088,"level":"Medium","category":"algorithms","totalAC":"40.8K","totalSubmit":"84.6K","desc":"Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.\r\n\r\nExample:\r\n\r\n\r\nInput: [1,2,3,4,5]\r\n\r\n    1\r\n   / \\\r\n  2   3\r\n / \\\r\n4   5\r\n\r\nOutput: return the root of the binary tree [4,5,2,#,#,3,1]\r\n\r\n   4\r\n  / \\\r\n 5   2\r\n    / \\\r\n   3   1  \r\n\r\n\r\nClarification:\r\n\r\nConfused what [4,5,2,#,#,3,1]Â means? Read more below on how binary tree is serialized on OJ.\r\n\r\nThe serialization of a binary tree follows a level order traversal, where '#' signifies a path terminator where no node exists below.\r\n\r\nHere's an example:\r\n\r\n\r\n   1\r\n  / \\\r\n 2   3\r\n    /\r\n   4\r\n    \\\r\n     5\r\n\r\n\r\nThe above binary tree is serialized as [1,2,3,#,#,4,#,#,5].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* upsideDownBinaryTree(TreeNode* root) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode upsideDownBinaryTree(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def upsideDownBinaryTree(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def upsideDownBinaryTree(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* upsideDownBinaryTree(struct TreeNode* root) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode UpsideDownBinaryTree(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {TreeNode}\r\n */\r\nvar upsideDownBinaryTree = function(root) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {TreeNode}\r\ndef upside_down_binary_tree(root)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func upsideDownBinaryTree(_ root: TreeNode?) -> TreeNode? {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc upsideDownBinaryTree(root *TreeNode) *TreeNode {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def upsideDownBinaryTree(root: TreeNode): TreeNode = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun upsideDownBinaryTree(root: TreeNode?): TreeNode? {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3,4,5]","testable":true,"templateMeta":{"name":"upsideDownBinaryTree","params":[{"name":"root","type":"TreeNode","dealloc":false}],"return":{"type":"TreeNode","dealloc":true}}}