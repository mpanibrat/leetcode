{"id":208,"fid":208,"name":"Implement Trie (Prefix Tree)","slug":"implement-trie-prefix-tree","link":"https://leetcode.com/problems/implement-trie-prefix-tree/description/","percent":34.39385160696636,"level":"Medium","category":"algorithms","totalAC":"141.3K","totalSubmit":"410.8K","desc":"Implement a trie with insert, search, and startsWith methods.\r\n\r\nExample:\r\n\r\n\r\nTrie trie = new Trie();\r\n\r\ntrie.insert(\"apple\");\r\ntrie.search(\"apple\");   // returns true\r\ntrie.search(\"app\");     // returns false\r\ntrie.startsWith(\"app\"); // returns true\r\ntrie.insert(\"app\");   \r\ntrie.search(\"app\");     // returns true\r\n\r\n\r\nNote:\r\n\r\n\r\n\tYou may assume that all inputs are consist of lowercase letters a-z.\r\n\tAll inputs are guaranteed to be non-empty strings.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Trie {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    void insert(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    bool search(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    bool startsWith(string prefix) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.insert(word);\r\n * bool param_2 = obj.search(word);\r\n * bool param_3 = obj.startsWith(prefix);\r\n */"},{"value":"java","text":"Java","defaultCode":"class Trie {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    public void insert(String word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    public boolean search(String word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    public boolean startsWith(String prefix) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.insert(word);\r\n * boolean param_2 = obj.search(word);\r\n * boolean param_3 = obj.startsWith(prefix);\r\n */"},{"value":"python","text":"Python","defaultCode":"class Trie(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def insert(self, word):\r\n        \"\"\"\r\n        Inserts a word into the trie.\r\n        :type word: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if the word is in the trie.\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def startsWith(self, prefix):\r\n        \"\"\"\r\n        Returns if there is any word in the trie that starts with the given prefix.\r\n        :type prefix: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.startsWith(prefix)"},{"value":"python3","text":"Python3","defaultCode":"class Trie:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def insert(self, word):\r\n        \"\"\"\r\n        Inserts a word into the trie.\r\n        :type word: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def search(self, word):\r\n        \"\"\"\r\n        Returns if the word is in the trie.\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def startsWith(self, prefix):\r\n        \"\"\"\r\n        Returns if there is any word in the trie that starts with the given prefix.\r\n        :type prefix: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.startsWith(prefix)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Trie;\r\n\r\n/** Initialize your data structure here. */\r\nTrie* trieCreate() {\r\n    \r\n}\r\n\r\n/** Inserts a word into the trie. */\r\nvoid trieInsert(Trie* obj, char* word) {\r\n    \r\n}\r\n\r\n/** Returns if the word is in the trie. */\r\nbool trieSearch(Trie* obj, char* word) {\r\n    \r\n}\r\n\r\n/** Returns if there is any word in the trie that starts with the given prefix. */\r\nbool trieStartsWith(Trie* obj, char* prefix) {\r\n    \r\n}\r\n\r\nvoid trieFree(Trie* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Trie struct will be instantiated and called as such:\r\n * struct Trie* obj = trieCreate();\r\n * trieInsert(obj, word);\r\n * bool param_2 = trieSearch(obj, word);\r\n * bool param_3 = trieStartsWith(obj, prefix);\r\n * trieFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Trie {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Trie() {\r\n        \r\n    }\r\n    \r\n    /** Inserts a word into the trie. */\r\n    public void Insert(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if the word is in the trie. */\r\n    public bool Search(string word) {\r\n        \r\n    }\r\n    \r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    public bool StartsWith(string prefix) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * Trie obj = new Trie();\r\n * obj.Insert(word);\r\n * bool param_2 = obj.Search(word);\r\n * bool param_3 = obj.StartsWith(prefix);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar Trie = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Inserts a word into the trie. \r\n * @param {string} word\r\n * @return {void}\r\n */\r\nTrie.prototype.insert = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if the word is in the trie. \r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nTrie.prototype.search = function(word) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns if there is any word in the trie that starts with the given prefix. \r\n * @param {string} prefix\r\n * @return {boolean}\r\n */\r\nTrie.prototype.startsWith = function(prefix) {\r\n    \r\n};\r\n\r\n/** \r\n * Your Trie object will be instantiated and called as such:\r\n * var obj = Object.create(Trie).createNew()\r\n * obj.insert(word)\r\n * var param_2 = obj.search(word)\r\n * var param_3 = obj.startsWith(prefix)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Trie\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Inserts a word into the trie.\r\n    :type word: String\r\n    :rtype: Void\r\n=end\r\n    def insert(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if the word is in the trie.\r\n    :type word: String\r\n    :rtype: Boolean\r\n=end\r\n    def search(word)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns if there is any word in the trie that starts with the given prefix.\r\n    :type prefix: String\r\n    :rtype: Boolean\r\n=end\r\n    def starts_with(prefix)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Trie object will be instantiated and called as such:\r\n# obj = Trie.new()\r\n# obj.insert(word)\r\n# param_2 = obj.search(word)\r\n# param_3 = obj.starts_with(prefix)"},{"value":"swift","text":"Swift","defaultCode":"\nclass Trie {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Inserts a word into the trie. */\n    func insert(_ word: String) {\n      \n    }\n    \n    /** Returns if the word is in the trie. */\n    func search(_ word: String) -> Bool {\n      \n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    func startsWith(_ prefix: String) -> Bool {\n      \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie()\n * obj.insert(word)\n * let ret_2: Bool = obj.search(word)\n * let ret_3: Bool = obj.startsWith(prefix)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Trie struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() Trie {\r\n    \r\n}\r\n\r\n\r\n/** Inserts a word into the trie. */\r\nfunc (this *Trie) Insert(word string)  {\r\n    \r\n}\r\n\r\n\r\n/** Returns if the word is in the trie. */\r\nfunc (this *Trie) Search(word string) bool {\r\n    \r\n}\r\n\r\n\r\n/** Returns if there is any word in the trie that starts with the given prefix. */\r\nfunc (this *Trie) StartsWith(prefix string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Insert(word);\r\n * param_2 := obj.Search(word);\r\n * param_3 := obj.StartsWith(prefix);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Trie() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Inserts a word into the trie. */\r\n    def insert(word: String) {\r\n        \r\n    }\r\n\r\n    /** Returns if the word is in the trie. */\r\n    def search(word: String): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    def startsWith(prefix: String): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * var obj = new Trie()\r\n * obj.insert(word)\r\n * var param_2 = obj.search(word)\r\n * var param_3 = obj.startsWith(prefix)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Trie() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Inserts a word into the trie. */\r\n    fun insert(word: String) {\r\n        \r\n    }\r\n\r\n    /** Returns if the word is in the trie. */\r\n    fun search(word: String): Boolean {\r\n        \r\n    }\r\n\r\n    /** Returns if there is any word in the trie that starts with the given prefix. */\r\n    fun startsWith(prefix: String): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Trie object will be instantiated and called as such:\r\n * var obj = Trie()\r\n * obj.insert(word)\r\n * var param_2 = obj.search(word)\r\n * var param_3 = obj.startsWith(prefix)\r\n */"}],"testcase":"[\"Trie\",\"insert\",\"search\",\"search\",\"startsWith\",\"insert\",\"search\"]\n[[],[\"apple\"],[\"apple\"],[\"app\"],[\"app\"],[\"app\"],[\"app\"]]","testable":true,"templateMeta":{"classname":"Trie","maxbytesperline":210000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"insert","params":[{"type":"string","name":"word"}],"return":{"type":"void"},"comment":"Inserts a word into the trie."},{"name":"search","params":[{"type":"string","name":"word"}],"return":{"type":"boolean"},"comment":"Returns if the word is in the trie."},{"name":"startsWith","params":[{"type":"string","name":"prefix"}],"return":{"type":"boolean"},"comment":"Returns if there is any word in the trie that starts with the given prefix."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}