{"id":526,"fid":526,"name":"Beautiful Arrangement","slug":"beautiful-arrangement","link":"https://leetcode.com/problems/beautiful-arrangement/description/","percent":52.92840128905703,"level":"Medium","category":"algorithms","totalAC":"30.2K","totalSubmit":"57.1K","desc":"\r\nSuppose you have N integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the ith position (1 \r\nThe number at the ith position is divisible by i.\r\ni is divisible by the number at the ith position.\r\n\r\n\r\n\r\n\r\nNow given N, how many beautiful arrangements can you construct?\r\n\r\n\r\nExample 1:\r\n\r\nInput: 2\r\nOutput: 2\r\nExplanation: \r\nThe first beautiful arrangement is [1, 2]:\r\nNumber at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).\r\nNumber at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).\r\nThe second beautiful arrangement is [2, 1]:\r\nNumber at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).\r\nNumber at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.\r\n\r\n\r\n\r\nNote:\r\n\r\nN is a positive integer and will not exceed 15.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int countArrangement(int N) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int countArrangement(int N) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def countArrangement(self, N):\r\n        \"\"\"\r\n        :type N: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countArrangement(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int countArrangement(int N) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int CountArrangement(int N) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} N\r\n * @return {number}\r\n */\r\nvar countArrangement = function(N) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @return {Integer}\r\ndef count_arrangement(n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countArrangement(_ N: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func countArrangement(N int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countArrangement(N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countArrangement(N: Int): Int {\n        \n    }\n}"}],"testcase":"2","testable":true,"templateMeta":{"name":"countArrangement","params":[{"name":"N","type":"integer"}],"return":{"type":"integer"}}}