{"id":752,"fid":751,"name":"IP to CIDR","slug":"ip-to-cidr","link":"https://leetcode.com/problems/ip-to-cidr/description/","percent":53.96206107897215,"level":"Easy","category":"algorithms","totalAC":"4K","totalSubmit":"7.4K","desc":"\r\nGiven a start IP address ip and a number of ips we need to cover n, return a representation of the range as a list (of smallest possible length) of CIDR blocks.\r\n\r\nA CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: \"123.45.67.89/20\".  That prefix length \"20\" represents the number of common prefix bits in the specified range.\r\n\r\n\r\nExample 1:\r\n\r\nInput: ip = \"255.0.0.7\", n = 10\r\nOutput: [\"255.0.0.7/32\",\"255.0.0.8/29\",\"255.0.0.16/32\"]\r\nExplanation:\r\nThe initial ip address, when converted to binary, looks like this (spaces added for clarity):\r\n255.0.0.7 -> 11111111 00000000 00000000 00000111\r\nThe address \"255.0.0.7/32\" specifies all addresses with a common prefix of 32 bits to the given address,\r\nie. just this one address.\r\n\r\nThe address \"255.0.0.8/29\" specifies all addresses with a common prefix of 29 bits to the given address:\r\n255.0.0.8 -> 11111111 00000000 00000000 00001000\r\nAddresses with common prefix of 29 bits are:\r\n11111111 00000000 00000000 00001000\r\n11111111 00000000 00000000 00001001\r\n11111111 00000000 00000000 00001010\r\n11111111 00000000 00000000 00001011\r\n11111111 00000000 00000000 00001100\r\n11111111 00000000 00000000 00001101\r\n11111111 00000000 00000000 00001110\r\n11111111 00000000 00000000 00001111\r\n\r\nThe address \"255.0.0.16/32\" specifies all addresses with a common prefix of 32 bits to the given address,\r\nie. just 11111111 00000000 00000000 00010000.\r\n\r\nIn total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .\r\n\r\nThere were other representations, such as:\r\n[\"255.0.0.7/32\",\"255.0.0.8/30\", \"255.0.0.12/30\", \"255.0.0.16/32\"],\r\nbut our answer was the shortest possible.\r\n\r\nAlso note that a representation beginning with say, \"255.0.0.7/30\" would be incorrect,\r\nbecause it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 \r\nthat are outside the specified range.\r\n\r\n\r\n\r\nNote:\r\n\r\nip will be a valid IPv4 address.\r\nEvery implied address ip + x (for x < n) will be a valid IPv4 address.\r\nn will be an integer in the range [1, 1000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> ipToCIDR(string ip, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> ipToCIDR(String ip, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def ipToCIDR(self, ip, n):\r\n        \"\"\"\r\n        :type ip: str\r\n        :type n: int\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def ipToCIDR(self, ip, n):\r\n        \"\"\"\r\n        :type ip: str\r\n        :type n: int\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** ipToCIDR(char* ip, int n, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> IpToCIDR(string ip, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} ip\r\n * @param {number} n\r\n * @return {string[]}\r\n */\r\nvar ipToCIDR = function(ip, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} ip\r\n# @param {Integer} n\r\n# @return {String[]}\r\ndef ip_to_cidr(ip, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func ipToCIDR(_ ip: String, _ n: Int) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func ipToCIDR(ip string, n int) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def ipToCIDR(ip: String, n: Int): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun ipToCIDR(ip: String, n: Int): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"\"255.0.0.7\"\n10","testable":true,"templateMeta":{"name":"ipToCIDR","params":[{"name":"ip","type":"string"},{"name":"n","type":"integer"}],"return":{"type":"list<string>"}}}