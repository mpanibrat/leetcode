{"id":244,"fid":244,"name":"Shortest Word Distance II","slug":"shortest-word-distance-ii","link":"https://leetcode.com/problems/shortest-word-distance-ii/description/","percent":43.91541062525073,"level":"Medium","category":"algorithms","totalAC":"38.3K","totalSubmit":"87.2K","desc":"Design a class which receives a list of words in the constructor, and implements a method that takes two words word1 and word2 and return the shortest distance between these two words in the list. Your method will be called repeatedly many times with different parameters. \r\n\r\nExample:\r\nAssume that words = [\"practice\", \"makes\", \"perfect\", \"coding\", \"makes\"].\r\n\r\n\r\nInput: word1 = “coding”, word2 = “practice”\r\nOutput: 3\r\n\r\n\r\n\r\nInput: word1 = \"makes\", word2 = \"coding\"\r\nOutput: 1\r\n\r\nNote:\r\nYou may assume that word1 does not equal to word2, and word1 and word2 are both in the list.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class WordDistance {\r\npublic:\r\n    WordDistance(vector<string> words) {\r\n        \r\n    }\r\n    \r\n    int shortest(string word1, string word2) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your WordDistance object will be instantiated and called as such:\r\n * WordDistance obj = new WordDistance(words);\r\n * int param_1 = obj.shortest(word1,word2);\r\n */"},{"value":"java","text":"Java","defaultCode":"class WordDistance {\r\n\r\n    public WordDistance(String[] words) {\r\n        \r\n    }\r\n    \r\n    public int shortest(String word1, String word2) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your WordDistance object will be instantiated and called as such:\r\n * WordDistance obj = new WordDistance(words);\r\n * int param_1 = obj.shortest(word1,word2);\r\n */"},{"value":"python","text":"Python","defaultCode":"class WordDistance(object):\r\n\r\n    def __init__(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        \"\"\"\r\n        \r\n\r\n    def shortest(self, word1, word2):\r\n        \"\"\"\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your WordDistance object will be instantiated and called as such:\r\n# obj = WordDistance(words)\r\n# param_1 = obj.shortest(word1,word2)"},{"value":"python3","text":"Python3","defaultCode":"class WordDistance:\r\n\r\n    def __init__(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        \"\"\"\r\n        \r\n\r\n    def shortest(self, word1, word2):\r\n        \"\"\"\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your WordDistance object will be instantiated and called as such:\r\n# obj = WordDistance(words)\r\n# param_1 = obj.shortest(word1,word2)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} WordDistance;\r\n\r\nWordDistance* wordDistanceCreate(char** words, int wordsSize) {\r\n    \r\n}\r\n\r\nint wordDistanceShortest(WordDistance* obj, char* word1, char* word2) {\r\n    \r\n}\r\n\r\nvoid wordDistanceFree(WordDistance* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your WordDistance struct will be instantiated and called as such:\r\n * struct WordDistance* obj = wordDistanceCreate(words, wordsSize);\r\n * int param_1 = wordDistanceShortest(obj, word1, word2);\r\n * wordDistanceFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class WordDistance {\r\n\r\n    public WordDistance(string[] words) {\r\n        \r\n    }\r\n    \r\n    public int Shortest(string word1, string word2) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your WordDistance object will be instantiated and called as such:\r\n * WordDistance obj = new WordDistance(words);\r\n * int param_1 = obj.Shortest(word1,word2);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n */\r\nvar WordDistance = function(words) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {string} word1 \r\n * @param {string} word2\r\n * @return {number}\r\n */\r\nWordDistance.prototype.shortest = function(word1, word2) {\r\n    \r\n};\r\n\r\n/** \r\n * Your WordDistance object will be instantiated and called as such:\r\n * var obj = Object.create(WordDistance).createNew(words)\r\n * var param_1 = obj.shortest(word1,word2)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class WordDistance\r\n\r\n=begin\r\n    :type words: String[]\r\n=end\r\n    def initialize(words)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type word1: String\r\n    :type word2: String\r\n    :rtype: Integer\r\n=end\r\n    def shortest(word1, word2)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your WordDistance object will be instantiated and called as such:\r\n# obj = WordDistance.new(words)\r\n# param_1 = obj.shortest(word1, word2)"},{"value":"swift","text":"Swift","defaultCode":"\nclass WordDistance {\n\n    init(_ words: [String]) {\n        \n    }\n    \n    func shortest(_ word1: String, _ word2: String) -> Int {\n      \n    }\n}\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * let obj = WordDistance(words)\n * let ret_1: Int = obj.shortest(word1, word2)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type WordDistance struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(words []string) WordDistance {\r\n    \r\n}\r\n\r\n\r\nfunc (this *WordDistance) Shortest(word1 string, word2 string) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your WordDistance object will be instantiated and called as such:\r\n * obj := Constructor(words);\r\n * param_1 := obj.Shortest(word1,word2);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class WordDistance(_words: Array[String]) {\r\n\r\n    def shortest(word1: String, word2: String): Int = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your WordDistance object will be instantiated and called as such:\r\n * var obj = new WordDistance(words)\r\n * var param_1 = obj.shortest(word1,word2)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class WordDistance(words: Array<String>) {\r\n\r\n    fun shortest(word1: String, word2: String): Int {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your WordDistance object will be instantiated and called as such:\r\n * var obj = WordDistance(words)\r\n * var param_1 = obj.shortest(word1,word2)\r\n */"}],"testcase":"[\"WordDistance\",\"shortest\",\"shortest\"]\n[[[\"practice\",\"makes\",\"perfect\",\"coding\",\"makes\"]],[\"coding\",\"practice\"],[\"makes\",\"coding\"]]","testable":true,"templateMeta":{"classname":"WordDistance","maxbytesperline":300000,"constructor":{"params":[{"type":"string[]","name":"words"},{"type":"integer","name":"wordsSize","lang":"c","value":"size_1"}]},"methods":[{"name":"shortest","params":[{"type":"string","name":"word1"},{"type":"string","name":"word2"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}