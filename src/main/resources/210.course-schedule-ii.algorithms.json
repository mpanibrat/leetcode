{"id":210,"fid":210,"name":"Course Schedule II","slug":"course-schedule-ii","link":"https://leetcode.com/problems/course-schedule-ii/description/","percent":32.14520964884387,"level":"Medium","category":"algorithms","totalAC":"113.2K","totalSubmit":"352.2K","desc":"There are a total of n courses you have to take, labeled from 0 to n-1.\r\n\r\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\r\n\r\nGiven the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.\r\n\r\nThere may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.\r\n\r\nExample 1:\r\n\r\n\r\nInput: 2, [[1,0]] \r\nOutput: [0,1]\r\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished   \r\n             course 0. So the correct course order is [0,1] .\r\n\r\nExample 2:\r\n\r\n\r\nInput: 4, [[1,0],[2,0],[3,1],[3,2]]\r\nOutput: [0,1,2,3] or [0,2,1,3]\r\nExplanation: There are a total of 4 courses to take. To take course 3 you should have finished both     \r\n             courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0. \r\n             So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3] .\r\n\r\nNote:\r\n\r\n\r\n\tThe input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\r\n\tYou may assume that there are no duplicate edges in the input prerequisites.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findOrder(self, numCourses, prerequisites):\r\n        \"\"\"\r\n        :type numCourses: int\r\n        :type prerequisites: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findOrder(self, numCourses, prerequisites):\r\n        \"\"\"\r\n        :type numCourses: int\r\n        :type prerequisites: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findOrder(int numCourses, int** prerequisites, int prerequisitesRowSize, int *prerequisitesColSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] FindOrder(int numCourses, int[,] prerequisites) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} numCourses\r\n * @param {number[][]} prerequisites\r\n * @return {number[]}\r\n */\r\nvar findOrder = function(numCourses, prerequisites) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num_courses\r\n# @param {Integer[][]} prerequisites\r\n# @return {Integer[]}\r\ndef find_order(num_courses, prerequisites)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findOrder(_ numCourses: Int, _ prerequisites: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findOrder(numCourses int, prerequisites [][]int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findOrder(numCourses: Int, prerequisites: Array[Array[Int]]): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findOrder(numCourses: Int, prerequisites: Array<IntArray>): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"2\n[[1,0]]","testable":true,"templateMeta":{"name":"findOrder","params":[{"name":"numCourses","type":"integer"},{"name":"prerequisites","type":"pair<integer,integer>[]"}],"return":{"type":"integer[]"}}}