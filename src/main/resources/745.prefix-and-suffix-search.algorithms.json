{"id":746,"fid":745,"name":"Prefix and Suffix Search","slug":"prefix-and-suffix-search","link":"https://leetcode.com/problems/prefix-and-suffix-search/description/","percent":27.828246314399774,"level":"Hard","category":"algorithms","totalAC":"8.9K","totalSubmit":"31.8K","desc":"\r\nGiven many words, words[i] has weight i.\r\n\r\nDesign a class WordFilter that supports one function, WordFilter.f(String prefix, String suffix).\r\nIt will return the word with given prefix and suffix with maximum weight.  If no word exists, return -1.\r\n\r\n\r\nExamples:\r\n\r\nInput:\r\nWordFilter([\"apple\"])\r\nWordFilter.f(\"a\", \"e\") // returns 0\r\nWordFilter.f(\"b\", \"\") // returns -1\r\n\r\n\r\nNote:\r\n\r\nwords has length in range [1, 15000].\r\nFor each test case, up to words.length queries WordFilter.f may be made.\r\nwords[i] has length in range [1, 10].\r\nprefix, suffix have lengths in range [0, 10].\r\nwords[i] and prefix, suffix queries consist of lowercase letters only.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class WordFilter {\npublic:\n    WordFilter(vector<string> words) {\n        \n    }\n    \n    int f(string prefix, string suffix) {\n        \n    }\n};\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.f(prefix,suffix);\n */"},{"value":"java","text":"Java","defaultCode":"class WordFilter {\n\n    public WordFilter(String[] words) {\n        \n    }\n    \n    public int f(String prefix, String suffix) {\n        \n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.f(prefix,suffix);\n */"},{"value":"python","text":"Python","defaultCode":"class WordFilter(object):\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        \n\n    def f(self, prefix, suffix):\n        \"\"\"\n        :type prefix: str\n        :type suffix: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(prefix,suffix)"},{"value":"python3","text":"Python3","defaultCode":"class WordFilter:\n\n    def __init__(self, words):\n        \"\"\"\n        :type words: List[str]\n        \"\"\"\n        \n\n    def f(self, prefix, suffix):\n        \"\"\"\n        :type prefix: str\n        :type suffix: str\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter(words)\n# param_1 = obj.f(prefix,suffix)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} WordFilter;\n\nWordFilter* wordFilterCreate(char** words) {\n    \n}\n\nint wordFilterF(WordFilter* obj, char* prefix, char* suffix) {\n    \n}\n\nvoid wordFilterFree(WordFilter* obj) {\n    \n}\n\n/**\n * Your WordFilter struct will be instantiated and called as such:\n * struct WordFilter* obj = wordFilterCreate(words);\n * int param_1 = wordFilterF(obj, prefix, suffix);\n * wordFilterFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class WordFilter {\n\n    public WordFilter(string[] words) {\n        \n    }\n    \n    public int F(string prefix, string suffix) {\n        \n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * WordFilter obj = new WordFilter(words);\n * int param_1 = obj.F(prefix,suffix);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} words\n */\nvar WordFilter = function(words) {\n    \n};\n\n/** \n * @param {string} prefix \n * @param {string} suffix\n * @return {number}\n */\nWordFilter.prototype.f = function(prefix, suffix) {\n    \n};\n\n/** \n * Your WordFilter object will be instantiated and called as such:\n * var obj = Object.create(WordFilter).createNew(words)\n * var param_1 = obj.f(prefix,suffix)\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class WordFilter\n\n=begin\n    :type words: String[]\n=end\n    def initialize(words)\n        \n    end\n\n\n=begin\n    :type prefix: String\n    :type suffix: String\n    :rtype: Integer\n=end\n    def f(prefix, suffix)\n        \n    end\n\n\nend\n\n# Your WordFilter object will be instantiated and called as such:\n# obj = WordFilter.new(words)\n# param_1 = obj.f(prefix, suffix)"},{"value":"swift","text":"Swift","defaultCode":"\nclass WordFilter {\n\n    init(_ words: [String]) {\n        \n    }\n    \n    func f(_ prefix: String, _ suffix: String) -> Int {\n      \n    }\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * let obj = WordFilter(words)\n * let ret_1: Int = obj.f(prefix, suffix)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type WordFilter struct {\n    \n}\n\n\nfunc Constructor(words []string) WordFilter {\n    \n}\n\n\nfunc (this *WordFilter) F(prefix string, suffix string) int {\n    \n}\n\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * obj := Constructor(words);\n * param_1 := obj.F(prefix,suffix);\n */"},{"value":"scala","text":"Scala","defaultCode":"class WordFilter(_words: Array[String]) {\n\n    def f(prefix: String, suffix: String): Int = {\n        \n    }\n\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = new WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class WordFilter(words: Array<String>) {\n\n    fun f(prefix: String, suffix: String): Int {\n        \n    }\n\n}\n\n/**\n * Your WordFilter object will be instantiated and called as such:\n * var obj = WordFilter(words)\n * var param_1 = obj.f(prefix,suffix)\n */"}],"testcase":"[\"WordFilter\",\"f\"]\n[[[\"apple\"]], [\"a\",\"e\"]]","testable":true,"templateMeta":{"classname":"WordFilter","constructor":{"params":[{"type":"string[]","name":"words"}]},"methods":[{"name":"f","params":[{"type":"string","name":"prefix"},{"type":"string","name":"suffix"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}