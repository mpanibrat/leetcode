{"id":808,"fid":792,"name":"Number of Matching Subsequences","slug":"number-of-matching-subsequences","link":"https://leetcode.com/problems/number-of-matching-subsequences/description/","percent":39.00503350523423,"level":"Medium","category":"algorithms","totalAC":"12.6K","totalSubmit":"32.4K","desc":"Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S.\r\n\r\n\r\nExample :\r\nInput: \r\nS = \"abcde\"\r\nwords = [\"a\", \"bb\", \"acd\", \"ace\"]\r\nOutput: 3\r\nExplanation: There are three words in words that are a subsequence of S: \"a\", \"acd\", \"ace\".\r\n\r\n\r\nNote:\r\n\r\n\r\n\tAll words in words and S will only consists of lowercase letters.\r\n\tThe length of S will be in the range of [1, 50000].\r\n\tThe length of words will be in the range of [1, 5000].\r\n\tThe length of words[i] will be in the range of [1, 50].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numMatchingSubseq(string S, vector<string>& words) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numMatchingSubseq(String S, String[] words) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numMatchingSubseq(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numMatchingSubseq(self, S, words):\n        \"\"\"\n        :type S: str\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numMatchingSubseq(char* S, char** words, int wordsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumMatchingSubseq(string S, string[] words) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @param {string[]} words\n * @return {number}\n */\nvar numMatchingSubseq = function(S, words) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {String[]} words\n# @return {Integer}\ndef num_matching_subseq(s, words)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numMatchingSubseq(_ S: String, _ words: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numMatchingSubseq(S string, words []string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numMatchingSubseq(S: String, words: Array[String]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numMatchingSubseq(S: String, words: Array<String>): Int {\n        \n    }\n}"}],"testcase":"\"abcde\"\n[\"a\",\"bb\",\"acd\",\"ace\"]","testable":true,"templateMeta":{"name":"numMatchingSubseq","params":[{"name":"S","type":"string"},{"name":"words","type":"string[]"}],"return":{"type":"integer"}}}