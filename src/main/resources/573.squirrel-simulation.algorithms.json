{"id":573,"fid":573,"name":"Squirrel Simulation","slug":"squirrel-simulation","link":"https://leetcode.com/problems/squirrel-simulation/description/","percent":52.325581395348834,"level":"Medium","category":"algorithms","totalAC":"5K","totalSubmit":"9.6K","desc":"There's a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most one nut at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves.\r\nExample 1:\r\n\r\n\r\nInput: \r\nHeight : 5\r\nWidth : 7\r\nTree position : [2,2]\r\nSquirrel : [4,4]\r\nNuts : [[3,0], [2,5]]\r\nOutput: 12\r\nExplanation:\r\n​​​​​\r\n\r\n\r\nNote:\r\n\r\n\r\n\tAll given positions won't overlap.\r\n\tThe squirrel can take at most one nut at one time.\r\n\tThe given positions of nuts have no order.\r\n\tHeight and width are positive integers. 3 <= height * width <= 10,000.\r\n\tThe given positions contain at least one nut, only one tree and one squirrel.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minDistance(int height, int width, vector<int>& tree, vector<int>& squirrel, vector<vector<int>>& nuts) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minDistance(int height, int width, int[] tree, int[] squirrel, int[][] nuts) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minDistance(self, height, width, tree, squirrel, nuts):\r\n        \"\"\"\r\n        :type height: int\r\n        :type width: int\r\n        :type tree: List[int]\r\n        :type squirrel: List[int]\r\n        :type nuts: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minDistance(self, height, width, tree, squirrel, nuts):\r\n        \"\"\"\r\n        :type height: int\r\n        :type width: int\r\n        :type tree: List[int]\r\n        :type squirrel: List[int]\r\n        :type nuts: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minDistance(int height, int width, int* tree, int treeSize, int* squirrel, int squirrelSize, int** nuts, int nutsRowSize, int nutsColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinDistance(int height, int width, int[] tree, int[] squirrel, int[,] nuts) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} height\r\n * @param {number} width\r\n * @param {number[]} tree\r\n * @param {number[]} squirrel\r\n * @param {number[][]} nuts\r\n * @return {number}\r\n */\r\nvar minDistance = function(height, width, tree, squirrel, nuts) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} height\r\n# @param {Integer} width\r\n# @param {Integer[]} tree\r\n# @param {Integer[]} squirrel\r\n# @param {Integer[][]} nuts\r\n# @return {Integer}\r\ndef min_distance(height, width, tree, squirrel, nuts)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func minDistance(_ height: Int, _ width: Int, _ tree: [Int], _ squirrel: [Int], _ nuts: [[Int]]) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func minDistance(height int, width int, tree []int, squirrel []int, nuts [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minDistance(height: Int, width: Int, tree: Array[Int], squirrel: Array[Int], nuts: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minDistance(height: Int, width: Int, tree: IntArray, squirrel: IntArray, nuts: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"5\n7\n[2,2]\n[4,4]\n[[3,0], [2,5]]","testable":true,"templateMeta":{"name":"minDistance","params":[{"name":"height","type":"integer"},{"name":"width","type":"integer"},{"name":"tree","type":"integer[]"},{"name":"squirrel","type":"integer[]"},{"name":"nuts","type":"integer[][]"}],"return":{"type":"integer"}}}