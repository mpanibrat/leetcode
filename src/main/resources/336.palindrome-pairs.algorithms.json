{"id":336,"fid":336,"name":"Palindrome Pairs","slug":"palindrome-pairs","link":"https://leetcode.com/problems/palindrome-pairs/description/","percent":28.402673638791175,"level":"Hard","category":"algorithms","totalAC":"50.9K","totalSubmit":"179.4K","desc":"Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.\r\n\r\nExample 1:\r\n\r\n\r\n\r\nInput: [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\r\nOutput: [[0,1],[1,0],[3,2],[2,4]] \r\nExplanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [\"bat\",\"tab\",\"cat\"]\r\nOutput: [[0,1],[1,0]] \r\nExplanation: The palindromes are [\"battab\",\"tabbat\"]\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> palindromePairs(vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> palindromePairs(String[] words) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def palindromePairs(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: List[List[int]]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def palindromePairs(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: List[List[int]]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** palindromePairs(char** words, int wordsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> PalindromePairs(string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n * @return {number[][]}\r\n */\r\nvar palindromePairs = function(words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\r\n# @return {Integer[][]}\r\ndef palindrome_pairs(words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func palindromePairs(_ words: [String]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func palindromePairs(words []string) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def palindromePairs(words: Array[String]): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun palindromePairs(words: Array<String>): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"[\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]","testable":true,"templateMeta":{"name":"palindromePairs","params":[{"name":"words","type":"string[]"}],"return":{"type":"list<list<integer>>"}}}