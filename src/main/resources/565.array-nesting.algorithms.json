{"id":565,"fid":565,"name":"Array Nesting","slug":"array-nesting","link":"https://leetcode.com/problems/array-nesting/description/","percent":50.313894561682176,"level":"Medium","category":"algorithms","totalAC":"26.6K","totalSubmit":"52.9K","desc":"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.\r\n\r\nSuppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]â€¦ By that analogy, we stop adding right before a duplicate element occurs in S.\r\n\r\nExample 1:\r\n\r\nInput: A = [5,4,0,3,1,6,2]\r\nOutput: 4\r\nExplanation: \r\nA[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.\r\n\r\nOne of the longest S[K]:\r\nS[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}\r\n\r\n\r\n\r\nNote:\r\n\r\nN is an integer within the range [1, 20,000].\r\nThe elements of A are all distinct.\r\nEach element of A is an integer within the range [0, N-1].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int arrayNesting(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int arrayNesting(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def arrayNesting(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def arrayNesting(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int arrayNesting(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int ArrayNesting(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar arrayNesting = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef array_nesting(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func arrayNesting(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func arrayNesting(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def arrayNesting(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"}],"testcase":"[5,4,0,3,1,6,2]","testable":true,"templateMeta":{"name":"arrayNesting","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}