{"id":785,"fid":772,"name":"Basic Calculator III","slug":"basic-calculator-iii","link":"https://leetcode.com/problems/basic-calculator-iii/description/","percent":41.99958276833212,"level":"Hard","category":"algorithms","totalAC":"8.1K","totalSubmit":"19.2K","desc":"Implement a basic calculator to evaluate a simple expression string.\r\n\r\nThe expression string may contain open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces  .\r\n\r\nThe expression string contains only non-negative integers, +, -, *, / operators , open ( and closing parentheses ) and empty spaces  . The integer division should truncate toward zero.\r\n\r\nYou may assume that the given expression is always valid. All intermediate results will be in the range of [-2147483648, 2147483647].\r\n\r\nSome examples:\r\n\r\n\r\n\"1 + 1\" = 2\r\n\" 6-4 / 2 \" = 4\r\n\"2*(5+5*2)/3+(6/2+8)\" = 21\r\n\"(2+6* 3+5- (3*14/7+2)*5)+3\"=-12\r\n\r\n\r\nÂ \r\n\r\nNote: Do not use the eval built-in library function.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int calculate(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int calculate(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int calculate(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Calculate(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {number}\n */\nvar calculate = function(s) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef calculate(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func calculate(_ s: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func calculate(s string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def calculate(s: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun calculate(s: String): Int {\n        \n    }\n}"}],"testcase":"\"1 + 1\"","testable":true,"templateMeta":{"name":"calculate","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}