{"id":207,"fid":207,"name":"Course Schedule","slug":"course-schedule","link":"https://leetcode.com/problems/course-schedule/description/","percent":35.2577543280099,"level":"Medium","category":"algorithms","totalAC":"159.2K","totalSubmit":"451.6K","desc":"There are a total of n courses you have to take, labeled from 0 to n-1.\r\n\r\nSome courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]\r\n\r\nGiven the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?\r\n\r\nExample 1:\r\n\r\n\r\nInput: 2, [[1,0]] \r\nOutput: true\r\nExplanation: There are a total of 2 courses to take. \r\n             To take course 1 you should have finished course 0. So it is possible.\r\n\r\nExample 2:\r\n\r\n\r\nInput: 2, [[1,0],[0,1]]\r\nOutput: false\r\nExplanation: There are a total of 2 courses to take. \r\n             To take course 1 you should have finished course 0, and to take course 0 you should\r\n             also have finished course 1. So it is impossible.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tThe input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.\r\n\tYou may assume that there are no duplicate edges in the input prerequisites.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def canFinish(self, numCourses, prerequisites):\r\n        \"\"\"\r\n        :type numCourses: int\r\n        :type prerequisites: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def canFinish(self, numCourses, prerequisites):\r\n        \"\"\"\r\n        :type numCourses: int\r\n        :type prerequisites: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool canFinish(int numCourses, int** prerequisites, int prerequisitesRowSize, int *prerequisitesColSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CanFinish(int numCourses, int[,] prerequisites) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} numCourses\r\n * @param {number[][]} prerequisites\r\n * @return {boolean}\r\n */\r\nvar canFinish = function(numCourses, prerequisites) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num_courses\r\n# @param {Integer[][]} prerequisites\r\n# @return {Boolean}\r\ndef can_finish(num_courses, prerequisites)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canFinish(_ numCourses: Int, _ prerequisites: [[Int]]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canFinish(numCourses int, prerequisites [][]int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def canFinish(numCourses: Int, prerequisites: Array[Array[Int]]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun canFinish(numCourses: Int, prerequisites: Array<IntArray>): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"2\n[[1,0]]","testable":true,"templateMeta":{"name":"canFinish","params":[{"name":"numCourses","type":"integer"},{"name":"prerequisites","type":"pair<integer,integer>[]"}],"return":{"type":"boolean"}}}