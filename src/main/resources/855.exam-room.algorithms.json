{"id":885,"fid":855,"name":"Exam Room","slug":"exam-room","link":"https://leetcode.com/problems/exam-room/description/","percent":33.33653476757588,"level":"Medium","category":"algorithms","totalAC":"6.9K","totalSubmit":"20.8K","desc":"In an exam room, there are N seats in a single row, numbered 0, 1, 2, ..., N-1.\r\n\r\nWhen a student enters the room, they must sit in the seat that maximizes the distance to the closest person.  If there are multiple such seats, they sit in the seat with the lowest number.  (Also, if no one is in the room, then the student sits at seat number 0.)\r\n\r\nReturn a class ExamRoom(int N) that exposes two functions: ExamRoom.seat() returning an int representing what seat the student sat in, and ExamRoom.leave(int p) representing that the student in seat number p now leaves the room.  It is guaranteed that any calls to ExamRoom.leave(p) have a student sitting in seat p.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"ExamRoom\",\"seat\",\"seat\",\"seat\",\"seat\",\"leave\",\"seat\"], [[10],[],[],[],[],[4],[]]\r\nOutput: [null,0,9,4,2,null,5]\r\nExplanation:\r\nExamRoom(10) -> null\r\nseat() -> 0, no one is in the room, then the student sits at seat number 0.\r\nseat() -> 9, the student sits at the last seat number 9.\r\nseat() -> 4, the student sits at the last seat number 4.\r\nseat() -> 2, the student sits at the last seat number 2.\r\nleave(4) -> null\r\nseat() -> 5, the student sits at the last seat number 5.\r\n\r\n\r\n​​​​​​​\r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 10^9\r\n\tExamRoom.seat() and ExamRoom.leave() will be called at most 10^4 times across all test cases.\r\n\tCalls to ExamRoom.leave(p) are guaranteed to have a student currently sitting in seat number p.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class ExamRoom {\r\npublic:\r\n    ExamRoom(int N) {\r\n        \r\n    }\r\n    \r\n    int seat() {\r\n        \r\n    }\r\n    \r\n    void leave(int p) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your ExamRoom object will be instantiated and called as such:\r\n * ExamRoom obj = new ExamRoom(N);\r\n * int param_1 = obj.seat();\r\n * obj.leave(p);\r\n */"},{"value":"java","text":"Java","defaultCode":"class ExamRoom {\r\n\r\n    public ExamRoom(int N) {\r\n        \r\n    }\r\n    \r\n    public int seat() {\r\n        \r\n    }\r\n    \r\n    public void leave(int p) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your ExamRoom object will be instantiated and called as such:\r\n * ExamRoom obj = new ExamRoom(N);\r\n * int param_1 = obj.seat();\r\n * obj.leave(p);\r\n */"},{"value":"python","text":"Python","defaultCode":"class ExamRoom(object):\r\n\r\n    def __init__(self, N):\r\n        \"\"\"\r\n        :type N: int\r\n        \"\"\"\r\n        \r\n\r\n    def seat(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def leave(self, p):\r\n        \"\"\"\r\n        :type p: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your ExamRoom object will be instantiated and called as such:\r\n# obj = ExamRoom(N)\r\n# param_1 = obj.seat()\r\n# obj.leave(p)"},{"value":"python3","text":"Python3","defaultCode":"class ExamRoom:\r\n\r\n    def __init__(self, N):\r\n        \"\"\"\r\n        :type N: int\r\n        \"\"\"\r\n        \r\n\r\n    def seat(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def leave(self, p):\r\n        \"\"\"\r\n        :type p: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your ExamRoom object will be instantiated and called as such:\r\n# obj = ExamRoom(N)\r\n# param_1 = obj.seat()\r\n# obj.leave(p)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} ExamRoom;\r\n\r\nExamRoom* examRoomCreate(int N) {\r\n    \r\n}\r\n\r\nint examRoomSeat(ExamRoom* obj) {\r\n    \r\n}\r\n\r\nvoid examRoomLeave(ExamRoom* obj, int p) {\r\n    \r\n}\r\n\r\nvoid examRoomFree(ExamRoom* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your ExamRoom struct will be instantiated and called as such:\r\n * struct ExamRoom* obj = examRoomCreate(N);\r\n * int param_1 = examRoomSeat(obj);\r\n * examRoomLeave(obj, p);\r\n * examRoomFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class ExamRoom {\r\n\r\n    public ExamRoom(int N) {\r\n        \r\n    }\r\n    \r\n    public int Seat() {\r\n        \r\n    }\r\n    \r\n    public void Leave(int p) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your ExamRoom object will be instantiated and called as such:\r\n * ExamRoom obj = new ExamRoom(N);\r\n * int param_1 = obj.Seat();\r\n * obj.Leave(p);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} N\r\n */\r\nvar ExamRoom = function(N) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nExamRoom.prototype.seat = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} p\r\n * @return {void}\r\n */\r\nExamRoom.prototype.leave = function(p) {\r\n    \r\n};\r\n\r\n/** \r\n * Your ExamRoom object will be instantiated and called as such:\r\n * var obj = Object.create(ExamRoom).createNew(N)\r\n * var param_1 = obj.seat()\r\n * obj.leave(p)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class ExamRoom\r\n\r\n=begin\r\n    :type n: Integer\r\n=end\r\n    def initialize(n)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def seat()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type p: Integer\r\n    :rtype: Void\r\n=end\r\n    def leave(p)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your ExamRoom object will be instantiated and called as such:\r\n# obj = ExamRoom.new(n)\r\n# param_1 = obj.seat()\r\n# obj.leave(p)"},{"value":"swift","text":"Swift","defaultCode":"\nclass ExamRoom {\n\n    init(_ N: Int) {\n        \n    }\n    \n    func seat() -> Int {\n      \n    }\n    \n    func leave(_ p: Int) {\n      \n    }\n}\n\n/**\n * Your ExamRoom object will be instantiated and called as such:\n * let obj = ExamRoom(N)\n * let ret_1: Int = obj.seat()\n * obj.leave(p)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type ExamRoom struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(N int) ExamRoom {\r\n    \r\n}\r\n\r\n\r\nfunc (this *ExamRoom) Seat() int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *ExamRoom) Leave(p int)  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your ExamRoom object will be instantiated and called as such:\r\n * obj := Constructor(N);\r\n * param_1 := obj.Seat();\r\n * obj.Leave(p);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class ExamRoom(_N: Int) {\r\n\r\n    def seat(): Int = {\r\n        \r\n    }\r\n\r\n    def leave(p: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your ExamRoom object will be instantiated and called as such:\r\n * var obj = new ExamRoom(N)\r\n * var param_1 = obj.seat()\r\n * obj.leave(p)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class ExamRoom(N: Int) {\r\n\r\n    fun seat(): Int {\r\n        \r\n    }\r\n\r\n    fun leave(p: Int) {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your ExamRoom object will be instantiated and called as such:\r\n * var obj = ExamRoom(N)\r\n * var param_1 = obj.seat()\r\n * obj.leave(p)\r\n */"}],"testcase":"[\"ExamRoom\",\"seat\",\"seat\",\"seat\",\"seat\",\"leave\",\"seat\"]\n[[10],[],[],[],[],[4],[]]","testable":true,"templateMeta":{"classname":"ExamRoom","maxbytesperline":200000,"constructor":{"params":[{"type":"integer","name":"N"}]},"methods":[{"name":"seat","params":[],"return":{"type":"integer"}},{"name":"leave","params":[{"type":"integer","name":"p"}],"return":{"type":"void"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}