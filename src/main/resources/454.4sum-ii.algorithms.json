{"id":454,"fid":454,"name":"4Sum II","slug":"4sum-ii","link":"https://leetcode.com/problems/4sum-ii/description/","percent":48.57326556855061,"level":"Medium","category":"algorithms","totalAC":"47.6K","totalSubmit":"98K","desc":"Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.\r\n\r\nTo make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.\r\n\r\nExample:\r\n\r\nInput:\r\nA = [ 1, 2]\r\nB = [-2,-1]\r\nC = [-1, 2]\r\nD = [ 0, 2]\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nThe two tuples are:\r\n1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0\r\n2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int fourSumCount(vector<int>& A, vector<int>& B, vector<int>& C, vector<int>& D) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int fourSumCount(int[] A, int[] B, int[] C, int[] D) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def fourSumCount(self, A, B, C, D):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :type B: List[int]\r\n        :type C: List[int]\r\n        :type D: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def fourSumCount(self, A, B, C, D):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :type D: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int fourSumCount(int* A, int ASize, int* B, int BSize, int* C, int CSize, int* D, int DSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FourSumCount(int[] A, int[] B, int[] C, int[] D) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} A\r\n * @param {number[]} B\r\n * @param {number[]} C\r\n * @param {number[]} D\r\n * @return {number}\r\n */\r\nvar fourSumCount = function(A, B, C, D) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\r\n# @param {Integer[]} b\r\n# @param {Integer[]} c\r\n# @param {Integer[]} d\r\n# @return {Integer}\r\ndef four_sum_count(a, b, c, d)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func fourSumCount(_ A: [Int], _ B: [Int], _ C: [Int], _ D: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func fourSumCount(A []int, B []int, C []int, D []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def fourSumCount(A: Array[Int], B: Array[Int], C: Array[Int], D: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun fourSumCount(A: IntArray, B: IntArray, C: IntArray, D: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,2]\n[-2,-1]\n[-1,2]\n[0,2]","testable":true,"templateMeta":{"name":"fourSumCount","params":[{"name":"A","type":"integer[]"},{"name":"B","type":"integer[]"},{"name":"C","type":"integer[]"},{"name":"D","type":"integer[]"}],"return":{"type":"integer"}}}