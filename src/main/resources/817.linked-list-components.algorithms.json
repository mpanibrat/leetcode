{"id":835,"fid":817,"name":"Linked List Components","slug":"linked-list-components","link":"https://leetcode.com/problems/linked-list-components/description/","percent":51.85813861100076,"level":"Medium","category":"algorithms","totalAC":"14.4K","totalSubmit":"27.7K","desc":"We are given head, the head node of a linked list containing unique integer values.\r\n\r\nWe are also given the list G, a subset of the values in the linked list.\r\n\r\nReturn the number of connected components in G, where two values are connected if they appear consecutively in the linked list.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\nhead: 0->1->2->3\r\nG = [0, 1, 3]\r\nOutput: 2\r\nExplanation: \r\n0 and 1 are connected, so [0, 1] and [3] are the two connected components.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\nhead: 0->1->2->3->4\r\nG = [0, 3, 1, 4]\r\nOutput: 2\r\nExplanation: \r\n0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\r\n\r\n\r\nNote: \r\n\r\n\r\n\tIf N is the length of the linked list given by head, 1 <= N <= 10000.\r\n\tThe value of each node in the linked list will be in the range [0, N - 1].\r\n\t1 <= G.length <= 10000.\r\n\tG is a subset of all values in the linked list.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    int numComponents(ListNode* head, vector<int>& G) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public int numComponents(ListNode head, int[] G) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def numComponents(self, head, G):\n        \"\"\"\n        :type head: ListNode\n        :type G: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def numComponents(self, head, G):\n        \"\"\"\n        :type head: ListNode\n        :type G: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nint numComponents(struct ListNode* head, int* G, int GSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public int NumComponents(ListNode head, int[] G) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @param {number[]} G\n * @return {number}\n */\nvar numComponents = function(head, G) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @param {Integer[]} g\n# @return {Integer}\ndef num_components(head, g)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func numComponents(_ head: ListNode?, _ G: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc numComponents(head *ListNode, G []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def numComponents(head: ListNode, G: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int = 0) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun numComponents(head: ListNode?, G: IntArray): Int {\n        \n    }\n}"}],"testcase":"[0,1,2,3]\n[0,1,3]","testable":true,"templateMeta":{"name":"numComponents","params":[{"name":"head","type":"ListNode"},{"name":"G","type":"integer[]"}],"return":{"type":"integer"}}}