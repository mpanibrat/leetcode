{"id":419,"fid":419,"name":"Battleships in a Board","slug":"battleships-in-a-board","link":"https://leetcode.com/problems/battleships-in-a-board/description/","percent":64.24936702576578,"level":"Medium","category":"algorithms","totalAC":"51.8K","totalSubmit":"80.6K","desc":"Given an 2D board, count how many battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:\r\n\r\n\r\nYou receive a valid board, made of only battleships or empty slots.\r\nBattleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.\r\nAt least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.\r\n\r\n\r\nExample:\r\nX..X\r\n...X\r\n...X\r\n\r\nIn the above board there are 2 battleships.\r\n\r\nInvalid Example:\r\n...X\r\nXXXX\r\n...X\r\n\r\nThis is an invalid board that you will not receive - as battleships will always have a cell separating between them.\r\n\r\nFollow up:Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int countBattleships(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int countBattleships(char[][] board) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def countBattleships(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def countBattleships(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int countBattleships(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int CountBattleships(char[,] board) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} board\r\n * @return {number}\r\n */\r\nvar countBattleships = function(board) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\r\n# @return {Integer}\r\ndef count_battleships(board)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countBattleships(_ board: [[Character]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func countBattleships(board [][]byte) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countBattleships(board: Array[Array[Char]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countBattleships(board: Array<CharArray>): Int {\n        \n    }\n}"}],"testcase":"[[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]","testable":true,"templateMeta":{"name":"countBattleships","params":[{"name":"board","type":"character[][]"}],"return":{"type":"integer"}}}