{"id":770,"fid":765,"name":"Couples Holding Hands","slug":"couples-holding-hands","link":"https://leetcode.com/problems/couples-holding-hands/description/","percent":49.010242530382634,"level":"Hard","category":"algorithms","totalAC":"9.2K","totalSubmit":"18.8K","desc":"\r\nN couples sit in 2N seats arranged in a row and want to hold hands.  We want to know the minimum number of swaps so that every couple is sitting side by side.  A swap consists of choosing any two people, then they stand up and switch seats. \r\n\r\nThe people and seats are represented by an integer from 0 to 2N-1, the couples are numbered in order, the first couple being (0, 1), the second couple being (2, 3), and so on with the last couple being (2N-2, 2N-1).\r\n\r\nThe couples' initial seating is given by row[i] being the value of the person who is initially sitting in the i-th seat.\r\n\r\nExample 1:\r\nInput: row = [0, 2, 1, 3]\r\nOutput: 1\r\nExplanation: We only need to swap the second (row[1]) and third (row[2]) person.\r\n\r\n\r\nExample 2:\r\nInput: row = [3, 2, 0, 1]\r\nOutput: 0\r\nExplanation: All couples are already seated side by side.\r\n\r\n\r\n\r\nNote:\r\n \r\n len(row) is even and in the range of [4, 60].\r\n row is guaranteed to be a permutation of 0...len(row)-1.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minSwapsCouples(vector<int>& row) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minSwapsCouples(int[] row) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int minSwapsCouples(int* row, int rowSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinSwapsCouples(int[] row) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} row\n * @return {number}\n */\nvar minSwapsCouples = function(row) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} row\n# @return {Integer}\ndef min_swaps_couples(row)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minSwapsCouples(_ row: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minSwapsCouples(row []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minSwapsCouples(row: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minSwapsCouples(row: IntArray): Int {\n        \n    }\n}"}],"testcase":"[0,2,1,3]","testable":true,"templateMeta":{"name":"minSwapsCouples","params":[{"name":"row","type":"integer[]"}],"return":{"type":"integer"}}}