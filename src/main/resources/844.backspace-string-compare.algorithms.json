{"id":874,"fid":844,"name":"Backspace String Compare","slug":"backspace-string-compare","link":"https://leetcode.com/problems/backspace-string-compare/description/","percent":43.36015572046786,"level":"Easy","category":"algorithms","totalAC":"24.9K","totalSubmit":"57.5K","desc":"Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: S = \"ab#c\", T = \"ad#c\"\r\nOutput: true\r\nExplanation: Both S and T become \"ac\".\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: S = \"ab##\", T = \"c#d#\"\r\nOutput: true\r\nExplanation: Both S and T become \"\".\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: S = \"a##c\", T = \"#a#c\"\r\nOutput: true\r\nExplanation: Both S and T become \"c\".\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: S = \"a#c\", T = \"b\"\r\nOutput: false\r\nExplanation: S becomes \"c\" while T becomes \"b\".\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= S.length <= 200\r\n\t1 <= T.length <= 200\r\n\tS and T only contain lowercase letters and '#' characters.\r\n\r\n\r\nFollow up:\r\n\r\n\r\n\tCan you solve it in O(N) time and O(1) space?\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool backspaceCompare(string S, string T) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean backspaceCompare(String S, String T) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def backspaceCompare(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def backspaceCompare(self, S, T):\n        \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool backspaceCompare(char* S, char* T) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool BackspaceCompare(string S, string T) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @param {string} T\n * @return {boolean}\n */\nvar backspaceCompare = function(S, T) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {String} t\n# @return {Boolean}\ndef backspace_compare(s, t)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func backspaceCompare(_ S: String, _ T: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func backspaceCompare(S string, T string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def backspaceCompare(S: String, T: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun backspaceCompare(S: String, T: String): Boolean {\n        \n    }\n}"}],"testcase":"\"ab#c\"\n\"ad#c\"","testable":true,"templateMeta":{"name":"backspaceCompare","params":[{"name":"S","type":"string"},{"name":"T","type":"string"}],"return":{"type":"boolean"}}}