{"id":212,"fid":212,"name":"Word Search II","slug":"word-search-ii","link":"https://leetcode.com/problems/word-search-ii/description/","percent":26.225874211506277,"level":"Hard","category":"algorithms","totalAC":"83.5K","totalSubmit":"318.5K","desc":"Given a 2D board and a list of words from the dictionary, find all words in the board.\r\n\r\nEach word must be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\r\n\r\nExample:\r\n\r\n\r\nInput: \r\nwords = [\"oath\",\"pea\",\"eat\",\"rain\"] and board =\r\n[\r\n  ['o','a','a','n'],\r\n  ['e','t','a','e'],\r\n  ['i','h','k','r'],\r\n  ['i','f','l','v']\r\n]\r\n\r\nOutput:Â [\"eat\",\"oath\"]\r\n\r\n\r\nNote:\r\nYou may assume that all inputs are consist of lowercase letters a-z.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> findWords(char[][] board, String[] words) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findWords(self, board, words):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findWords(self, board, words):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findWords(char** board, int boardRowSize, int boardColSize, char** words, int wordsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> FindWords(char[,] board, string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} board\r\n * @param {string[]} words\r\n * @return {string[]}\r\n */\r\nvar findWords = function(board, words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\r\n# @param {String[]} words\r\n# @return {String[]}\r\ndef find_words(board, words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findWords(_ board: [[Character]], _ words: [String]) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findWords(board [][]byte, words []string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findWords(board: Array[Array[Char]], words: Array[String]): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findWords(board: Array<CharArray>, words: Array<String>): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"[[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]]\n[\"oath\",\"pea\",\"eat\",\"rain\"]","testable":true,"templateMeta":{"name":"findWords","params":[{"name":"board","type":"character[][]"},{"name":"words","type":"string[]"}],"return":{"type":"list<string>"}}}