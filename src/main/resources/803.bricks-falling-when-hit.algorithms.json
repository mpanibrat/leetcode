{"id":821,"fid":803,"name":"Bricks Falling When Hit","slug":"bricks-falling-when-hit","link":"https://leetcode.com/problems/bricks-falling-when-hit/description/","percent":24.607469174132884,"level":"Hard","category":"algorithms","totalAC":"5.5K","totalSubmit":"22.5K","desc":"We have a grid of 1s and 0s; the 1s in a cell represent bricks.  A brick will not drop if and only if it is directly connected to the top of the grid, or at least one of its (4-way) adjacent bricks will not drop.\r\n\r\nWe will do some erasures sequentially. Each time we want to do the erasure at the location (i, j), the brick (if it exists) on that location will disappear, and then some other bricks may drop because of that erasure.\r\n\r\nReturn an array representing the number of bricks that will drop after each erasure in sequence.\r\n\r\n\r\nExample 1:\r\nInput: \r\ngrid = [[1,0,0,0],[1,1,1,0]]\r\nhits = [[1,0]]\r\nOutput: [2]\r\nExplanation: \r\nIf we erase the brick at (1, 0), the brick at (1, 1) and (1, 2) will drop. So we should return 2.\r\n\r\n\r\nExample 2:\r\nInput: \r\ngrid = [[1,0,0,0],[1,1,0,0]]\r\nhits = [[1,1],[1,0]]\r\nOutput: [0,0]\r\nExplanation: \r\nWhen we erase the brick at (1, 0), the brick at (1, 1) has already disappeared due to the last move. So each erasure will cause no bricks dropping.  Note that the erased brick (1, 0) will not be counted as a dropped brick.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe number of rows and columns in the grid will be in the range [1, 200].\r\n\tThe number of erasures will not exceed the area of the grid.\r\n\tIt is guaranteed that each erasure will be different from any other erasure, and located inside the grid.\r\n\tAn erasure may refer to a location with no brick - if it does, no bricks drop.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> hitBricks(vector<vector<int>>& grid, vector<vector<int>>& hits) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] hitBricks(int[][] grid, int[][] hits) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def hitBricks(self, grid, hits):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type hits: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def hitBricks(self, grid, hits):\n        \"\"\"\n        :type grid: List[List[int]]\n        :type hits: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* hitBricks(int** grid, int gridRowSize, int *gridColSizes, int** hits, int hitsRowSize, int *hitsColSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] HitBricks(int[][] grid, int[][] hits) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @param {number[][]} hits\n * @return {number[]}\n */\nvar hitBricks = function(grid, hits) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @param {Integer[][]} hits\n# @return {Integer[]}\ndef hit_bricks(grid, hits)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func hitBricks(_ grid: [[Int]], _ hits: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func hitBricks(grid [][]int, hits [][]int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def hitBricks(grid: Array[Array[Int]], hits: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun hitBricks(grid: Array<IntArray>, hits: Array<IntArray>): IntArray {\n        \n    }\n}"}],"testcase":"[[1,0,0,0],[1,1,1,0]]\n[[1,0]]","testable":true,"templateMeta":{"name":"hitBricks","params":[{"name":"grid","type":"integer[][]"},{"name":"hits","type":"integer[][]"}],"return":{"type":"integer[]"}}}