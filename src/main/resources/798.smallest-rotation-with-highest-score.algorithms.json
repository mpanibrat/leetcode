{"id":814,"fid":798,"name":"Smallest Rotation with Highest Score","slug":"smallest-rotation-with-highest-score","link":"https://leetcode.com/problems/smallest-rotation-with-highest-score/description/","percent":36.65445665445665,"level":"Hard","category":"algorithms","totalAC":"3K","totalSubmit":"8.2K","desc":" Given an array A, we may rotate it by a non-negative integer K so that the array becomes A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1].  Afterward, any entries that are less than or equal to their index are worth 1 point. \r\n\r\nFor example, if we have [2, 4, 1, 3, 0], and we rotate by K = 2, it becomes [1, 3, 0, 2, 4].  This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\r\n\r\nOver all possible rotations, return the rotation index K that corresponds to the highest score we could receive.  If there are multiple answers, return the smallest such index K.\r\n\r\n\r\nExample 1:\r\nInput: [2, 3, 1, 4, 0]\r\nOutput: 3\r\nExplanation:  \r\nScores for each K are listed below: \r\nK = 0,  A = [2,3,1,4,0],    score 2\r\nK = 1,  A = [3,1,4,0,2],    score 3\r\nK = 2,  A = [1,4,0,2,3],    score 3\r\nK = 3,  A = [4,0,2,3,1],    score 4\r\nK = 4,  A = [0,2,3,1,4],    score 3\r\n\r\n\r\nSo we should choose K = 3, which has the highest score.\r\n\r\n \r\n\r\n\r\nExample 2:\r\nInput: [1, 3, 0, 2, 4]\r\nOutput: 0\r\nExplanation:  A will always have 3 points no matter how it shifts.\r\nSo we will choose the smallest K, which is 0.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tA will have length at most 20000.\r\n\tA[i] will be in the range [0, A.length].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int bestRotation(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int bestRotation(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def bestRotation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def bestRotation(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int bestRotation(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int BestRotation(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar bestRotation = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer}\ndef best_rotation(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func bestRotation(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func bestRotation(A []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def bestRotation(A: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun bestRotation(A: IntArray): Int {\n        \n    }\n}"}],"testcase":"[2,3,1,4,0]","testable":true,"templateMeta":{"name":"bestRotation","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}