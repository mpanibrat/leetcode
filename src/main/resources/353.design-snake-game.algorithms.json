{"id":353,"fid":353,"name":"Design Snake Game","slug":"design-snake-game","link":"https://leetcode.com/problems/design-snake-game/description/","percent":28.405549784834545,"level":"Medium","category":"algorithms","totalAC":"15.3K","totalSubmit":"53.9K","desc":"Design a Snake game that is played on a device with screen size = width x height. Play the game online if you are not familiar with the game.\r\n\r\nThe snake is initially positioned at the top left corner (0,0) with length = 1 unit.\r\n\r\nYou are given a list of food's positions in row-column order. When a snake eats the food, its length and the game's score both increase by 1.\r\n\r\nEach food appears one by one on the screen. For example, the second food will not appear until the first food was eaten by the snake.\r\n\r\nWhen a food does appear on the screen, it is guaranteed that it will not appear on a block occupied by the snake.\r\n\r\nExample:\r\n\r\n\r\nGiven width = 3, height = 2, and food = [[1,2],[0,1]].\r\n\r\nSnake snake = new Snake(width, height, food);\r\n\r\nInitially the snake appears at position (0,0) and the food at (1,2).\r\n\r\n|S| | |\r\n| | |F|\r\n\r\nsnake.move(\"R\"); -> Returns 0\r\n\r\n| |S| |\r\n| | |F|\r\n\r\nsnake.move(\"D\"); -> Returns 0\r\n\r\n| | | |\r\n| |S|F|\r\n\r\nsnake.move(\"R\"); -> Returns 1 (Snake eats the first food and right after that, the second food appears at (0,1) )\r\n\r\n| |F| |\r\n| |S|S|\r\n\r\nsnake.move(\"U\"); -> Returns 1\r\n\r\n| |F|S|\r\n| | |S|\r\n\r\nsnake.move(\"L\"); -> Returns 2 (Snake eats the second food)\r\n\r\n| |S|S|\r\n| | |S|\r\n\r\nsnake.move(\"U\"); -> Returns -1 (Game over because snake collides with border)\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class SnakeGame {\r\npublic:\r\n    /** Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\r\n    SnakeGame(int width, int height, vector<pair<int, int>> food) {\r\n        \r\n    }\r\n    \r\n    /** Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. */\r\n    int move(string direction) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your SnakeGame object will be instantiated and called as such:\r\n * SnakeGame obj = new SnakeGame(width, height, food);\r\n * int param_1 = obj.move(direction);\r\n */"},{"value":"java","text":"Java","defaultCode":"class SnakeGame {\r\n\r\n    /** Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\r\n    public SnakeGame(int width, int height, int[][] food) {\r\n        \r\n    }\r\n    \r\n    /** Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. */\r\n    public int move(String direction) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your SnakeGame object will be instantiated and called as such:\r\n * SnakeGame obj = new SnakeGame(width, height, food);\r\n * int param_1 = obj.move(direction);\r\n */"},{"value":"python","text":"Python","defaultCode":"class SnakeGame(object):\r\n\r\n    def __init__(self, width, height, food):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].\r\n        :type width: int\r\n        :type height: int\r\n        :type food: List[List[int]]\r\n        \"\"\"\r\n        \r\n\r\n    def move(self, direction):\r\n        \"\"\"\r\n        Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body.\r\n        :type direction: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your SnakeGame object will be instantiated and called as such:\r\n# obj = SnakeGame(width, height, food)\r\n# param_1 = obj.move(direction)"},{"value":"python3","text":"Python3","defaultCode":"class SnakeGame:\r\n\r\n    def __init__(self, width, height, food):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].\r\n        :type width: int\r\n        :type height: int\r\n        :type food: List[List[int]]\r\n        \"\"\"\r\n        \r\n\r\n    def move(self, direction):\r\n        \"\"\"\r\n        Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body.\r\n        :type direction: str\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your SnakeGame object will be instantiated and called as such:\r\n# obj = SnakeGame(width, height, food)\r\n# param_1 = obj.move(direction)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} SnakeGame;\r\n\r\n/** Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\r\nSnakeGame* snakeGameCreate(int width, int height, int** food, int foodSize) {\r\n    \r\n}\r\n\r\n/** Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. */\r\nint snakeGameMove(SnakeGame* obj, char* direction) {\r\n    \r\n}\r\n\r\nvoid snakeGameFree(SnakeGame* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your SnakeGame struct will be instantiated and called as such:\r\n * struct SnakeGame* obj = snakeGameCreate(width, height, food, foodSize);\r\n * int param_1 = snakeGameMove(obj, direction);\r\n * snakeGameFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class SnakeGame {\r\n\r\n    /** Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\r\n    public SnakeGame(int width, int height, int[,] food) {\r\n        \r\n    }\r\n    \r\n    /** Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. */\r\n    public int Move(string direction) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your SnakeGame object will be instantiated and called as such:\r\n * SnakeGame obj = new SnakeGame(width, height, food);\r\n * int param_1 = obj.Move(direction);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {number[][]} food\r\n */\r\nvar SnakeGame = function(width, height, food) {\r\n    \r\n};\r\n\r\n/**\r\n * Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. \r\n * @param {string} direction\r\n * @return {number}\r\n */\r\nSnakeGame.prototype.move = function(direction) {\r\n    \r\n};\r\n\r\n/** \r\n * Your SnakeGame object will be instantiated and called as such:\r\n * var obj = Object.create(SnakeGame).createNew(width, height, food)\r\n * var param_1 = obj.move(direction)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class SnakeGame\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0].\r\n    :type width: Integer\r\n    :type height: Integer\r\n    :type food: Integer[][]\r\n=end\r\n    def initialize(width, height, food)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body.\r\n    :type direction: String\r\n    :rtype: Integer\r\n=end\r\n    def move(direction)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your SnakeGame object will be instantiated and called as such:\r\n# obj = SnakeGame.new(width, height, food)\r\n# param_1 = obj.move(direction)"},{"value":"swift","text":"Swift","defaultCode":"\nclass SnakeGame {\n\n    /** Initialize your data structure here.\n        @param width - screen width\n        @param height - screen height \n        @param food - A list of food positions\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\n    init(_ width: Int, _ height: Int, _ food: [[Int]]) {\n        \n    }\n    \n    /** Moves the snake.\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \n        @return The game's score after the move. Return -1 if game over. \n        Game over when snake crosses the screen boundary or bites its body. */\n    func move(_ direction: String) -> Int {\n      \n    }\n}\n\n/**\n * Your SnakeGame object will be instantiated and called as such:\n * let obj = SnakeGame(width, height, food)\n * let ret_1: Int = obj.move(direction)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type SnakeGame struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\r\nfunc Constructor(width int, height int, food [][]int) SnakeGame {\r\n    \r\n}\r\n\r\n\r\n/** Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. */\r\nfunc (this *SnakeGame) Move(direction string) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your SnakeGame object will be instantiated and called as such:\r\n * obj := Constructor(width, height, food);\r\n * param_1 := obj.Move(direction);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class SnakeGame(_width: Int, _height: Int, _food: Array[Array[Int]]) {\r\n\r\n    /** Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\r\n    \r\n\r\n    /** Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. */\r\n    def move(direction: String): Int = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your SnakeGame object will be instantiated and called as such:\r\n * var obj = new SnakeGame(width, height, food)\r\n * var param_1 = obj.move(direction)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class SnakeGame(width: Int, height: Int, food: Array<IntArray>) {\r\n\r\n    /** Initialize your data structure here.\r\n        @param width - screen width\r\n        @param height - screen height \r\n        @param food - A list of food positions\r\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */\r\n    \r\n\r\n    /** Moves the snake.\r\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \r\n        @return The game's score after the move. Return -1 if game over. \r\n        Game over when snake crosses the screen boundary or bites its body. */\r\n    fun move(direction: String): Int {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your SnakeGame object will be instantiated and called as such:\r\n * var obj = SnakeGame(width, height, food)\r\n * var param_1 = obj.move(direction)\r\n */"}],"testcase":"[\"SnakeGame\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\"]\n[[3,2,[[1,2],[0,1]]],[\"R\"],[\"D\"],[\"R\"],[\"U\"],[\"L\"],[\"U\"]]","testable":true,"templateMeta":{"classname":"SnakeGame","constructor":{"params":[{"type":"integer","name":"width"},{"type":"integer","name":"height"},{"type":"pair<integer,integer>[]","name":"food"},{"type":"integer","name":"foodSize","lang":"c","value":"size_3"}],"comment":"Initialize your data structure here.\n        @param width - screen width\n        @param height - screen height \n        @param food - A list of food positions\n        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]."},"methods":[{"name":"move","params":[{"type":"string","name":"direction"}],"return":{"type":"integer"},"comment":"Moves the snake.\n        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down \n        @return The game's score after the move. Return -1 if game over. \n        Game over when snake crosses the screen boundary or bites its body."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}