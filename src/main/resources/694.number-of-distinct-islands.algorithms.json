{"id":694,"fid":694,"name":"Number of Distinct Islands","slug":"number-of-distinct-islands","link":"https://leetcode.com/problems/number-of-distinct-islands/description/","percent":47.4147344081187,"level":"Medium","category":"algorithms","totalAC":"14.8K","totalSubmit":"31.1K","desc":"Given a non-empty 2D array grid of 0's and 1's, an island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.\r\n\r\nCount the number of distinct islands.  An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.\r\n\r\nExample 1:\r\n\r\n11000\r\n11000\r\n00011\r\n00011\r\n\r\nGiven the above grid map, return 1.\r\n\r\n\r\nExample 2:\r\n11011\r\n10000\r\n00001\r\n11011\r\nGiven the above grid map, return 3.\r\nNotice that:\r\n\r\n11\r\n1\r\n\r\nand\r\n\r\n 1\r\n11\r\n\r\nare considered different island shapes, because we do not consider reflection / rotation.\r\n\r\n\r\nNote:\r\nThe length of each dimension in the given grid does not exceed 50.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numDistinctIslands(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numDistinctIslands(int[][] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numDistinctIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numDistinctIslands(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numDistinctIslands(int** grid, int gridRowSize, int gridColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumDistinctIslands(int[,] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar numDistinctIslands = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef num_distinct_islands(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numDistinctIslands(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numDistinctIslands(grid [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numDistinctIslands(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numDistinctIslands(grid: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[1,1,0,0,0],[1,1,0,0,0],[0,0,0,1,1],[0,0,0,1,1]]","testable":true,"templateMeta":{"name":"numDistinctIslands","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}