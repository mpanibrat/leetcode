{"id":744,"fid":743,"name":"Network Delay Time","slug":"network-delay-time","link":"https://leetcode.com/problems/network-delay-time/description/","percent":37.72521975620417,"level":"Easy","category":"algorithms","totalAC":"15.5K","totalSubmit":"41.2K","desc":"\r\nThere are N network nodes, labelled 1 to N.\r\n\r\nGiven times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.\r\n\r\nNow, we send a signal from a certain node K.  How long will it take for all nodes to receive the signal?  If it is impossible, return -1.\r\n\r\n\r\nNote:\r\n\r\nN will be in the range [1, 100].\r\nK will be in the range [1, N].\r\nThe length of times will be in the range [1, 6000].\r\nAll edges times[i] = (u, v, w) will have 1  and 1 .\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int networkDelayTime(vector<vector<int>>& times, int N, int K) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int networkDelayTime(int[][] times, int N, int K) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def networkDelayTime(self, times, N, K):\n        \"\"\"\n        :type times: List[List[int]]\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def networkDelayTime(self, times, N, K):\n        \"\"\"\n        :type times: List[List[int]]\n        :type N: int\n        :type K: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int networkDelayTime(int** times, int timesRowSize, int timesColSize, int N, int K) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NetworkDelayTime(int[,] times, int N, int K) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */\nvar networkDelayTime = function(times, N, K) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} times\n# @param {Integer} n\n# @param {Integer} k\n# @return {Integer}\ndef network_delay_time(times, n, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func networkDelayTime(_ times: [[Int]], _ N: Int, _ K: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func networkDelayTime(times [][]int, N int, K int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def networkDelayTime(times: Array[Array[Int]], N: Int, K: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun networkDelayTime(times: Array<IntArray>, N: Int, K: Int): Int {\n        \n    }\n}"}],"testcase":"[[2,1,1],[2,3,1],[3,4,1]]\n4\n2","testable":true,"templateMeta":{"name":"networkDelayTime","params":[{"name":"times","type":"integer[][]"},{"name":"N","type":"integer"},{"name":"K","type":"integer"}],"return":{"type":"integer"}}}