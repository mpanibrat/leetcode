{"id":165,"fid":165,"name":"Compare Version Numbers","slug":"compare-version-numbers","link":"https://leetcode.com/problems/compare-version-numbers/description/","percent":21.762121689815384,"level":"Medium","category":"algorithms","totalAC":"115.3K","totalSubmit":"529.7K","desc":"Compare two version numbers version1 and version2.\r\nIf version1 > version2 return 1;Â if version1 < version2 return -1;otherwise return 0.\r\n\r\nYou may assume that the version strings are non-empty and contain only digits and the . character.\r\nThe . character does not represent a decimal point and is used to separate number sequences.\r\nFor instance, 2.5 is not \"two and a half\" or \"half way to version three\", it is the fifth second-level revision of the second first-level revision.\r\n\r\nExample 1:\r\n\r\n\r\nInput: version1 = \"0.1\", version2 = \"1.1\"\r\nOutput: -1\r\n\r\nExample 2:\r\n\r\n\r\nInput: version1 = \"1.0.1\", version2 = \"1\"\r\nOutput: 1\r\n\r\nExample 3:\r\n\r\n\r\nInput: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\r\nOutput: -1\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int compareVersion(string version1, string version2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int compareVersion(String version1, String version2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def compareVersion(self, version1, version2):\r\n        \"\"\"\r\n        :type version1: str\r\n        :type version2: str\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def compareVersion(self, version1, version2):\r\n        \"\"\"\r\n        :type version1: str\r\n        :type version2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int compareVersion(char* version1, char* version2) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int CompareVersion(string version1, string version2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} version1\r\n * @param {string} version2\r\n * @return {number}\r\n */\r\nvar compareVersion = function(version1, version2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} version1\r\n# @param {String} version2\r\n# @return {Integer}\r\ndef compare_version(version1, version2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func compareVersion(_ version1: String, _ version2: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func compareVersion(version1 string, version2 string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def compareVersion(version1: String, version2: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun compareVersion(version1: String, version2: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"0.1\"\n\"1.1\"","testable":true,"templateMeta":{"name":"compareVersion","params":[{"name":"version1","type":"string"},{"name":"version2","type":"string"}],"return":{"type":"integer"}}}