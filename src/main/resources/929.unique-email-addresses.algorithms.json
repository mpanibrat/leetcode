{"id":965,"fid":929,"name":"Unique Email Addresses","slug":"unique-email-addresses","link":"https://leetcode.com/problems/unique-email-addresses/description/","percent":80.30238681729381,"level":"Easy","category":"algorithms","totalAC":"9.5K","totalSubmit":"11.8K","desc":"Every email consists of a local name and a domain name, separated by the @ sign.\r\n\r\nFor example, in alice@leetcode.com, alice is the local name, and leetcode.com is the domain name.\r\n\r\nBesides lowercase letters, these emails may contain '.'s or '+'s.\r\n\r\nIf you add periods ('.') between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name.  For example, \"alice.z@leetcode.com\" and \"alicez@leetcode.com\" forward to the same email address.  (Note that this rule does not apply for domain names.)\r\n\r\nIf you add a plus ('+') in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered, for example m.y+name@email.com will be forwarded to my@email.com.  (Again, this rule does not apply for domain names.)\r\n\r\nIt is possible to use both of these rules at the same time.\r\n\r\nGiven a list of emails, we send one email to each address in the list.  How many different addresses actually receive mails? \r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\r\nOutput: 2\r\nExplanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= emails[i].length <= 100\r\n\t1 <= emails.length <= 100\r\n\tEach emails[i] contains exactly one '@' character.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numUniqueEmails(vector<string>& emails) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numUniqueEmails(String[] emails) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numUniqueEmails(self, emails):\n        \"\"\"\n        :type emails: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numUniqueEmails(self, emails):\n        \"\"\"\n        :type emails: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numUniqueEmails(char** emails, int emailsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumUniqueEmails(string[] emails) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} emails\n * @return {number}\n */\nvar numUniqueEmails = function(emails) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} emails\n# @return {Integer}\ndef num_unique_emails(emails)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numUniqueEmails(_ emails: [String]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numUniqueEmails(emails []string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numUniqueEmails(emails: Array[String]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numUniqueEmails(emails: Array<String>): Int {\n        \n    }\n}"}],"testcase":"[\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]","testable":true,"templateMeta":{"name":"numUniqueEmails","params":[{"name":"emails","type":"string[]"}],"return":{"type":"integer"}}}