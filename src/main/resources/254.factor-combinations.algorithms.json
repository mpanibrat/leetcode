{"id":254,"fid":254,"name":"Factor Combinations","slug":"factor-combinations","link":"https://leetcode.com/problems/factor-combinations/description/","percent":43.72637039731233,"level":"Medium","category":"algorithms","totalAC":"45.7K","totalSubmit":"104.5K","desc":"Numbers can be regarded as product of its factors. For example,\r\n\r\n\r\n8 = 2 x 2 x 2;\r\n  = 2 x 4.\r\n\r\n\r\nWrite a function that takes an integer n and return all possible combinations of its factors.\r\n\r\nNote:\r\n\r\n\r\n\tYou may assume that n is always positive.\r\n\tFactors should be greater than 1 and less than n.\r\n\r\n\r\nExample 1: \r\n\r\n\r\nInput: 1\r\nOutput: []\r\n\r\n\r\nExample 2: \r\n\r\n\r\nInput: 37\r\nOutput:[]\r\n\r\nExample 3: \r\n\r\n\r\nInput: 12\r\nOutput:\r\n[\r\n  [2, 6],\r\n  [2, 2, 3],\r\n  [3, 4]\r\n]\r\n\r\nExample 4: \r\n\r\n\r\nInput: 32\r\nOutput:\r\n[\r\n  [2, 16],\r\n  [2, 2, 8],\r\n  [2, 2, 2, 4],\r\n  [2, 2, 2, 2, 2],\r\n  [2, 4, 4],\r\n  [4, 8]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> getFactors(int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> getFactors(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def getFactors(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def getFactors(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** getFactors(int n, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> GetFactors(int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @return {number[][]}\r\n */\r\nvar getFactors = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @return {Integer[][]}\r\ndef get_factors(n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getFactors(_ n: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func getFactors(n int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def getFactors(n: Int): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun getFactors(n: Int): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"1","testable":true,"templateMeta":{"name":"getFactors","params":[{"name":"n","type":"integer"}],"return":{"type":"list<list<integer>>"}}}