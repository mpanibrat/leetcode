{"id":665,"fid":665,"name":"Non-decreasing Array","slug":"non-decreasing-array","link":"https://leetcode.com/problems/non-decreasing-array/description/","percent":19.692485776375133,"level":"Easy","category":"algorithms","totalAC":"36.1K","totalSubmit":"183.1K","desc":"\r\nGiven an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element.\r\n\r\n\r\n\r\nWe define an array is non-decreasing if array[i]  holds for every i (1 \r\n\r\nExample 1:\r\n\r\nInput: [4,2,3]\r\nOutput: True\r\nExplanation: You could modify the first 4 to 1 to get a non-decreasing array.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [4,2,1]\r\nOutput: False\r\nExplanation: You can't get a non-decreasing array by modify at most one element.\r\n\r\n\r\n\r\nNote:\r\nThe n belongs to [1, 10,000].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool checkPossibility(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean checkPossibility(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def checkPossibility(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def checkPossibility(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool checkPossibility(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CheckPossibility(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar checkPossibility = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef check_possibility(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func checkPossibility(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func checkPossibility(nums []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def checkPossibility(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun checkPossibility(nums: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[4,2,3]","testable":true,"templateMeta":{"name":"checkPossibility","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}