{"id":659,"fid":659,"name":"Split Array into Consecutive Subsequences","slug":"split-array-into-consecutive-subsequences","link":"https://leetcode.com/problems/split-array-into-consecutive-subsequences/description/","percent":37.88253130439665,"level":"Medium","category":"algorithms","totalAC":"13.5K","totalSubmit":"35.6K","desc":"You are given an integer array sorted in ascending order (may contain duplicates), you need to split them into several subsequences, where each subsequences consist of at least 3 consecutive integers. Return whether you can make such a split.\r\n\r\nExample 1:\r\n\r\nInput: [1,2,3,3,4,5]\r\nOutput: True\r\nExplanation:\r\nYou can split them into two consecutive subsequences : \r\n1, 2, 3\r\n3, 4, 5\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1,2,3,3,4,4,5,5]\r\nOutput: True\r\nExplanation:\r\nYou can split them into two consecutive subsequences : \r\n1, 2, 3, 4, 5\r\n3, 4, 5\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput: [1,2,3,4,4,5]\r\nOutput: False\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of the input is in range of [1, 10000]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isPossible(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isPossible(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isPossible(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isPossible(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool isPossible(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsPossible(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar isPossible = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Boolean}\ndef is_possible(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isPossible(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isPossible(nums []int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isPossible(nums: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isPossible(nums: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[1,2,3,3,4,5]","testable":true,"templateMeta":{"name":"isPossible","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}