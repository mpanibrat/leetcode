{"id":714,"fid":714,"name":"Best Time to Buy and Sell Stock with Transaction Fee","slug":"best-time-to-buy-and-sell-stock-with-transaction-fee","link":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/description/","percent":48.08879412624447,"level":"Medium","category":"algorithms","totalAC":"28K","totalSubmit":"58.2K","desc":"Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.\r\nYou may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.  You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)\r\nReturn the maximum profit you can make.\r\n\r\nExample 1:\r\n\r\nInput: prices = [1, 3, 2, 8, 4, 9], fee = 2\r\nOutput: 8\r\nExplanation: The maximum profit can be achieved by:\r\nBuying at prices[0] = 1Selling at prices[3] = 8Buying at prices[4] = 4Selling at prices[5] = 9The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\r\n\r\n\r\n\r\nNote:\r\n0 < prices.length .\r\n0 < prices[i] < 50000.\r\n0 .\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxProfit(int[] prices, int fee) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxProfit(self, prices, fee):\n        \"\"\"\n        :type prices: List[int]\n        :type fee: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxProfit(self, prices, fee):\n        \"\"\"\n        :type prices: List[int]\n        :type fee: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int maxProfit(int* prices, int pricesSize, int fee) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxProfit(int[] prices, int fee) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} prices\n * @param {number} fee\n * @return {number}\n */\nvar maxProfit = function(prices, fee) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} prices\n# @param {Integer} fee\n# @return {Integer}\ndef max_profit(prices, fee)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxProfit(_ prices: [Int], _ fee: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxProfit(prices []int, fee int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxProfit(prices: Array[Int], fee: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxProfit(prices: IntArray, fee: Int): Int {\n        \n    }\n}"}],"testcase":"[1,3,2,8,4,9]\n2","testable":true,"templateMeta":{"name":"maxProfit","params":[{"name":"prices","type":"integer[]"},{"name":"fee","type":"integer"}],"return":{"type":"integer"}}}