{"id":715,"fid":715,"name":"Range Module","slug":"range-module","link":"https://leetcode.com/problems/range-module/description/","percent":31.9468105243233,"level":"Hard","category":"algorithms","totalAC":"6.8K","totalSubmit":"21.1K","desc":"A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.\r\n\r\naddRange(int left, int right) Adds the half-open interval [left, right), tracking every real number in that interval.  Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval [left, right) that are not already tracked.\r\n\r\nqueryRange(int left, int right) Returns true if and only if every real number in the interval [left, right)\r\n is currently being tracked.\r\n\r\nremoveRange(int left, int right) Stops tracking every real number currently being tracked in the interval [left, right).\r\n\r\nExample 1:\r\n\r\naddRange(10, 20): null\r\nremoveRange(14, 16): null\r\nqueryRange(10, 14): true (Every number in [10, 14) is being tracked)\r\nqueryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\r\nqueryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation)\r\n\r\n\r\n\r\nNote:\r\nA half open interval [left, right) denotes all real numbers left .\r\n\r\n0 < left < right < 10^9 in all calls to addRange, queryRange, removeRange.\r\nThe total number of calls to addRange in a single test case is at most 1000.\r\nThe total number of calls to queryRange in a single test case is at most 5000.\r\nThe total number of calls to removeRange in a single test case is at most 1000.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class RangeModule {\npublic:\n    RangeModule() {\n        \n    }\n    \n    void addRange(int left, int right) {\n        \n    }\n    \n    bool queryRange(int left, int right) {\n        \n    }\n    \n    void removeRange(int left, int right) {\n        \n    }\n};\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = new RangeModule();\n * obj.addRange(left,right);\n * bool param_2 = obj.queryRange(left,right);\n * obj.removeRange(left,right);\n */"},{"value":"java","text":"Java","defaultCode":"class RangeModule {\n\n    public RangeModule() {\n        \n    }\n    \n    public void addRange(int left, int right) {\n        \n    }\n    \n    public boolean queryRange(int left, int right) {\n        \n    }\n    \n    public void removeRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = new RangeModule();\n * obj.addRange(left,right);\n * boolean param_2 = obj.queryRange(left,right);\n * obj.removeRange(left,right);\n */"},{"value":"python","text":"Python","defaultCode":"class RangeModule(object):\n\n    def __init__(self):\n        \n\n    def addRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: void\n        \"\"\"\n        \n\n    def queryRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def removeRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: void\n        \"\"\"\n        \n\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule()\n# obj.addRange(left,right)\n# param_2 = obj.queryRange(left,right)\n# obj.removeRange(left,right)"},{"value":"python3","text":"Python3","defaultCode":"class RangeModule:\n\n    def __init__(self):\n        \n\n    def addRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: void\n        \"\"\"\n        \n\n    def queryRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: bool\n        \"\"\"\n        \n\n    def removeRange(self, left, right):\n        \"\"\"\n        :type left: int\n        :type right: int\n        :rtype: void\n        \"\"\"\n        \n\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule()\n# obj.addRange(left,right)\n# param_2 = obj.queryRange(left,right)\n# obj.removeRange(left,right)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} RangeModule;\n\nRangeModule* rangeModuleCreate() {\n    \n}\n\nvoid rangeModuleAddRange(RangeModule* obj, int left, int right) {\n    \n}\n\nbool rangeModuleQueryRange(RangeModule* obj, int left, int right) {\n    \n}\n\nvoid rangeModuleRemoveRange(RangeModule* obj, int left, int right) {\n    \n}\n\nvoid rangeModuleFree(RangeModule* obj) {\n    \n}\n\n/**\n * Your RangeModule struct will be instantiated and called as such:\n * struct RangeModule* obj = rangeModuleCreate();\n * rangeModuleAddRange(obj, left, right);\n * bool param_2 = rangeModuleQueryRange(obj, left, right);\n * rangeModuleRemoveRange(obj, left, right);\n * rangeModuleFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class RangeModule {\n\n    public RangeModule() {\n        \n    }\n    \n    public void AddRange(int left, int right) {\n        \n    }\n    \n    public bool QueryRange(int left, int right) {\n        \n    }\n    \n    public void RemoveRange(int left, int right) {\n        \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * RangeModule obj = new RangeModule();\n * obj.AddRange(left,right);\n * bool param_2 = obj.QueryRange(left,right);\n * obj.RemoveRange(left,right);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar RangeModule = function() {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {void}\n */\nRangeModule.prototype.addRange = function(left, right) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {boolean}\n */\nRangeModule.prototype.queryRange = function(left, right) {\n    \n};\n\n/** \n * @param {number} left \n * @param {number} right\n * @return {void}\n */\nRangeModule.prototype.removeRange = function(left, right) {\n    \n};\n\n/** \n * Your RangeModule object will be instantiated and called as such:\n * var obj = Object.create(RangeModule).createNew()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class RangeModule\n    def initialize()\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Void\n=end\n    def add_range(left, right)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Boolean\n=end\n    def query_range(left, right)\n        \n    end\n\n\n=begin\n    :type left: Integer\n    :type right: Integer\n    :rtype: Void\n=end\n    def remove_range(left, right)\n        \n    end\n\n\nend\n\n# Your RangeModule object will be instantiated and called as such:\n# obj = RangeModule.new()\n# obj.add_range(left, right)\n# param_2 = obj.query_range(left, right)\n# obj.remove_range(left, right)"},{"value":"swift","text":"Swift","defaultCode":"\nclass RangeModule {\n\n    init() {\n        \n    }\n    \n    func addRange(_ left: Int, _ right: Int) {\n      \n    }\n    \n    func queryRange(_ left: Int, _ right: Int) -> Bool {\n      \n    }\n    \n    func removeRange(_ left: Int, _ right: Int) {\n      \n    }\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * let obj = RangeModule()\n * obj.addRange(left, right)\n * let ret_2: Bool = obj.queryRange(left, right)\n * obj.removeRange(left, right)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type RangeModule struct {\n    \n}\n\n\nfunc Constructor() RangeModule {\n    \n}\n\n\nfunc (this *RangeModule) AddRange(left int, right int)  {\n    \n}\n\n\nfunc (this *RangeModule) QueryRange(left int, right int) bool {\n    \n}\n\n\nfunc (this *RangeModule) RemoveRange(left int, right int)  {\n    \n}\n\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * obj := Constructor();\n * obj.AddRange(left,right);\n * param_2 := obj.QueryRange(left,right);\n * obj.RemoveRange(left,right);\n */"},{"value":"scala","text":"Scala","defaultCode":"class RangeModule() {\n\n    def addRange(left: Int, right: Int) {\n        \n    }\n\n    def queryRange(left: Int, right: Int): Boolean = {\n        \n    }\n\n    def removeRange(left: Int, right: Int) {\n        \n    }\n\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = new RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class RangeModule() {\n\n    fun addRange(left: Int, right: Int) {\n        \n    }\n\n    fun queryRange(left: Int, right: Int): Boolean {\n        \n    }\n\n    fun removeRange(left: Int, right: Int) {\n        \n    }\n\n}\n\n/**\n * Your RangeModule object will be instantiated and called as such:\n * var obj = RangeModule()\n * obj.addRange(left,right)\n * var param_2 = obj.queryRange(left,right)\n * obj.removeRange(left,right)\n */"}],"testcase":"[\"RangeModule\",\"addRange\",\"removeRange\",\"queryRange\",\"queryRange\",\"queryRange\"]\n[[],[10,20],[14,16],[10,14],[13,15],[16,17]]","testable":true,"templateMeta":{"classname":"RangeModule","constructor":{"params":[]},"methods":[{"name":"addRange","params":[{"type":"integer","name":"left"},{"type":"integer","name":"right"}],"return":{"type":"void"}},{"name":"queryRange","params":[{"type":"integer","name":"left"},{"type":"integer","name":"right"}],"return":{"type":"boolean"}},{"name":"removeRange","params":[{"type":"integer","name":"left"},{"type":"integer","name":"right"}],"return":{"type":"void"}}],"systemdesign":true,"params":[{"name":"lefts","type":"integer[]"},{"name":"rights","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}