{"id":652,"fid":652,"name":"Find Duplicate Subtrees","slug":"find-duplicate-subtrees","link":"https://leetcode.com/problems/find-duplicate-subtrees/description/","percent":41.184586908968534,"level":"Medium","category":"algorithms","totalAC":"24.5K","totalSubmit":"59.4K","desc":"Given a binary tree, return all duplicate subtrees. For each kind of duplicate subtrees, you only need to return the root node of any one of them.\r\n\r\nTwo trees are duplicate if they have the same structure with same node values.\r\n\r\nExample 1: \r\n\r\n\r\n        1\r\n       / \\\r\n      2   3\r\n     /   / \\\r\n    4   2   4\r\n       /\r\n      4\r\n\r\n\r\nThe following are two duplicate subtrees:\r\n\r\n\r\n      2\r\n     /\r\n    4\r\n\r\n\r\nand\r\n\r\n\r\n    4\r\n\r\nTherefore, you need to return above trees' root in the form of a list.","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def findDuplicateSubtrees(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[TreeNode]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findDuplicateSubtrees(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: List[TreeNode]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct TreeNode** findDuplicateSubtrees(struct TreeNode* root, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<TreeNode> FindDuplicateSubtrees(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {TreeNode[]}\r\n */\r\nvar findDuplicateSubtrees = function(root) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {TreeNode[]}\r\ndef find_duplicate_subtrees(root)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func findDuplicateSubtrees(_ root: TreeNode?) -> [TreeNode?] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc findDuplicateSubtrees(root *TreeNode) []*TreeNode {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def findDuplicateSubtrees(root: TreeNode): List[TreeNode] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun findDuplicateSubtrees(root: TreeNode?): List<TreeNode?> {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,3,4,null,2,4,null,null,4]","testable":true,"templateMeta":{"name":"findDuplicateSubtrees","params":[{"name":"root","type":"TreeNode"}],"return":{"type":"list<TreeNode>"}}}