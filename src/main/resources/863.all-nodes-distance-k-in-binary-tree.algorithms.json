{"id":893,"fid":863,"name":"All Nodes Distance K in Binary Tree","slug":"all-nodes-distance-k-in-binary-tree","link":"https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/","percent":43.041765816033475,"level":"Medium","category":"algorithms","totalAC":"10.5K","totalSubmit":"24.4K","desc":"We are given a binary tree (with root node root), a target node, and an integer value K.\r\n\r\nReturn a list of the values of all nodes that have a distance K from the target node.  The answer can be returned in any order.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2\r\n\r\nOutput: [7,4,1]\r\n\r\nExplanation: \r\nThe nodes that are a distance 2 from the target node (with value 5)\r\nhave values 7, 4, and 1.\r\n\r\n\r\n\r\nNote that the inputs \"root\" and \"target\" are actually TreeNodes.\r\nThe descriptions of the inputs above are just serializations of these objects.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe given tree is non-empty.\r\n\tEach node in the tree has unique values 0 <= node.val <= 500.\r\n\tThe target node is a node in the tree.\r\n\t0 <= K <= 1000.\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int K) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def distanceK(self, root, target, K):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type target: TreeNode\r\n        :type K: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def distanceK(self, root, target, K):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type target: TreeNode\r\n        :type K: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* distanceK(struct TreeNode* root, struct TreeNode* target, int K, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<int> DistanceK(TreeNode root, TreeNode target, int K) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {TreeNode} target\r\n * @param {number} K\r\n * @return {number[]}\r\n */\r\nvar distanceK = function(root, target, K) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {TreeNode} target\r\n# @param {Integer} k\r\n# @return {Integer[]}\r\ndef distance_k(root, target, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func distanceK(_ root: TreeNode?, _ target: TreeNode?, _ K: Int) -> [Int] {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc distanceK(root *TreeNode, target *TreeNode, K int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def distanceK(root: TreeNode, target: TreeNode, K: Int): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun distanceK(root: TreeNode?, target: TreeNode?, K: Int): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"[3,5,1,6,2,0,8,null,null,7,4]\n5\n2","testable":true,"templateMeta":{"name":"distanceK","params":[{"name":"root","type":"TreeNode"},{"name":"target","type":"TreeNode"},{"name":"K","type":"integer"}],"return":{"type":"list<integer>"},"generatedriver":false,"generatedefinition":false}}