{"id":915,"fid":478,"name":"Generate Random Point in a Circle","slug":"generate-random-point-in-a-circle","link":"https://leetcode.com/problems/generate-random-point-in-a-circle/description/","percent":34.0340488527017,"level":"Medium","category":"algorithms","totalAC":"2.3K","totalSubmit":"6.8K","desc":"Given the radius and x-y positions of the center of a circle, write a function randPoint which generates a uniform random point in the circle.\r\n\r\nNote:\r\n\r\n\r\n\tinput and output values are in floating-point.\r\n\tradius and x-y position of the center of the circle is passed into the class constructor.\r\n\ta point on the circumference of the circle is considered to be in the circle.\r\n\trandPoint returns a size 2 array containing x-position and y-position of the random point, in that order.\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\r\n[[1,0,0],[],[],[]]\r\nOutput: [null,[-0.72939,-0.65505],[-0.78502,-0.28626],[-0.83119,-0.19803]]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"randPoint\",\"randPoint\",\"randPoint\"]\r\n[[10,5,-7.5],[],[],[]]\r\nOutput: [null,[11.52438,-8.33273],[2.46992,-16.21705],[11.13430,-12.42337]]\r\n\r\n\r\nExplanation of Input Syntax:\r\n\r\nThe input is two lists: the subroutines called and their arguments. Solution's constructor has three arguments, the radius, x-position of the center, and y-position of the center of the circle. randPoint has no arguments. Arguments are always wrapped with a list, even if there aren't any.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    Solution(double radius, double x_center, double y_center) {\r\n        \r\n    }\r\n    \r\n    vector<double> randPoint() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(radius, x_center, y_center);\r\n * vector<double> param_1 = obj.randPoint();\r\n */"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n\r\n    public Solution(double radius, double x_center, double y_center) {\r\n        \r\n    }\r\n    \r\n    public double[] randPoint() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(radius, x_center, y_center);\r\n * double[] param_1 = obj.randPoint();\r\n */"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n\r\n    def __init__(self, radius, x_center, y_center):\r\n        \"\"\"\r\n        :type radius: float\r\n        :type x_center: float\r\n        :type y_center: float\r\n        \"\"\"\r\n        \r\n\r\n    def randPoint(self):\r\n        \"\"\"\r\n        :rtype: List[float]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(radius, x_center, y_center)\r\n# param_1 = obj.randPoint()"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n\r\n    def __init__(self, radius, x_center, y_center):\r\n        \"\"\"\r\n        :type radius: float\r\n        :type x_center: float\r\n        :type y_center: float\r\n        \"\"\"\r\n        \r\n\r\n    def randPoint(self):\r\n        \"\"\"\r\n        :rtype: List[float]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(radius, x_center, y_center)\r\n# param_1 = obj.randPoint()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Solution;\r\n\r\nSolution* solutionCreate(double radius, double x_center, double y_center) {\r\n    \r\n}\r\n\r\ndouble* solutionRandPoint(Solution* obj, int *returnSize) {\r\n    \r\n}\r\n\r\nvoid solutionFree(Solution* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Solution struct will be instantiated and called as such:\r\n * struct Solution* obj = solutionCreate(radius, x_center, y_center);\r\n * double* param_1 = solutionRandPoint(obj);\r\n * solutionFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n\r\n    public Solution(double radius, double x_center, double y_center) {\r\n        \r\n    }\r\n    \r\n    public double[] RandPoint() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(radius, x_center, y_center);\r\n * double[] param_1 = obj.RandPoint();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} radius\r\n * @param {number} x_center\r\n * @param {number} y_center\r\n */\r\nvar Solution = function(radius, x_center, y_center) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number[]}\r\n */\r\nSolution.prototype.randPoint = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(radius, x_center, y_center)\r\n * var param_1 = obj.randPoint()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Solution\r\n\r\n=begin\r\n    :type radius: Float\r\n    :type x_center: Float\r\n    :type y_center: Float\r\n=end\r\n    def initialize(radius, x_center, y_center)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Float[]\r\n=end\r\n    def rand_point()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(radius, x_center, y_center)\r\n# param_1 = obj.rand_point()"},{"value":"swift","text":"Swift","defaultCode":"\nclass Solution {\n\n    init(_ radius: Double, _ x_center: Double, _ y_center: Double) {\n        \n    }\n    \n    func randPoint() -> [Double] {\n      \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(radius, x_center, y_center)\n * let ret_1: [Double] = obj.randPoint()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Solution struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(radius float64, x_center float64, y_center float64) Solution {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Solution) RandPoint() []float64 {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(radius, x_center, y_center);\r\n * param_1 := obj.RandPoint();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Solution(_radius: Double, _x_center: Double, _y_center: Double) {\r\n\r\n    def randPoint(): Array[Double] = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = new Solution(radius, x_center, y_center)\r\n * var param_1 = obj.randPoint()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution(radius: Double, x_center: Double, y_center: Double) {\r\n\r\n    fun randPoint(): DoubleArray {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Solution(radius, x_center, y_center)\r\n * var param_1 = obj.randPoint()\r\n */"}],"testcase":"[\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n[[1.0, 0.0, 0.0], [], [], []]","testable":true,"templateMeta":{"classname":"Solution","maxbytesperline":200000,"constructor":{"params":[{"name":"radius","type":"double"},{"name":"x_center","type":"double"},{"name":"y_center","type":"double"}]},"methods":[{"name":"randPoint","params":[],"return":{"type":"double[]"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}