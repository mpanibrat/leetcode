{"id":872,"fid":842,"name":"Split Array into Fibonacci Sequence","slug":"split-array-into-fibonacci-sequence","link":"https://leetcode.com/problems/split-array-into-fibonacci-sequence/description/","percent":33.73406396779244,"level":"Medium","category":"algorithms","totalAC":"6K","totalSubmit":"17.9K","desc":"Given a string S of digits, such as S = \"123456579\", we can split it into a Fibonacci-like sequence [123, 456, 579].\r\n\r\nFormally, a Fibonacci-like sequence is a list F of non-negative integers such that:\r\n\r\n\r\n\t0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);\r\n\tF.length >= 3;\r\n\tand F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.\r\n\r\n\r\nAlso, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.\r\n\r\nReturn any Fibonacci-like sequence split from S, or return [] if it cannot be done.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \"123456579\"\r\nOutput: [123,456,579]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \"11235813\"\r\nOutput: [1,1,2,3,5,8,13]\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: \"112358130\"\r\nOutput: []\r\nExplanation: The task is impossible.\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: \"0123\"\r\nOutput: []\r\nExplanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: \"1101111\"\r\nOutput: [110, 1, 111]\r\nExplanation: The output [11, 0, 11, 11] would also be accepted.\r\n\r\n\r\nNote: \r\n\r\n\r\n\t1 <= S.length <= 200\r\n\tS contains only digits.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> splitIntoFibonacci(string S) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> splitIntoFibonacci(String S) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def splitIntoFibonacci(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def splitIntoFibonacci(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* splitIntoFibonacci(char* S, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> SplitIntoFibonacci(string S) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} S\r\n * @return {number[]}\r\n */\r\nvar splitIntoFibonacci = function(S) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {Integer[]}\r\ndef split_into_fibonacci(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func splitIntoFibonacci(_ S: String) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func splitIntoFibonacci(S string) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def splitIntoFibonacci(S: String): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun splitIntoFibonacci(S: String): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"\"123456579\"","testable":true,"templateMeta":{"name":"splitIntoFibonacci","params":[{"name":"S","type":"string"}],"return":{"type":"list<integer>"}}}