{"id":251,"fid":251,"name":"Flatten 2D Vector","slug":"flatten-2d-vector","link":"https://leetcode.com/problems/flatten-2d-vector/description/","percent":42.507889398151626,"level":"Medium","category":"algorithms","totalAC":"45.3K","totalSubmit":"106.5K","desc":"Implement an iterator to flatten a 2d vector.\r\n\r\nExample:\r\n\r\n\r\nInput: 2d vector =\r\n[\r\n  [1,2],\r\n  [3],\r\n  [4,5,6]\r\n]\r\nOutput: [1,2,3,4,5,6]\r\nExplanation: By calling next repeatedly until hasNext returns false, \r\n             the order of elements returned by next should be: [1,2,3,4,5,6].\r\n\r\nFollow up:\r\nAs an added challenge, try to code it using only iterators in C++ or iterators in Java.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Vector2D {\r\npublic:\r\n    Vector2D(vector<vector<int>>& vec2d) {\r\n        \r\n    }\r\n\r\n    int next() {\r\n        \r\n    }\r\n\r\n    bool hasNext() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Vector2D object will be instantiated and called as such:\r\n * Vector2D i(vec2d);\r\n * while (i.hasNext()) cout << i.next();\r\n */"},{"value":"java","text":"Java","defaultCode":"public class Vector2D implements Iterator<Integer> {\r\n\r\n    public Vector2D(List<List<Integer>> vec2d) {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public Integer next() {\r\n        \r\n    }\r\n\r\n    @Override\r\n    public boolean hasNext() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Vector2D object will be instantiated and called as such:\r\n * Vector2D i = new Vector2D(vec2d);\r\n * while (i.hasNext()) v[f()] = i.next();\r\n */"},{"value":"python","text":"Python","defaultCode":"class Vector2D(object):\r\n\r\n    def __init__(self, vec2d):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        :type vec2d: List[List[int]]\r\n        \"\"\"\r\n        \r\n\r\n    def next(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def hasNext(self):\r\n        \"\"\"\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n# Your Vector2D object will be instantiated and called as such:\r\n# i, v = Vector2D(vec2d), []\r\n# while i.hasNext(): v.append(i.next())"},{"value":"c","text":"C","defaultCode":"struct Vector2D {\r\n    \r\n};\r\n\r\nstruct Vector2D *vector2DCreate(int** vec2d, int vec2dRowSize, int* vec2dColSizes) {\r\n    \r\n}\r\n\r\nbool vector2DHasNext(struct Vector2D *iter) {\r\n    \r\n}\r\n\r\nint vector2DNext(struct Vector2D *iter) {\r\n    \r\n}\r\n\r\n/** Deallocates memory previously allocated for the iterator */\r\nvoid vector2DFree(struct Vector2D *iter) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Vector2D will be called like this:\r\n * struct Vector2D *i = vector2DCreate(vec2d, rowSize, colSizes);\r\n * while (vector2DHasNext(i)) printf(\"%d\\n\", vector2DNext(i));\r\n * vector2DFree(i);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Vector2D {\r\n\r\n    public Vector2D(IList<IList<int>> vec2d) {\r\n        \r\n    }\r\n\r\n    public bool HasNext() {\r\n        \r\n    }\r\n\r\n    public int Next() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Vector2D will be called like this:\r\n * Vector2D i = new Vector2D(vec2d);\r\n * while (i.HasNext()) v[f()] = i.Next();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @constructor\r\n * @param {Integer[][]} vec2d\r\n */\r\nvar Vector2D = function(vec2d) {\r\n    \r\n};\r\n\r\n\r\n/**\r\n * @this Vector2D\r\n * @returns {boolean}\r\n */\r\nVector2D.prototype.hasNext = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @this Vector2D\r\n * @returns {integer}\r\n */\r\nVector2D.prototype.next = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Your Vector2D will be called like this:\r\n * var i = new Vector2D(vec2d), a = [];\r\n * while (i.hasNext()) a.push(i.next());\r\n*/"},{"value":"ruby","text":"Ruby","defaultCode":"class Vector2D\r\n    # @param {Integer[][]} vec2d\r\n    def initialize(vec2d)\r\n        \r\n    end\r\n\r\n    # @return {Boolean}\r\n    def has_next\r\n        \r\n    end\r\n\r\n    # @return {Integer}\r\n    def next\r\n        \r\n    end\r\nend\r\n\r\n# Your Vector2D will be called like this:\r\n# i, v = Vector2D.new(vec2d), []\r\n# while i.has_next()\r\n#    v << i.next\r\n# end"}],"testcase":"[[1,2],[3],[4,5,6]]","testable":true,"templateMeta":{"name":"Vector2D","generatedefinition":false,"params":[{"name":"vec2d","type":"list<list<integer>>"}],"return":{"type":"list<integer>","dealloc":true},"generatedriver":false}}