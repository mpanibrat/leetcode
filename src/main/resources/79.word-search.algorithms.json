{"id":79,"fid":79,"name":"Word Search","slug":"word-search","link":"https://leetcode.com/problems/word-search/description/","percent":29.241583830705004,"level":"Medium","category":"algorithms","totalAC":"219.1K","totalSubmit":"749.3K","desc":"Given a 2D board and a word, find if the word exists in the grid.\r\n\r\nThe word can be constructed from letters of sequentially adjacent cell, where \"adjacent\" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.\r\n\r\nExample:\r\n\r\n\r\nboard =\r\n[\r\n  ['A','B','C','E'],\r\n  ['S','F','C','S'],\r\n  ['A','D','E','E']\r\n]\r\n\r\nGiven word = \"ABCCED\", return true.\r\nGiven word = \"SEE\", return true.\r\nGiven word = \"ABCB\", return false.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool exist(vector<vector<char>>& board, string word) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean exist(char[][] board, String word) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def exist(self, board, word):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def exist(self, board, word):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :type word: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool exist(char** board, int boardRowSize, int boardColSize, char* word) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool Exist(char[,] board, string word) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} board\r\n * @param {string} word\r\n * @return {boolean}\r\n */\r\nvar exist = function(board, word) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\r\n# @param {String} word\r\n# @return {Boolean}\r\ndef exist(board, word)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func exist(_ board: [[Character]], _ word: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func exist(board [][]byte, word string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def exist(board: Array[Array[Char]], word: String): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun exist(board: Array<CharArray>, word: String): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]]\n\"ABCCED\"","testable":true,"templateMeta":{"name":"exist","params":[{"name":"board","type":"character[][]"},{"name":"word","type":"string"}],"return":{"type":"boolean"}}}