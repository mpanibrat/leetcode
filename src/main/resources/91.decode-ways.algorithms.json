{"id":91,"fid":91,"name":"Decode Ways","slug":"decode-ways","link":"https://leetcode.com/problems/decode-ways/description/","percent":21.16799640703247,"level":"Medium","category":"algorithms","totalAC":"210.2K","totalSubmit":"993K","desc":"A message containing letters from A-Z is being encoded to numbers using the following mapping:\r\n\r\n\r\n'A' -> 1\r\n'B' -> 2\r\n...\r\n'Z' -> 26\r\n\r\n\r\nGiven a non-empty string containing only digits, determine the total number of ways to decode it.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \"12\"\r\nOutput: 2\r\nExplanation: It could be decoded as \"AB\" (1 2) or \"L\" (12).\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \"226\"\r\nOutput: 3\r\nExplanation: It could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int numDecodings(string s) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int numDecodings(String s) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def numDecodings(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def numDecodings(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int numDecodings(char* s) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int NumDecodings(string s) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar numDecodings = function(s) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {Integer}\r\ndef num_decodings(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numDecodings(_ s: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numDecodings(s string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def numDecodings(s: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun numDecodings(s: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"12\"","testable":true,"templateMeta":{"name":"numDecodings","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}