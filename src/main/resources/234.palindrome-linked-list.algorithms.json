{"id":234,"fid":234,"name":"Palindrome Linked List","slug":"palindrome-linked-list","link":"https://leetcode.com/problems/palindrome-linked-list/description/","percent":34.40111373205758,"level":"Easy","category":"algorithms","totalAC":"202.1K","totalSubmit":"587.6K","desc":"Given a singly linked list, determine if it is a palindrome.\r\n\r\nExample 1:\r\n\r\n\r\nInput: 1->2\r\nOutput: false\r\n\r\nExample 2:\r\n\r\n\r\nInput: 1->2->2->1\r\nOutput: true\r\n\r\nFollow up:\r\nCould you do it in O(n) time and O(1) space?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    bool isPalindrome(ListNode* head) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public boolean isPalindrome(ListNode head) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def isPalindrome(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    def isPalindrome(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nbool isPalindrome(struct ListNode* head) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public bool IsPalindrome(ListNode head) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {boolean}\r\n */\r\nvar isPalindrome = function(head) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {Boolean}\r\ndef is_palindrome(head)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func isPalindrome(_ head: ListNode?) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc isPalindrome(head *ListNode) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var _x: Int = 0) {\r\n *   var next: ListNode = null\r\n *   var x: Int = _x\r\n * }\r\n */\r\nobject Solution {\r\n    def isPalindrome(head: ListNode): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var `val`: Int = 0) {\r\n *     var next: ListNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun isPalindrome(head: ListNode?): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2]","testable":true,"templateMeta":{"name":"isPalindrome","params":[{"name":"head","type":"ListNode"}],"return":{"type":"boolean"}}}