{"id":293,"fid":293,"name":"Flip Game","slug":"flip-game","link":"https://leetcode.com/problems/flip-game/description/","percent":57.920652785593695,"level":"Easy","category":"algorithms","totalAC":"37.1K","totalSubmit":"64K","desc":"You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive \"++\" into \"--\". The game ends when a person can no longer make a move and therefore the other person will be the winner.\r\n\r\nWrite a function to compute all possible states of the string after one valid move.\r\n\r\nExample:\r\n\r\n\r\nInput: s = \"++++\"\r\nOutput: \r\n[\r\n  \"--++\",\r\n  \"+--+\",\r\n  \"++--\"\r\n]\r\n\r\n\r\nNote: If there is no valid move, return an empty list [].\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> generatePossibleNextMoves(string s) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> generatePossibleNextMoves(String s) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def generatePossibleNextMoves(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def generatePossibleNextMoves(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** generatePossibleNextMoves(char* s, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> GeneratePossibleNextMoves(string s) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @return {string[]}\r\n */\r\nvar generatePossibleNextMoves = function(s) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {String[]}\r\ndef generate_possible_next_moves(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generatePossibleNextMoves(_ s: String) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func generatePossibleNextMoves(s string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def generatePossibleNextMoves(s: String): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun generatePossibleNextMoves(s: String): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"\"++++\"","testable":true,"templateMeta":{"name":"generatePossibleNextMoves","params":[{"name":"s","type":"string"}],"return":{"type":"list<string>","dealloc":true}}}