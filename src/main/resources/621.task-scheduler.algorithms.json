{"id":621,"fid":621,"name":"Task Scheduler","slug":"task-scheduler","link":"https://leetcode.com/problems/task-scheduler/description/","percent":42.893658177128906,"level":"Medium","category":"algorithms","totalAC":"55.9K","totalSubmit":"130.3K","desc":"Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks.Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.\r\n\r\nHowever, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.\r\n\r\nYou need to return the least number of intervals the CPU will take to finish all the given tasks.\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\nInput: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\r\nOutput: 8\r\nExplanation: A -> B -> idle -> A -> B -> idle -> A -> B.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe number of tasks is in the range [1, 10000].\r\n\tThe integer n is in the range [0, 100].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int leastInterval(vector<char>& tasks, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int leastInterval(char[] tasks, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def leastInterval(self, tasks, n):\r\n        \"\"\"\r\n        :type tasks: List[str]\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def leastInterval(self, tasks, n):\r\n        \"\"\"\r\n        :type tasks: List[str]\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int leastInterval(char* tasks, int tasksSize, int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int LeastInterval(char[] tasks, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[]} tasks\r\n * @param {number} n\r\n * @return {number}\r\n */\r\nvar leastInterval = function(tasks, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[]} tasks\r\n# @param {Integer} n\r\n# @return {Integer}\r\ndef least_interval(tasks, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func leastInterval(_ tasks: [Character], _ n: Int) -> Int {\r\n        \r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func leastInterval(tasks []byte, n int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def leastInterval(tasks: Array[Char], n: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun leastInterval(tasks: CharArray, n: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n2","testable":true,"templateMeta":{"name":"leastInterval","params":[{"name":"tasks","type":"character[]"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}