{"id":954,"fid":918,"name":"Maximum Sum Circular Subarray","slug":"maximum-sum-circular-subarray","link":"https://leetcode.com/problems/maximum-sum-circular-subarray/description/","percent":26.1832162269654,"level":"Medium","category":"algorithms","totalAC":"4K","totalSubmit":"15.1K","desc":"Given a circular array C of integers represented by A, find the maximum possible sum of a non-empty subarray of C.\r\n\r\nHere, a circular array means the end of the array connects to the beginning of the array.  (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)\r\n\r\nAlso, a subarray may only include each element of the fixed buffer A at most once.  (Formally, for a subarray C[i], C[i+1], ..., C[j], there does not exist i <= k1, k2 <= j with k1 % A.length = k2 % A.length.)\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,-2,3,-2]\r\nOutput: 3\r\nExplanation: Subarray [3] has maximum sum 3\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [5,-3,5]\r\nOutput: 10\r\nExplanation: Subarray [5,5] has maximum sum 5 + 5 = 10\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [3,-1,2,-1]\r\nOutput: 4\r\nExplanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: [3,-2,2,-3]\r\nOutput: 3\r\nExplanation: Subarray [3] and [3,-2,2] both have maximum sum 3\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: [-2,-3,-1]\r\nOutput: -1\r\nExplanation: Subarray [-1] has maximum sum -1\r\n\r\n\r\n \r\n\r\nNote: \r\n\r\n\r\n\t-30000 <= A[i] <= 30000\r\n\t1 <= A.length <= 30000\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxSubarraySumCircular(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxSubarraySumCircular(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxSubarraySumCircular(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxSubarraySumCircular(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int maxSubarraySumCircular(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxSubarraySumCircular(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar maxSubarraySumCircular = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer}\ndef max_subarray_sum_circular(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxSubarraySumCircular(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxSubarraySumCircular(A []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxSubarraySumCircular(A: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxSubarraySumCircular(A: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,-2,3,-2]","testable":true,"templateMeta":{"name":"maxSubarraySumCircular","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}