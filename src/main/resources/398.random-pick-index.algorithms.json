{"id":398,"fid":398,"name":"Random Pick Index","slug":"random-pick-index","link":"https://leetcode.com/problems/random-pick-index/description/","percent":46.98902120735019,"level":"Medium","category":"algorithms","totalAC":"44.5K","totalSubmit":"94.6K","desc":"Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.\r\n\r\nNote:\r\nThe array size can be very large. Solution that uses too much extra space will not pass the judge.\r\n\r\nExample:\r\n\r\n\r\nint[] nums = new int[] {1,2,3,3,3};\r\nSolution solution = new Solution(nums);\r\n\r\n// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\r\nsolution.pick(3);\r\n\r\n// pick(1) should return 0. Since in the array only nums[0] is equal to 1.\r\nsolution.pick(1);\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    Solution(vector<int> nums) {\n        \n    }\n    \n    int pick(int target) {\n        \n    }\n};\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.pick(target);\n */"},{"value":"java","text":"Java","defaultCode":"class Solution {\n\n    public Solution(int[] nums) {\n        \n    }\n    \n    public int pick(int target) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.pick(target);\n */"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def pick(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n\n    def __init__(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        \"\"\"\n        \n\n    def pick(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(nums)\n# param_1 = obj.pick(target)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} Solution;\n\nSolution* solutionCreate(int* nums, int numsSize) {\n    \n}\n\nint solutionPick(Solution* obj, int target) {\n    \n}\n\nvoid solutionFree(Solution* obj) {\n    \n}\n\n/**\n * Your Solution struct will be instantiated and called as such:\n * struct Solution* obj = solutionCreate(nums, numsSize);\n * int param_1 = solutionPick(obj, target);\n * solutionFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n\n    public Solution(int[] nums) {\n        \n    }\n    \n    public int Pick(int target) {\n        \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * Solution obj = new Solution(nums);\n * int param_1 = obj.Pick(target);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n */\nvar Solution = function(nums) {\n    \n};\n\n/** \n * @param {number} target\n * @return {number}\n */\nSolution.prototype.pick = function(target) {\n    \n};\n\n/** \n * Your Solution object will be instantiated and called as such:\n * var obj = Object.create(Solution).createNew(nums)\n * var param_1 = obj.pick(target)\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Solution\n\n=begin\n    :type nums: Integer[]\n=end\n    def initialize(nums)\n        \n    end\n\n\n=begin\n    :type target: Integer\n    :rtype: Integer\n=end\n    def pick(target)\n        \n    end\n\n\nend\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution.new(nums)\n# param_1 = obj.pick(target)"},{"value":"swift","text":"Swift","defaultCode":"\nclass Solution {\n\n    init(_ nums: [Int]) {\n        \n    }\n    \n    func pick(_ target: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(nums)\n * let ret_1: Int = obj.pick(target)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Solution struct {\n    \n}\n\n\nfunc Constructor(nums []int) Solution {\n    \n}\n\n\nfunc (this *Solution) Pick(target int) int {\n    \n}\n\n\n/**\n * Your Solution object will be instantiated and called as such:\n * obj := Constructor(nums);\n * param_1 := obj.Pick(target);\n */"},{"value":"scala","text":"Scala","defaultCode":"class Solution(_nums: Array[Int]) {\n\n    def pick(target: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(nums)\n * var param_1 = obj.pick(target)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution(nums: IntArray) {\n\n    fun pick(target: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(nums)\n * var param_1 = obj.pick(target)\n */"}],"testcase":"[\"Solution\",\"pick\"]\n[[[1,2,3,3,3]],[3]]","testable":true,"templateMeta":{"classname":"Solution","constructor":{"params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"numsSize","lang":"c","value":"size_1"}]},"methods":[{"name":"pick","params":[{"name":"target","type":"integer"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}