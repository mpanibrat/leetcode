{"id":926,"fid":890,"name":"Find and Replace Pattern","slug":"find-and-replace-pattern","link":"https://leetcode.com/problems/find-and-replace-pattern/description/","percent":68.85396880216427,"level":"Medium","category":"algorithms","totalAC":"12K","totalSubmit":"17.4K","desc":"You have a list of words and a pattern, and you want to know which words in words matches the pattern.\r\n\r\nA word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.\r\n\r\n(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)\r\n\r\nReturn a list of the words in words that match the given pattern. \r\n\r\nYou may return the answer in any order.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\r\nOutput: [\"mee\",\"aqq\"]\r\nExplanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \r\n\"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,\r\nsince a and b map to the same letter.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= words.length <= 50\r\n\t1 <= pattern.length = words[i].length <= 20\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> findAndReplacePattern(String[] words, String pattern) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findAndReplacePattern(self, words, pattern):\n        \"\"\"\n        :type words: List[str]\n        :type pattern: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findAndReplacePattern(self, words, pattern):\n        \"\"\"\n        :type words: List[str]\n        :type pattern: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** findAndReplacePattern(char** words, int wordsSize, char* pattern, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> FindAndReplacePattern(string[] words, string pattern) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} words\n * @param {string} pattern\n * @return {string[]}\n */\nvar findAndReplacePattern = function(words, pattern) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\n# @param {String} pattern\n# @return {String[]}\ndef find_and_replace_pattern(words, pattern)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findAndReplacePattern(_ words: [String], _ pattern: String) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findAndReplacePattern(words []string, pattern string) []string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findAndReplacePattern(words: Array[String], pattern: String): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findAndReplacePattern(words: Array<String>, pattern: String): List<String> {\n        \n    }\n}"}],"testcase":"[\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"]\n\"abb\"","testable":true,"templateMeta":{"name":"findAndReplacePattern","params":[{"name":"words","type":"string[]"},{"name":"pattern","type":"string"}],"return":{"type":"list<string>"}}}