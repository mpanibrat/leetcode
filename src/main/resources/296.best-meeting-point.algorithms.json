{"id":296,"fid":296,"name":"Best Meeting Point","slug":"best-meeting-point","link":"https://leetcode.com/problems/best-meeting-point/description/","percent":53.1185086551265,"level":"Hard","category":"algorithms","totalAC":"19.9K","totalSubmit":"37.5K","desc":"A group of two or more people wants to meet and minimize the total travel distance. You are given a 2D grid of values 0 or 1, where each 1 marks the home of someone in the group. The distance is calculated using Manhattan Distance, where distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|.\r\n\r\nExample:\r\n\r\n\r\nInput: \r\n\r\n1 - 0 - 0 - 0 - 1\r\n|   |   |   |   |\r\n0 - 0 - 0 - 0 - 0\r\n|   |   |   |   |\r\n0 - 0 - 1 - 0 - 0\r\n\r\nOutput: 6 \r\n\r\nExplanation: Given three people living at (0,0), (0,4), and (2,2):\r\n             The point (0,2) is an ideal meeting point, as the total travel distance \r\n             of 2+2+2=6 is minimal. So return 6.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minTotalDistance(vector<vector<int>>& grid) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minTotalDistance(int[][] grid) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minTotalDistance(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minTotalDistance(self, grid):\r\n        \"\"\"\r\n        :type grid: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minTotalDistance(int** grid, int gridRowSize, int gridColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinTotalDistance(int[,] grid) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} grid\r\n * @return {number}\r\n */\r\nvar minTotalDistance = function(grid) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\r\n# @return {Integer}\r\ndef min_total_distance(grid)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minTotalDistance(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minTotalDistance(grid [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minTotalDistance(grid: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minTotalDistance(grid: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]","testable":true,"templateMeta":{"name":"minTotalDistance","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}