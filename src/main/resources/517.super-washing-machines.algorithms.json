{"id":517,"fid":517,"name":"Super Washing Machines","slug":"super-washing-machines","link":"https://leetcode.com/problems/super-washing-machines/description/","percent":36.382790729287024,"level":"Hard","category":"algorithms","totalAC":"10.7K","totalSubmit":"29.4K","desc":"You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty. \r\n\r\n\r\nFor each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines  at the same time .  \r\n\r\nGiven an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.\r\n\r\nExample1\r\n\r\nInput: [1,0,5]\r\n\r\nOutput: 3\r\n\r\nExplanation: \r\n1st move:    1     0     1     1     4\r\n2nd move:    1     2     1     3    \r\n3rd move:    2     1     2     2     2   \r\n\r\n\r\nExample2\r\n\r\nInput: [0,3,0]\r\n\r\nOutput: 2\r\n\r\nExplanation: \r\n1st move:    0     1     2     0    \r\n2nd move:    1     2 --> 0    =>    1     1     1     \r\n\r\n\r\nExample3\r\n\r\nInput: [0,2,0]\r\n\r\nOutput: -1\r\n\r\nExplanation: \r\nIt's impossible to make all the three washing machines have the same number of dresses. \r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nThe range of n is [1, 10000].\r\nThe range of dresses number in a super washing machine is [0, 1e5].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findMinMoves(vector<int>& machines) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int findMinMoves(int[] machines) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findMinMoves(self, machines):\r\n        \"\"\"\r\n        :type machines: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int findMinMoves(int* machines, int machinesSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindMinMoves(int[] machines) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} machines\r\n * @return {number}\r\n */\r\nvar findMinMoves = function(machines) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} machines\r\n# @return {Integer}\r\ndef find_min_moves(machines)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMinMoves(_ machines: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMinMoves(machines []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findMinMoves(machines: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findMinMoves(machines: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,0,5]","testable":true,"templateMeta":{"name":"findMinMoves","params":[{"name":"machines","type":"integer[]"}],"return":{"type":"integer"}}}