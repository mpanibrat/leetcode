{"id":496,"fid":496,"name":"Next Greater Element I","slug":"next-greater-element-i","link":"https://leetcode.com/problems/next-greater-element-i/description/","percent":57.32892369812328,"level":"Easy","category":"algorithms","totalAC":"73K","totalSubmit":"127.3K","desc":"\r\nYou are given two arrays (without duplicates) nums1 and nums2 where nums1â€™s elements are subset of nums2. Find all the next greater numbers for nums1's elements in the corresponding places of nums2. \r\n\r\n\r\n\r\nThe Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, output -1 for this number.\r\n\r\n\r\nExample 1:\r\n\r\nInput: nums1 = [4,1,2], nums2 = [1,3,4,2].\r\nOutput: [-1,3,-1]\r\nExplanation:\r\n    For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\r\n    For number 1 in the first array, the next greater number for it in the second array is 3.\r\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: nums1 = [2,4], nums2 = [1,2,3,4].\r\nOutput: [3,-1]\r\nExplanation:\r\n    For number 2 in the first array, the next greater number for it in the second array is 3.\r\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nAll elements in nums1 and nums2 are unique.\r\nThe length of both nums1 and nums2 would not exceed 1000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> nextGreaterElement(vector<int>& findNums, vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] nextGreaterElement(int[] nums1, int[] nums2) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def nextGreaterElement(self, findNums, nums):\r\n        \"\"\"\r\n        :type findNums: List[int]\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def nextGreaterElement(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* nextGreaterElement(int* findNums, int findNumsSize, int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] NextGreaterElement(int[] findNums, int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} findNums\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar nextGreaterElement = function(findNums, nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} find_nums\r\n# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef next_greater_element(find_nums, nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func nextGreaterElement(_ nums1: [Int], _ nums2: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func nextGreaterElement(findNums []int, nums []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def nextGreaterElement(nums1: Array[Int], nums2: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun nextGreaterElement(nums1: IntArray, nums2: IntArray): IntArray {\n        \n    }\n}"}],"testcase":"[4,1,2]\n[1,3,4,2]","testable":true,"templateMeta":{"name":"nextGreaterElement","params":[{"name":"nums1","type":"integer[]"},{"name":"nums2","type":"integer[]"}],"return":{"type":"integer[]"}}}