{"id":763,"fid":761,"name":"Special Binary String","slug":"special-binary-string","link":"https://leetcode.com/problems/special-binary-string/description/","percent":46.42685851318945,"level":"Hard","category":"algorithms","totalAC":"2.9K","totalSubmit":"6.3K","desc":"\r\nSpecial binary strings are binary strings with the following two properties:\r\n\r\nThe number of 0's is equal to the number of 1's.\r\nEvery prefix of the binary string has at least as many 1's as 0's.\r\n\r\nGiven a special string S, a move consists of choosing two consecutive, non-empty, special substrings of S, and swapping them.  (Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)\r\n\r\nAt the end of any number of moves, what is the lexicographically largest resulting string possible?\r\n\r\n\r\nExample 1:\r\n\r\nInput: S = \"11011000\"\r\nOutput: \"11100100\"\r\nExplanation:\r\nThe strings \"10\" [occuring at S[1]] and \"1100\" [at S[3]] are swapped.\r\nThis is the lexicographically largest string possible after some number of swaps.\r\n\r\n\r\n\r\nNote:\r\nS has length at most 50.\r\nS is guaranteed to be a special binary string as defined above.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string makeLargestSpecial(string S) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String makeLargestSpecial(String S) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def makeLargestSpecial(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def makeLargestSpecial(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* makeLargestSpecial(char* S) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string MakeLargestSpecial(string S) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} S\r\n * @return {string}\r\n */\r\nvar makeLargestSpecial = function(S) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {String}\r\ndef make_largest_special(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func makeLargestSpecial(_ S: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func makeLargestSpecial(S string) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def makeLargestSpecial(S: String): String = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun makeLargestSpecial(S: String): String {\r\n        \r\n    }\r\n}"}],"testcase":"\"11011000\"","testable":true,"templateMeta":{"name":"makeLargestSpecial","params":[{"name":"S","type":"string"}],"return":{"type":"string"}}}