{"id":360,"fid":360,"name":"Sort Transformed Array","slug":"sort-transformed-array","link":"https://leetcode.com/problems/sort-transformed-array/description/","percent":45.807974923161474,"level":"Medium","category":"algorithms","totalAC":"22.5K","totalSubmit":"49.1K","desc":"Given a sorted array of integers nums and integer values a, b and c. Apply a quadratic function of the form f(x) = ax2 + bx + c to each element x in the array.\r\n\r\nThe returned array must be in sorted order.\r\n\r\nExpected time complexity: O(n)\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: nums = [-4,-2,2,4], a = 1, b = 3, c = 5\r\nOutput: [3,9,15,33]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: nums = [-4,-2,2,4], a = -1, b = 3, c = 5\r\nOutput: [-23,-5,1,7]\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] sortTransformedArray(int[] nums, int a, int b, int c) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def sortTransformedArray(self, nums, a, b, c):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type a: int\r\n        :type b: int\r\n        :type c: int\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def sortTransformedArray(self, nums, a, b, c):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type a: int\r\n        :type b: int\r\n        :type c: int\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* sortTransformedArray(int* nums, int numsSize, int a, int b, int c, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] SortTransformedArray(int[] nums, int a, int b, int c) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} a\r\n * @param {number} b\r\n * @param {number} c\r\n * @return {number[]}\r\n */\r\nvar sortTransformedArray = function(nums, a, b, c) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} a\r\n# @param {Integer} b\r\n# @param {Integer} c\r\n# @return {Integer[]}\r\ndef sort_transformed_array(nums, a, b, c)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sortTransformedArray(_ nums: [Int], _ a: Int, _ b: Int, _ c: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func sortTransformedArray(nums []int, a int, b int, c int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def sortTransformedArray(nums: Array[Int], a: Int, b: Int, c: Int): Array[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun sortTransformedArray(nums: IntArray, a: Int, b: Int, c: Int): IntArray {\r\n        \r\n    }\r\n}"}],"testcase":"[-4,-2,2,4]\n1\n3\n5","testable":true,"templateMeta":{"name":"sortTransformedArray","params":[{"name":"nums","type":"integer[]"},{"name":"a","type":"integer"},{"name":"b","type":"integer"},{"name":"c","type":"integer"}],"return":{"type":"integer[]"}}}