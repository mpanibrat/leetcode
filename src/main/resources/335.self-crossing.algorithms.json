{"id":335,"fid":335,"name":"Self Crossing","slug":"self-crossing","link":"https://leetcode.com/problems/self-crossing/description/","percent":26.562243604087417,"level":"Hard","category":"algorithms","totalAC":"17.8K","totalSubmit":"67K","desc":"You are given an array x of n positive numbers. You start at point (0,0) and moves x[0] metres to the north, then x[1] metres to the west, x[2] metres to the south, x[3] metres to the east and so on. In other words, after each move your direction changes counter-clockwise.\r\n\r\nWrite a one-pass algorithm with O(1) extra space to determine, if your path crosses itself, or not.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [2,1,1,2]\r\n\r\n?????\r\n?   ?\r\n???????>\r\n    ?\r\n\r\nInput: true \r\nExplanation: self crossing\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,2,3,4]\r\n\r\n????????\r\n?      ?\r\n?\r\n?\r\n?????????????>\r\n\r\nOutput: false \r\nExplanation: not self crossing\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [1,1,1,1]\r\n\r\n?????\r\n?   ?\r\n?????>\r\n\r\nOutput: true \r\nExplanation: self crossing\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool isSelfCrossing(vector<int>& x) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean isSelfCrossing(int[] x) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def isSelfCrossing(self, x):\r\n        \"\"\"\r\n        :type x: List[int]\r\n        :rtype: bool\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def isSelfCrossing(self, x):\r\n        \"\"\"\r\n        :type x: List[int]\r\n        :rtype: bool\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"bool isSelfCrossing(int* x, int xSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool IsSelfCrossing(int[] x) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} x\r\n * @return {boolean}\r\n */\r\nvar isSelfCrossing = function(x) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} x\r\n# @return {Boolean}\r\ndef is_self_crossing(x)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isSelfCrossing(_ x: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isSelfCrossing(x []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def isSelfCrossing(x: Array[Int]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun isSelfCrossing(x: IntArray): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[2,1,1,2]","testable":true,"templateMeta":{"name":"isSelfCrossing","params":[{"name":"x","type":"integer[]"}],"return":{"type":"boolean"}}}