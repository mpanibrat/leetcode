{"id":55,"fid":55,"name":"Jump Game","slug":"jump-game","link":"https://leetcode.com/problems/jump-game/description/","percent":30.415570767851523,"level":"Medium","category":"algorithms","totalAC":"204.9K","totalSubmit":"673.7K","desc":"Given an array of non-negative integers, you are initially positioned at the first index of the array.\r\n\r\nEach element in the array represents your maximum jump length at that position.\r\n\r\nDetermine if you are able to reach the last index.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [2,3,1,1,4]\r\nOutput: true\r\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [3,2,1,0,4]\r\nOutput: false\r\nExplanation: You will always arrive at index 3 no matter what. Its maximum\r\nÂ             jump length is 0, which makes it impossible to reach the last index.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool canJump(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean canJump(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def canJump(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def canJump(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool canJump(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CanJump(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {boolean}\r\n */\r\nvar canJump = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Boolean}\r\ndef can_jump(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canJump(_ nums: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canJump(nums []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def canJump(nums: Array[Int]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun canJump(nums: IntArray): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[2,3,1,1,4]","testable":true,"templateMeta":{"name":"canJump","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"boolean"}}}