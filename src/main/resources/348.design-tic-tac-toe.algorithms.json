{"id":348,"fid":348,"name":"Design Tic-Tac-Toe","slug":"design-tic-tac-toe","link":"https://leetcode.com/problems/design-tic-tac-toe/description/","percent":47.224346671669146,"level":"Medium","category":"algorithms","totalAC":"32.7K","totalSubmit":"69.3K","desc":"Design a Tic-tac-toe game that is played between two players on a n x n grid.\r\n\r\n\r\nYou may assume the following rules:\r\n\r\nA move is guaranteed to be valid and is placed on an empty block.\r\nOnce a winning condition is reached, no more moves is allowed.\r\nA player who succeeds in placing n of their marks in a horizontal, vertical, or diagonal row wins the game.\r\n\r\n\r\n\r\nExample:\r\n\r\nGiven n = 3, assume that player 1 is \"X\" and player 2 is \"O\" in the board.\r\n\r\nTicTacToe toe = new TicTacToe(3);\r\n\r\ntoe.move(0, 0, 1); -> Returns 0 (no one wins)\r\n|X| | |\r\n| | | |    // Player 1 makes a move at (0, 0).\r\n| | | |\r\n\r\ntoe.move(0, 2, 2); -> Returns 0 (no one wins)\r\n|X| |O|\r\n| | | |    // Player 2 makes a move at (0, 2).\r\n| | | |\r\n\r\ntoe.move(2, 2, 1); -> Returns 0 (no one wins)\r\n|X| |O|\r\n| | | |    // Player 1 makes a move at (2, 2).\r\n| | |X|\r\n\r\ntoe.move(1, 1, 2); -> Returns 0 (no one wins)\r\n|X| |O|\r\n| |O| |    // Player 2 makes a move at (1, 1).\r\n| | |X|\r\n\r\ntoe.move(2, 0, 1); -> Returns 0 (no one wins)\r\n|X| |O|\r\n| |O| |    // Player 1 makes a move at (2, 0).\r\n|X| |X|\r\n\r\ntoe.move(1, 0, 2); -> Returns 0 (no one wins)\r\n|X| |O|\r\n|O|O| |    // Player 2 makes a move at (1, 0).\r\n|X| |X|\r\n\r\ntoe.move(2, 1, 1); -> Returns 1 (player 1 wins)\r\n|X| |O|\r\n|O|O| |    // Player 1 makes a move at (2, 1).\r\n|X|X|X|\r\n\r\n\r\n\r\nFollow up:\r\nCould you do better than O(n2) per move() operation?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class TicTacToe {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    TicTacToe(int n) {\r\n        \r\n    }\r\n    \r\n    /** Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins. */\r\n    int move(int row, int col, int player) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your TicTacToe object will be instantiated and called as such:\r\n * TicTacToe obj = new TicTacToe(n);\r\n * int param_1 = obj.move(row,col,player);\r\n */"},{"value":"java","text":"Java","defaultCode":"class TicTacToe {\r\n\r\n    /** Initialize your data structure here. */\r\n    public TicTacToe(int n) {\r\n        \r\n    }\r\n    \r\n    /** Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins. */\r\n    public int move(int row, int col, int player) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your TicTacToe object will be instantiated and called as such:\r\n * TicTacToe obj = new TicTacToe(n);\r\n * int param_1 = obj.move(row,col,player);\r\n */"},{"value":"python","text":"Python","defaultCode":"class TicTacToe(object):\r\n\r\n    def __init__(self, n):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        :type n: int\r\n        \"\"\"\r\n        \r\n\r\n    def move(self, row, col, player):\r\n        \"\"\"\r\n        Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins.\r\n        :type row: int\r\n        :type col: int\r\n        :type player: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your TicTacToe object will be instantiated and called as such:\r\n# obj = TicTacToe(n)\r\n# param_1 = obj.move(row,col,player)"},{"value":"python3","text":"Python3","defaultCode":"class TicTacToe:\r\n\r\n    def __init__(self, n):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        :type n: int\r\n        \"\"\"\r\n        \r\n\r\n    def move(self, row, col, player):\r\n        \"\"\"\r\n        Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins.\r\n        :type row: int\r\n        :type col: int\r\n        :type player: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your TicTacToe object will be instantiated and called as such:\r\n# obj = TicTacToe(n)\r\n# param_1 = obj.move(row,col,player)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} TicTacToe;\r\n\r\n/** Initialize your data structure here. */\r\nTicTacToe* ticTacToeCreate(int n) {\r\n    \r\n}\r\n\r\n/** Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins. */\r\nint ticTacToeMove(TicTacToe* obj, int row, int col, int player) {\r\n    \r\n}\r\n\r\nvoid ticTacToeFree(TicTacToe* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your TicTacToe struct will be instantiated and called as such:\r\n * struct TicTacToe* obj = ticTacToeCreate(n);\r\n * int param_1 = ticTacToeMove(obj, row, col, player);\r\n * ticTacToeFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class TicTacToe {\r\n\r\n    /** Initialize your data structure here. */\r\n    public TicTacToe(int n) {\r\n        \r\n    }\r\n    \r\n    /** Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins. */\r\n    public int Move(int row, int col, int player) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your TicTacToe object will be instantiated and called as such:\r\n * TicTacToe obj = new TicTacToe(n);\r\n * int param_1 = obj.Move(row,col,player);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n * @param {number} n\r\n */\r\nvar TicTacToe = function(n) {\r\n    \r\n};\r\n\r\n/**\r\n * Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins. \r\n * @param {number} row \r\n * @param {number} col \r\n * @param {number} player\r\n * @return {number}\r\n */\r\nTicTacToe.prototype.move = function(row, col, player) {\r\n    \r\n};\r\n\r\n/** \r\n * Your TicTacToe object will be instantiated and called as such:\r\n * var obj = Object.create(TicTacToe).createNew(n)\r\n * var param_1 = obj.move(row,col,player)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class TicTacToe\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n    :type n: Integer\r\n=end\r\n    def initialize(n)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins.\r\n    :type row: Integer\r\n    :type col: Integer\r\n    :type player: Integer\r\n    :rtype: Integer\r\n=end\r\n    def move(row, col, player)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your TicTacToe object will be instantiated and called as such:\r\n# obj = TicTacToe.new(n)\r\n# param_1 = obj.move(row, col, player)"},{"value":"swift","text":"Swift","defaultCode":"\nclass TicTacToe {\n\n    /** Initialize your data structure here. */\n    init(_ n: Int) {\n        \n    }\n    \n    /** Player {player} makes a move at ({row}, {col}).\n        @param row The row of the board.\n        @param col The column of the board.\n        @param player The player, can be either 1 or 2.\n        @return The current winning condition, can be either:\n                0: No one wins.\n                1: Player 1 wins.\n                2: Player 2 wins. */\n    func move(_ row: Int, _ col: Int, _ player: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your TicTacToe object will be instantiated and called as such:\n * let obj = TicTacToe(n)\n * let ret_1: Int = obj.move(row, col, player)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type TicTacToe struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor(n int) TicTacToe {\r\n    \r\n}\r\n\r\n\r\n/** Player {player} makes a move at ({row}, {col}).\r\n        @param row The row of the board.\r\n        @param col The column of the board.\r\n        @param player The player, can be either 1 or 2.\r\n        @return The current winning condition, can be either:\r\n                0: No one wins.\r\n                1: Player 1 wins.\r\n                2: Player 2 wins. */\r\nfunc (this *TicTacToe) Move(row int, col int, player int) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your TicTacToe object will be instantiated and called as such:\r\n * obj := Constructor(n);\r\n * param_1 := obj.Move(row,col,player);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class TicTacToe(_n: Int) {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Player {player} makes a move at ({row}, {col}).\n        @param row The row of the board.\n        @param col The column of the board.\n        @param player The player, can be either 1 or 2.\n        @return The current winning condition, can be either:\n                0: No one wins.\n                1: Player 1 wins.\n                2: Player 2 wins. */\n    def move(row: Int, col: Int, player: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your TicTacToe object will be instantiated and called as such:\n * var obj = new TicTacToe(n)\n * var param_1 = obj.move(row,col,player)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class TicTacToe(n: Int) {\n\n    /** Initialize your data structure here. */\n    \n\n    /** Player {player} makes a move at ({row}, {col}).\n        @param row The row of the board.\n        @param col The column of the board.\n        @param player The player, can be either 1 or 2.\n        @return The current winning condition, can be either:\n                0: No one wins.\n                1: Player 1 wins.\n                2: Player 2 wins. */\n    fun move(row: Int, col: Int, player: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your TicTacToe object will be instantiated and called as such:\n * var obj = TicTacToe(n)\n * var param_1 = obj.move(row,col,player)\n */"}],"testcase":"[\"TicTacToe\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\",\"move\"]\n[[3],[0,0,1],[0,2,2],[2,2,1],[1,1,2],[2,0,1],[1,0,2],[2,1,1]]","testable":true,"templateMeta":{"classname":"TicTacToe","constructor":{"params":[{"type":"integer","name":"n"}],"comment":"Initialize your data structure here."},"methods":[{"name":"move","params":[{"type":"integer","name":"row"},{"type":"integer","name":"col"},{"type":"integer","name":"player"}],"comment":"Player {player} makes a move at ({row}, {col}).\n        @param row The row of the board.\n        @param col The column of the board.\n        @param player The player, can be either 1 or 2.\n        @return The current winning condition, can be either:\n                0: No one wins.\n                1: Player 1 wins.\n                2: Player 2 wins.","return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}