{"id":518,"fid":518,"name":"Coin Change 2","slug":"coin-change-2","link":"https://leetcode.com/problems/coin-change-2/description/","percent":38.9185786029078,"level":"Medium","category":"algorithms","totalAC":"26.6K","totalSubmit":"68.3K","desc":"You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.\r\n\r\nNote: You can assume that\r\n\r\n\r\n\t0 <= amount <= 5000\r\n\t1 <= coin <= 5000\r\n\tthe number of coins is less than 500\r\n\tthe answer is guaranteed to fit into signed 32-bit integer\r\n\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: amount = 5, coins = [1, 2, 5]\r\nOutput: 4\r\nExplanation: there are four ways to make up the amount:\r\n5=5\r\n5=2+2+1\r\n5=2+1+1+1\r\n5=1+1+1+1+1\r\n\r\n\r\n \r\n\r\nExample 2:\r\n\r\n\r\nInput: amount = 3, coins = [2]\r\nOutput: 0\r\nExplanation: the amount of 3 cannot be made up just with coins of 2.\r\n\r\n\r\n \r\n\r\nExample 3:\r\n\r\n\r\nInput: amount = 10, coins = [10] \r\nOutput: 1\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int change(int amount, vector<int>& coins) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int change(int amount, int[] coins) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def change(self, amount, coins):\r\n        \"\"\"\r\n        :type amount: int\r\n        :type coins: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int change(int amount, int* coins, int coinsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int Change(int amount, int[] coins) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} amount\r\n * @param {number[]} coins\r\n * @return {number}\r\n */\r\nvar change = function(amount, coins) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} amount\r\n# @param {Integer[]} coins\r\n# @return {Integer}\r\ndef change(amount, coins)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func change(_ amount: Int, _ coins: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func change(amount int, coins []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def change(amount: Int, coins: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun change(amount: Int, coins: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"5\n[1,2,5]","testable":true,"templateMeta":{"name":"change","params":[{"name":"amount","type":"integer"},{"name":"coins","type":"integer[]"}],"return":{"type":"integer"}}}