{"id":689,"fid":689,"name":"Maximum Sum of 3 Non-Overlapping Subarrays","slug":"maximum-sum-of-3-non-overlapping-subarrays","link":"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/description/","percent":42.464125560538115,"level":"Hard","category":"algorithms","totalAC":"18.9K","totalSubmit":"44.6K","desc":"\r\nIn a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.\r\n\r\n\r\nEach subarray will be of size k, and we want to maximize the sum of all 3*k entries.\r\n\r\n\r\nReturn the result as a list of indices representing the starting position of each interval (0-indexed).  If there are multiple answers, return the lexicographically smallest one.\r\n\r\nExample:\r\n\r\nInput: [1,2,1,2,6,7,5,1], 2\r\nOutput: [0, 3, 5]\r\nExplanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\r\nWe could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\r\n\r\n\r\n\r\nNote:\r\nnums.length will be between 1 and 20000.\r\nnums[i] will be between 1 and 65535.\r\nk will be between 1 and floor(nums.length / 3).\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxSumOfThreeSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxSumOfThreeSubarrays(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* maxSumOfThreeSubarrays(int* nums, int numsSize, int k, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] MaxSumOfThreeSubarrays(int[] nums, int k) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSumOfThreeSubarrays = function(nums, k) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef max_sum_of_three_subarrays(nums, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxSumOfThreeSubarrays(_ nums: [Int], _ k: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxSumOfThreeSubarrays(nums []int, k int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxSumOfThreeSubarrays(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxSumOfThreeSubarrays(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"}],"testcase":"[1,2,1,2,6,7,5,1]\n2","testable":true,"templateMeta":{"name":"maxSumOfThreeSubarrays","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer[]"}}}