{"id":130,"fid":130,"name":"Surrounded Regions","slug":"surrounded-regions","link":"https://leetcode.com/problems/surrounded-regions/description/","percent":21.10364446559443,"level":"Medium","category":"algorithms","totalAC":"120.6K","totalSubmit":"571.6K","desc":"Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.\r\n\r\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\r\n\r\nExample:\r\n\r\n\r\nX X X X\r\nX O O X\r\nX X O X\r\nX O X X\r\n\r\n\r\nAfter running your function, the board should be:\r\n\r\n\r\nX X X X\r\nX X X X\r\nX X X X\r\nX O X X\r\n\r\n\r\nExplanation:\r\n\r\nSurrounded regions shouldn’t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    void solve(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public void solve(char[][] board) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def solve(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def solve(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"void solve(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public void Solve(char[,] board) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} board\r\n * @return {void} Do not return anything, modify board in-place instead.\r\n */\r\nvar solve = function(board) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\r\n# @return {Void} Do not return anything, modify board in-place instead.\r\ndef solve(board)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func solve(_ board: inout [[Character]]) {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func solve(board [][]byte)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def solve(board: Array[Array[Char]]): Unit = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun solve(board: Array<CharArray>): Unit {\r\n        \r\n    }\r\n}"}],"testcase":"[[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]","testable":true,"templateMeta":{"name":"solve","params":[{"name":"board","type":"character[][]"}],"return":{"type":"void"},"output":{"paramindex":0}}}