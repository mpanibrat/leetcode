{"id":801,"fid":785,"name":"Is Graph Bipartite?","slug":"is-graph-bipartite","link":"https://leetcode.com/problems/is-graph-bipartite/description/","percent":40.25657767033122,"level":"Medium","category":"algorithms","totalAC":"22.8K","totalSubmit":"56.7K","desc":"Given an undirected graph, return true if and only if it is bipartite.\r\n\r\nRecall that a graph is bipartite if we can split it's set of nodes into two independent subsets A and B such that every edge in the graph has one node in A and another node in B.\r\n\r\nThe graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists.  Each node is an integer between 0 and graph.length - 1.  There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.\r\n\r\n\r\nExample 1:\r\nInput: [[1,3], [0,2], [1,3], [0,2]]\r\nOutput: true\r\nExplanation: \r\nThe graph looks like this:\r\n0----1\r\n|    |\r\n|    |\r\n3----2\r\nWe can divide the vertices into two groups: {0, 2} and {1, 3}.\r\n\r\n\r\n\r\nExample 2:\r\nInput: [[1,2,3], [0,2], [0,1,3], [0,2]]\r\nOutput: false\r\nExplanation: \r\nThe graph looks like this:\r\n0----1\r\n| \\  |\r\n|  \\ |\r\n3----2\r\nWe cannot find a way to divide the set of nodes into two independent subsets.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tgraph will have length in range [1, 100].\r\n\tgraph[i] will contain integers in range [0, graph.length - 1].\r\n\tgraph[i] will not contain i or duplicate values.\r\n\tThe graph is undirected: if any element j is in graph[i], then i will be in graph[j].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isBipartite(vector<vector<int>>& graph) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isBipartite(int[][] graph) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isBipartite(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isBipartite(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool isBipartite(int** graph, int graphRowSize, int *graphColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsBipartite(int[][] graph) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} graph\n * @return {boolean}\n */\nvar isBipartite = function(graph) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} graph\n# @return {Boolean}\ndef is_bipartite(graph)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isBipartite(_ graph: [[Int]]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isBipartite(graph [][]int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isBipartite(graph: Array[Array[Int]]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isBipartite(graph: Array<IntArray>): Boolean {\n        \n    }\n}"}],"testcase":"[[1,3],[0,2],[1,3],[0,2]]","testable":true,"templateMeta":{"name":"isBipartite","params":[{"name":"graph","type":"integer[][]"}],"return":{"type":"boolean"}}}