{"id":388,"fid":388,"name":"Longest Absolute File Path","slug":"longest-absolute-file-path","link":"https://leetcode.com/problems/longest-absolute-file-path/description/","percent":38.104374520337686,"level":"Medium","category":"algorithms","totalAC":"55.6K","totalSubmit":"145.9K","desc":"Suppose we abstract our file system by a string in the following manner:\r\n\r\nThe string \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\" represents:\r\n\r\ndir\r\n    subdir1\r\n    subdir2\r\n        file.ext\r\n\r\n\r\nThe directory dir contains an empty sub-directory subdir1 and a sub-directory subdir2 containing a file file.ext.\r\n\r\nThe string \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\" represents:\r\n\r\ndir\r\n    subdir1\r\n        file1.ext\r\n        subsubdir1\r\n    subdir2\r\n        subsubdir2\r\n            file2.ext\r\n\r\n\r\nThe directory dir contains two sub-directories subdir1 and subdir2. subdir1 contains a file file1.ext and an empty second-level sub-directory subsubdir1. subdir2 contains a second-level sub-directory subsubdir2 containing a file file2.ext.\r\n\r\nWe are interested in finding the longest (number of characters) absolute path to a file within our file system. For example, in the second example above, the longest absolute path is \"dir/subdir2/subsubdir2/file2.ext\", and its length is 32 (not including the double quotes).\r\n\r\nGiven a string representing the file system in the above format, return the length of the longest absolute path to file in the abstracted file system. If there is no file in the system, return 0.\r\n\r\nNote:\r\n\r\nThe name of a file contains at least a . and an extension.\r\nThe name of a directory or sub-directory will not contain a ..\r\n\r\n\r\n\r\nTime complexity required: O(n) where n is the size of the input string.\r\n\r\nNotice that a/aa/aaa/file1.txt is not the longest file path, if there is another path aaaaaaaaaaaaaaaaaaaaa/sth.png.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int lengthLongestPath(string input) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int lengthLongestPath(String input) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def lengthLongestPath(self, input):\r\n        \"\"\"\r\n        :type input: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def lengthLongestPath(self, input):\n        \"\"\"\n        :type input: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int lengthLongestPath(char* input) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int LengthLongestPath(string input) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} input\r\n * @return {number}\r\n */\r\nvar lengthLongestPath = function(input) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} input\r\n# @return {Integer}\r\ndef length_longest_path(input)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func lengthLongestPath(_ input: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func lengthLongestPath(input string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def lengthLongestPath(input: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun lengthLongestPath(input: String): Int {\n        \n    }\n}"}],"testcase":"\"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"","testable":true,"templateMeta":{"name":"lengthLongestPath","params":[{"name":"input","type":"string"}],"return":{"type":"integer"}}}