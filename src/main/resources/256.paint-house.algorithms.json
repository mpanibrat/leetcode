{"id":256,"fid":256,"name":"Paint House","slug":"paint-house","link":"https://leetcode.com/problems/paint-house/description/","percent":47.29105417891642,"level":"Easy","category":"algorithms","totalAC":"43.9K","totalSubmit":"92.9K","desc":"There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\r\n\r\nThe cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.\r\n\r\nNote:\r\nAll costs are positive integers.\r\n\r\nExample:\r\n\r\n\r\nInput: [[17,2,17],[16,16,5],[14,3,19]]\r\nOutput: 10\r\nExplanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue. \r\nÂ             Minimum cost: 2 + 5 + 3 = 10.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minCost(vector<vector<int>>& costs) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minCost(int[][] costs) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minCost(self, costs):\r\n        \"\"\"\r\n        :type costs: List[List[int]]\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minCost(self, costs):\r\n        \"\"\"\r\n        :type costs: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minCost(int** costs, int costsRowSize, int costsColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinCost(int[,] costs) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} costs\r\n * @return {number}\r\n */\r\nvar minCost = function(costs) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} costs\r\n# @return {Integer}\r\ndef min_cost(costs)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minCost(_ costs: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minCost(costs [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minCost(costs: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minCost(costs: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[17,2,17],[16,16,5],[14,3,19]]","testable":true,"templateMeta":{"name":"minCost","params":[{"name":"costs","type":"integer[][]"}],"return":{"type":"integer"}}}