{"id":745,"fid":744,"name":"Find Smallest Letter Greater Than Target","slug":"find-smallest-letter-greater-than-target","link":"https://leetcode.com/problems/find-smallest-letter-greater-than-target/description/","percent":42.929821002200406,"level":"Easy","category":"algorithms","totalAC":"27.5K","totalSubmit":"64.1K","desc":"\r\nGiven a list of sorted characters letters containing only lowercase letters, and given a target letter target, find the smallest element in the list that is larger than the given target.\r\n\r\nLetters also wrap around.  For example, if the target is target = 'z' and letters = ['a', 'b'], the answer is 'a'.\r\n\r\n\r\nExamples:\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"a\"\r\nOutput: \"c\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"c\"\r\nOutput: \"f\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"d\"\r\nOutput: \"f\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"g\"\r\nOutput: \"j\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"j\"\r\nOutput: \"c\"\r\n\r\nInput:\r\nletters = [\"c\", \"f\", \"j\"]\r\ntarget = \"k\"\r\nOutput: \"c\"\r\n\r\n\r\n\r\nNote:\r\n\r\nletters has a length in range [2, 10000].\r\nletters consists of lowercase letters, and contains at least 2 unique letters.\r\ntarget is a lowercase letter.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    char nextGreatestLetter(vector<char>& letters, char target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def nextGreatestLetter(self, letters, target):\n        \"\"\"\n        :type letters: List[str]\n        :type target: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char nextGreatestLetter(char* letters, int lettersSize, char target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public char NextGreatestLetter(char[] letters, char target) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[]} letters\n * @param {character} target\n * @return {character}\n */\nvar nextGreatestLetter = function(letters, target) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[]} letters\n# @param {Character} target\n# @return {Character}\ndef next_greatest_letter(letters, target)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func nextGreatestLetter(_ letters: [Character], _ target: Character) -> Character {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func nextGreatestLetter(letters []byte, target byte) byte {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def nextGreatestLetter(letters: Array[Char], target: Char): Char = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun nextGreatestLetter(letters: CharArray, target: Char): Char {\n        \n    }\n}"}],"testcase":"[\"c\",\"f\",\"j\"]\n\"a\"","testable":true,"templateMeta":{"name":"nextGreatestLetter","params":[{"name":"letters","type":"character[]"},{"name":"target","type":"character"}],"return":{"type":"character"}}}