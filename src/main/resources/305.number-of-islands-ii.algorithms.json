{"id":305,"fid":305,"name":"Number of Islands II","slug":"number-of-islands-ii","link":"https://leetcode.com/problems/number-of-islands-ii/description/","percent":40.58053820143683,"level":"Hard","category":"algorithms","totalAC":"43.3K","totalSubmit":"106.8K","desc":"A 2d grid map of m rows and n columns is initially filled with water. We may perform an addLand operation which turns the water at position (row, col) into a land. Given a list of positions to operate, count the number of islands after each addLand operation. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\r\n\r\nExample:\r\n\r\n\r\nInput: m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]]\r\nOutput: [1,1,2,3]\r\n\r\n\r\nExplanation:\r\n\r\nInitially, the 2d grid grid is filled with water. (Assume 0 represents water and 1 represents land).\r\n\r\n\r\n0 0 0\r\n0 0 0\r\n0 0 0\r\n\r\n\r\nOperation #1: addLand(0, 0) turns the water at grid[0][0] into a land.\r\n\r\n\r\n1 0 0\r\n0 0 0   Number of islands = 1\r\n0 0 0\r\n\r\n\r\nOperation #2: addLand(0, 1) turns the water at grid[0][1] into a land.\r\n\r\n\r\n1 1 0\r\n0 0 0   Number of islands = 1\r\n0 0 0\r\n\r\n\r\nOperation #3: addLand(1, 2) turns the water at grid[1][2] into a land.\r\n\r\n\r\n1 1 0\r\n0 0 1   Number of islands = 2\r\n0 0 0\r\n\r\n\r\nOperation #4: addLand(2, 1) turns the water at grid[2][1] into a land.\r\n\r\n\r\n1 1 0\r\n0 0 1   Number of islands = 3\r\n0 1 0\r\n\r\n\r\nFollow up:\r\n\r\nCan you do it in time complexity O(k log mn), where k is the length of the positions?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> numIslands2(int m, int n, vector<pair<int, int>>& positions) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> numIslands2(int m, int n, int[][] positions) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def numIslands2(self, m, n, positions):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :type positions: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def numIslands2(self, m, n, positions):\r\n        \"\"\"\r\n        :type m: int\r\n        :type n: int\r\n        :type positions: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* numIslands2(int m, int n, int** positions, int positionsRowSize, int positionsColSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> NumIslands2(int m, int n, int[,] positions) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} m\r\n * @param {number} n\r\n * @param {number[][]} positions\r\n * @return {number[]}\r\n */\r\nvar numIslands2 = function(m, n, positions) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} m\r\n# @param {Integer} n\r\n# @param {Integer[][]} positions\r\n# @return {Integer[]}\r\ndef num_islands2(m, n, positions)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numIslands2(_ m: Int, _ n: Int, _ positions: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numIslands2(m int, n int, positions [][]int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def numIslands2(m: Int, n: Int, positions: Array[Array[Int]]): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun numIslands2(m: Int, n: Int, positions: Array<IntArray>): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"3\n3\n[[0,0],[0,1],[1,2],[2,1]]","testable":true,"templateMeta":{"name":"numIslands2","params":[{"name":"m","type":"integer","dealloc":false},{"name":"n","type":"integer","dealloc":false},{"name":"positions","type":"pair<integer,integer>[]","dealloc":false}],"return":{"type":"list<integer>","dealloc":true}}}