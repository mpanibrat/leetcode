{"id":232,"fid":232,"name":"Implement Queue using Stacks","slug":"implement-queue-using-stacks","link":"https://leetcode.com/problems/implement-queue-using-stacks/description/","percent":40.28642630801564,"level":"Easy","category":"algorithms","totalAC":"123.8K","totalSubmit":"307.4K","desc":"Implement the following operations of a queue using stacks.\r\n\r\n\r\n\tpush(x) -- Push element x to the back of queue.\r\n\tpop() -- Removes the element from in front of queue.\r\n\tpeek() -- Get the front element.\r\n\tempty() -- Return whether the queue is empty.\r\n\r\n\r\nExample:\r\n\r\n\r\nMyQueue queue = new MyQueue();\r\n\r\nqueue.push(1);\r\nqueue.push(2);  \r\nqueue.peek();  // returns 1\r\nqueue.pop();   // returns 1\r\nqueue.empty(); // returns false\r\n\r\nNotes:\r\n\r\n\r\n\tYou must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid.\r\n\tDepending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.\r\n\tYou may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyQueue {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    MyQueue() {\r\n        \r\n    }\r\n    \r\n    /** Push element x to the back of queue. */\r\n    void push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element from in front of queue and returns that element. */\r\n    int pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the front element. */\r\n    int peek() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the queue is empty. */\r\n    bool empty() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.peek();\r\n * bool param_4 = obj.empty();\r\n */"},{"value":"java","text":"Java","defaultCode":"class MyQueue {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyQueue() {\r\n        \r\n    }\r\n    \r\n    /** Push element x to the back of queue. */\r\n    public void push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element from in front of queue and returns that element. */\r\n    public int pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the front element. */\r\n    public int peek() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the queue is empty. */\r\n    public boolean empty() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.push(x);\r\n * int param_2 = obj.pop();\r\n * int param_3 = obj.peek();\r\n * boolean param_4 = obj.empty();\r\n */"},{"value":"python","text":"Python","defaultCode":"class MyQueue(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        Push element x to the back of queue.\r\n        :type x: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        Removes the element from in front of queue and returns that element.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def peek(self):\r\n        \"\"\"\r\n        Get the front element.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def empty(self):\r\n        \"\"\"\r\n        Returns whether the queue is empty.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyQueue object will be instantiated and called as such:\r\n# obj = MyQueue()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.peek()\r\n# param_4 = obj.empty()"},{"value":"python3","text":"Python3","defaultCode":"class MyQueue:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def push(self, x):\r\n        \"\"\"\r\n        Push element x to the back of queue.\r\n        :type x: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def pop(self):\r\n        \"\"\"\r\n        Removes the element from in front of queue and returns that element.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def peek(self):\r\n        \"\"\"\r\n        Get the front element.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def empty(self):\r\n        \"\"\"\r\n        Returns whether the queue is empty.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyQueue object will be instantiated and called as such:\r\n# obj = MyQueue()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.peek()\r\n# param_4 = obj.empty()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MyQueue;\r\n\r\n/** Initialize your data structure here. */\r\nMyQueue* myQueueCreate(int maxSize) {\r\n    \r\n}\r\n\r\n/** Push element x to the back of queue. */\r\nvoid myQueuePush(MyQueue* obj, int x) {\r\n    \r\n}\r\n\r\n/** Removes the element from in front of queue and returns that element. */\r\nint myQueuePop(MyQueue* obj) {\r\n    \r\n}\r\n\r\n/** Get the front element. */\r\nint myQueuePeek(MyQueue* obj) {\r\n    \r\n}\r\n\r\n/** Returns whether the queue is empty. */\r\nbool myQueueEmpty(MyQueue* obj) {\r\n    \r\n}\r\n\r\nvoid myQueueFree(MyQueue* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MyQueue struct will be instantiated and called as such:\r\n * struct MyQueue* obj = myQueueCreate(maxSize);\r\n * myQueuePush(obj, x);\r\n * int param_2 = myQueuePop(obj);\r\n * int param_3 = myQueuePeek(obj);\r\n * bool param_4 = myQueueEmpty(obj);\r\n * myQueueFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyQueue {\r\n\r\n    /** Initialize your data structure here. */\r\n    public MyQueue() {\r\n        \r\n    }\r\n    \r\n    /** Push element x to the back of queue. */\r\n    public void Push(int x) {\r\n        \r\n    }\r\n    \r\n    /** Removes the element from in front of queue and returns that element. */\r\n    public int Pop() {\r\n        \r\n    }\r\n    \r\n    /** Get the front element. */\r\n    public int Peek() {\r\n        \r\n    }\r\n    \r\n    /** Returns whether the queue is empty. */\r\n    public bool Empty() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * MyQueue obj = new MyQueue();\r\n * obj.Push(x);\r\n * int param_2 = obj.Pop();\r\n * int param_3 = obj.Peek();\r\n * bool param_4 = obj.Empty();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar MyQueue = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Push element x to the back of queue. \r\n * @param {number} x\r\n * @return {void}\r\n */\r\nMyQueue.prototype.push = function(x) {\r\n    \r\n};\r\n\r\n/**\r\n * Removes the element from in front of queue and returns that element.\r\n * @return {number}\r\n */\r\nMyQueue.prototype.pop = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the front element.\r\n * @return {number}\r\n */\r\nMyQueue.prototype.peek = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Returns whether the queue is empty.\r\n * @return {boolean}\r\n */\r\nMyQueue.prototype.empty = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyQueue object will be instantiated and called as such:\r\n * var obj = Object.create(MyQueue).createNew()\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * var param_3 = obj.peek()\r\n * var param_4 = obj.empty()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyQueue\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Push element x to the back of queue.\r\n    :type x: Integer\r\n    :rtype: Void\r\n=end\r\n    def push(x)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Removes the element from in front of queue and returns that element.\r\n    :rtype: Integer\r\n=end\r\n    def pop()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the front element.\r\n    :rtype: Integer\r\n=end\r\n    def peek()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns whether the queue is empty.\r\n    :rtype: Boolean\r\n=end\r\n    def empty()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyQueue object will be instantiated and called as such:\r\n# obj = MyQueue.new()\r\n# obj.push(x)\r\n# param_2 = obj.pop()\r\n# param_3 = obj.peek()\r\n# param_4 = obj.empty()"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyQueue {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    func push(_ x: Int) {\n      \n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    func pop() -> Int {\n      \n    }\n    \n    /** Get the front element. */\n    func peek() -> Int {\n      \n    }\n    \n    /** Returns whether the queue is empty. */\n    func empty() -> Bool {\n      \n    }\n}\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * let obj = MyQueue()\n * obj.push(x)\n * let ret_2: Int = obj.pop()\n * let ret_3: Int = obj.peek()\n * let ret_4: Bool = obj.empty()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MyQueue struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() MyQueue {\r\n    \r\n}\r\n\r\n\r\n/** Push element x to the back of queue. */\r\nfunc (this *MyQueue) Push(x int)  {\r\n    \r\n}\r\n\r\n\r\n/** Removes the element from in front of queue and returns that element. */\r\nfunc (this *MyQueue) Pop() int {\r\n    \r\n}\r\n\r\n\r\n/** Get the front element. */\r\nfunc (this *MyQueue) Peek() int {\r\n    \r\n}\r\n\r\n\r\n/** Returns whether the queue is empty. */\r\nfunc (this *MyQueue) Empty() bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Push(x);\r\n * param_2 := obj.Pop();\r\n * param_3 := obj.Peek();\r\n * param_4 := obj.Empty();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyQueue() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Push element x to the back of queue. */\r\n    def push(x: Int) {\r\n        \r\n    }\r\n\r\n    /** Removes the element from in front of queue and returns that element. */\r\n    def pop(): Int = {\r\n        \r\n    }\r\n\r\n    /** Get the front element. */\r\n    def peek(): Int = {\r\n        \r\n    }\r\n\r\n    /** Returns whether the queue is empty. */\r\n    def empty(): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * var obj = new MyQueue()\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * var param_3 = obj.peek()\r\n * var param_4 = obj.empty()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyQueue() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Push element x to the back of queue. */\r\n    fun push(x: Int) {\r\n        \r\n    }\r\n\r\n    /** Removes the element from in front of queue and returns that element. */\r\n    fun pop(): Int {\r\n        \r\n    }\r\n\r\n    /** Get the front element. */\r\n    fun peek(): Int {\r\n        \r\n    }\r\n\r\n    /** Returns whether the queue is empty. */\r\n    fun empty(): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyQueue object will be instantiated and called as such:\r\n * var obj = MyQueue()\r\n * obj.push(x)\r\n * var param_2 = obj.pop()\r\n * var param_3 = obj.peek()\r\n * var param_4 = obj.empty()\r\n */"}],"testcase":"[\"MyQueue\",\"push\",\"push\",\"peek\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]","testable":true,"templateMeta":{"classname":"MyQueue","constructor":{"params":[{"type":"integer","name":"maxSize","lang":"c","value":"64000"}],"comment":"Initialize your data structure here."},"methods":[{"name":"push","params":[{"type":"integer","name":"x"}],"return":{"type":"void"},"comment":"Push element x to the back of queue."},{"name":"pop","params":[],"return":{"type":"integer"},"comment":"Removes the element from in front of queue and returns that element."},{"name":"peek","params":[],"return":{"type":"integer"},"comment":"Get the front element."},{"name":"empty","params":[],"return":{"type":"boolean"},"comment":"Returns whether the queue is empty."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}