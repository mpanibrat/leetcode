{"id":29,"fid":29,"name":"Divide Two Integers","slug":"divide-two-integers","link":"https://leetcode.com/problems/divide-two-integers/description/","percent":15.74558450815777,"level":"Medium","category":"algorithms","totalAC":"159K","totalSubmit":"1M","desc":"Given two integers dividend and divisor, divide two integers without using multiplication, division and mod operator.\r\n\r\nReturn the quotient after dividing dividend by divisor.\r\n\r\nThe integer division should truncate toward zero.\r\n\r\nExample 1:\r\n\r\n\r\nInput: dividend = 10, divisor = 3\r\nOutput: 3\r\n\r\nExample 2:\r\n\r\n\r\nInput: dividend = 7, divisor = -3\r\nOutput: -2\r\n\r\nNote:\r\n\r\n\r\n\tBoth dividend and divisor will be 32-bit signed integers.\r\n\tThe divisor will never be 0.\r\n\tAssume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For the purpose of this problem, assume that your function returns 231 − 1 when the division result overflows.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int divide(int dividend, int divisor) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int divide(int dividend, int divisor) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def divide(self, dividend, divisor):\r\n        \"\"\"\r\n        :type dividend: int\r\n        :type divisor: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def divide(self, dividend, divisor):\r\n        \"\"\"\r\n        :type dividend: int\r\n        :type divisor: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int divide(int dividend, int divisor) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int Divide(int dividend, int divisor) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} dividend\r\n * @param {number} divisor\r\n * @return {number}\r\n */\r\nvar divide = function(dividend, divisor) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} dividend\r\n# @param {Integer} divisor\r\n# @return {Integer}\r\ndef divide(dividend, divisor)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func divide(_ dividend: Int, _ divisor: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func divide(dividend int, divisor int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def divide(dividend: Int, divisor: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun divide(dividend: Int, divisor: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"10\n3","testable":true,"templateMeta":{"name":"divide","params":[{"name":"dividend","type":"integer"},{"name":"divisor","type":"integer"}],"return":{"type":"integer"}}}