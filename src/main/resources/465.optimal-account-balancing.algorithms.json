{"id":465,"fid":465,"name":"Optimal Account Balancing","slug":"optimal-account-balancing","link":"https://leetcode.com/problems/optimal-account-balancing/description/","percent":40.67796610169491,"level":"Hard","category":"algorithms","totalAC":"12K","totalSubmit":"29.6K","desc":"A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill's lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID), the transactions can be represented as [[0, 1, 10], [2, 0, 5]].\r\n\r\nGiven a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.\r\n\r\nNote:\r\n\r\nA transaction will be given as a tuple (x, y, z). Note that x â‰  y and z > 0.\r\nPerson's IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput:\r\n[[0,1,10], [2,0,5]]\r\n\r\nOutput:\r\n2\r\n\r\nExplanation:\r\nPerson #0 gave person #1 $10.\r\nPerson #2 gave person #0 $5.\r\n\r\nTwo transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput:\r\n[[0,1,10], [1,0,1], [1,2,5], [2,0,5]]\r\n\r\nOutput:\r\n1\r\n\r\nExplanation:\r\nPerson #0 gave person #1 $10.\r\nPerson #1 gave person #0 $1.\r\nPerson #1 gave person #2 $5.\r\nPerson #2 gave person #0 $5.\r\n\r\nTherefore, person #1 only need to give person #0 $4, and all debt is settled.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minTransfers(vector<vector<int>>& transactions) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minTransfers(int[][] transactions) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minTransfers(self, transactions):\r\n        \"\"\"\r\n        :type transactions: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minTransfers(self, transactions):\n        \"\"\"\n        :type transactions: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int minTransfers(int** transactions, int transactionsRowSize, int transactionsColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinTransfers(int[,] transactions) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} transactions\r\n * @return {number}\r\n */\r\nvar minTransfers = function(transactions) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} transactions\r\n# @return {Integer}\r\ndef min_transfers(transactions)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minTransfers(_ transactions: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minTransfers(transactions [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minTransfers(transactions: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minTransfers(transactions: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[0,1,10],[2,0,5]]","testable":true,"templateMeta":{"name":"minTransfers","params":[{"name":"transactions","type":"integer[][]"}],"return":{"type":"integer"}}}