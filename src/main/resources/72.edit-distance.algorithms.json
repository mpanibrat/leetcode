{"id":72,"fid":72,"name":"Edit Distance","slug":"edit-distance","link":"https://leetcode.com/problems/edit-distance/description/","percent":34.76716731810877,"level":"Hard","category":"algorithms","totalAC":"140.2K","totalSubmit":"403.2K","desc":"Given two words word1 and word2, find the minimum number of operations required to convert word1 to word2.\r\n\r\nYou have the following 3 operations permitted on a word:\r\n\r\n\r\n\tInsert a character\r\n\tDelete a character\r\n\tReplace a character\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: word1 = \"horse\", word2 = \"ros\"\r\nOutput: 3\r\nExplanation: \r\nhorse -> rorse (replace 'h' with 'r')\r\nrorse -> rose (remove 'r')\r\nrose -> ros (remove 'e')\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: word1 = \"intention\", word2 = \"execution\"\r\nOutput: 5\r\nExplanation: \r\nintention -> inention (remove 't')\r\ninention -> enention (replace 'i' with 'e')\r\nenention -> exention (replace 'n' with 'x')\r\nexention -> exection (replace 'n' with 'c')\r\nexection -> execution (insert 'u')\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minDistance(string word1, string word2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minDistance(String word1, String word2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minDistance(self, word1, word2):\r\n        \"\"\"\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minDistance(self, word1, word2):\r\n        \"\"\"\r\n        :type word1: str\r\n        :type word2: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minDistance(char* word1, char* word2) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinDistance(string word1, string word2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} word1\r\n * @param {string} word2\r\n * @return {number}\r\n */\r\nvar minDistance = function(word1, word2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} word1\r\n# @param {String} word2\r\n# @return {Integer}\r\ndef min_distance(word1, word2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minDistance(_ word1: String, _ word2: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minDistance(word1 string, word2 string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minDistance(word1: String, word2: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minDistance(word1: String, word2: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"horse\"\n\"ros\"","testable":true,"templateMeta":{"name":"minDistance","params":[{"name":"word1","type":"string"},{"name":"word2","type":"string"}],"return":{"type":"integer"}}}