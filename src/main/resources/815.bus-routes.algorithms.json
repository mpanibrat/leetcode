{"id":833,"fid":815,"name":"Bus Routes","slug":"bus-routes","link":"https://leetcode.com/problems/bus-routes/description/","percent":36.026445160196644,"level":"Hard","category":"algorithms","totalAC":"10.6K","totalSubmit":"29.5K","desc":"We have a list of bus routes. Each routes[i] is a bus route that the i-th bus repeats forever. For example if routes[0] = [1, 5, 7], this means that the first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.\r\n\r\nWe start at bus stop S (initially not on a bus), and we want to go to bus stop T. Travelling by buses only, what is the least number of buses we must take to reach our destination? Return -1 if it is not possible.\r\n\r\n\r\nExample:\r\nInput: \r\nroutes = [[1, 2, 7], [3, 6, 7]]\r\nS = 1\r\nT = 6\r\nOutput: 2\r\nExplanation: \r\nThe best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\r\n\r\n\r\nNote: \r\n\r\n\r\n\t1 <= routes.length <= 500.\r\n\t1 <= routes[i].length <= 500.\r\n\t0 <= routes[i][j] < 10 ^ 6.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numBusesToDestination(vector<vector<int>>& routes, int S, int T) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numBusesToDestination(int[][] routes, int S, int T) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numBusesToDestination(self, routes, S, T):\n        \"\"\"\n        :type routes: List[List[int]]\n        :type S: int\n        :type T: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numBusesToDestination(self, routes, S, T):\n        \"\"\"\n        :type routes: List[List[int]]\n        :type S: int\n        :type T: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numBusesToDestination(int** routes, int routesRowSize, int *routesColSizes, int S, int T) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumBusesToDestination(int[][] routes, int S, int T) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} routes\n * @param {number} S\n * @param {number} T\n * @return {number}\n */\nvar numBusesToDestination = function(routes, S, T) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} routes\n# @param {Integer} s\n# @param {Integer} t\n# @return {Integer}\ndef num_buses_to_destination(routes, s, t)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numBusesToDestination(_ routes: [[Int]], _ S: Int, _ T: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numBusesToDestination(routes [][]int, S int, T int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numBusesToDestination(routes: Array[Array[Int]], S: Int, T: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numBusesToDestination(routes: Array<IntArray>, S: Int, T: Int): Int {\n        \n    }\n}"}],"testcase":"[[1,2,7],[3,6,7]]\n1\n6","testable":true,"templateMeta":{"name":"numBusesToDestination","params":[{"name":"routes","type":"integer[][]"},{"name":"S","type":"integer"},{"name":"T","type":"integer"}],"return":{"type":"integer"}}}