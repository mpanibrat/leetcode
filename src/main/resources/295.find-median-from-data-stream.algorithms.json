{"id":295,"fid":295,"name":"Find Median from Data Stream","slug":"find-median-from-data-stream","link":"https://leetcode.com/problems/find-median-from-data-stream/description/","percent":32.46689328689704,"level":"Hard","category":"algorithms","totalAC":"77.8K","totalSubmit":"239.8K","desc":"Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.\r\nFor example,\r\n\r\n[2,3,4], the median is 3\r\n\r\n[2,3], the median is (2 + 3) / 2 = 2.5\r\n\r\nDesign a data structure that supports the following two operations:\r\n\r\n\r\n\tvoid addNum(int num) - Add a integer number from the data stream to the data structure.\r\n\tdouble findMedian() - Return the median of all elements so far.\r\n\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\naddNum(1)\r\naddNum(2)\r\nfindMedian() -> 1.5\r\naddNum(3) \r\nfindMedian() -> 2\r\n\r\n\r\n \r\n\r\nFollow up:\r\n\r\n\r\n\tIf all integer numbers from the stream are between 0 and 100, how would you optimize it?\r\n\tIf 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MedianFinder {\r\npublic:\r\n    /** initialize your data structure here. */\r\n    MedianFinder() {\r\n        \r\n    }\r\n    \r\n    void addNum(int num) {\r\n        \r\n    }\r\n    \r\n    double findMedian() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * MedianFinder obj = new MedianFinder();\r\n * obj.addNum(num);\r\n * double param_2 = obj.findMedian();\r\n */"},{"value":"java","text":"Java","defaultCode":"class MedianFinder {\r\n\r\n    /** initialize your data structure here. */\r\n    public MedianFinder() {\r\n        \r\n    }\r\n    \r\n    public void addNum(int num) {\r\n        \r\n    }\r\n    \r\n    public double findMedian() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * MedianFinder obj = new MedianFinder();\r\n * obj.addNum(num);\r\n * double param_2 = obj.findMedian();\r\n */"},{"value":"python","text":"Python","defaultCode":"class MedianFinder(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def addNum(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def findMedian(self):\r\n        \"\"\"\r\n        :rtype: float\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MedianFinder object will be instantiated and called as such:\r\n# obj = MedianFinder()\r\n# obj.addNum(num)\r\n# param_2 = obj.findMedian()"},{"value":"python3","text":"Python3","defaultCode":"class MedianFinder:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def addNum(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def findMedian(self):\r\n        \"\"\"\r\n        :rtype: float\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MedianFinder object will be instantiated and called as such:\r\n# obj = MedianFinder()\r\n# obj.addNum(num)\r\n# param_2 = obj.findMedian()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MedianFinder;\r\n\r\n/** initialize your data structure here. */\r\nMedianFinder* medianFinderCreate() {\r\n    \r\n}\r\n\r\nvoid medianFinderAddNum(MedianFinder* obj, int num) {\r\n    \r\n}\r\n\r\ndouble medianFinderFindMedian(MedianFinder* obj) {\r\n    \r\n}\r\n\r\nvoid medianFinderFree(MedianFinder* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MedianFinder struct will be instantiated and called as such:\r\n * struct MedianFinder* obj = medianFinderCreate();\r\n * medianFinderAddNum(obj, num);\r\n * double param_2 = medianFinderFindMedian(obj);\r\n * medianFinderFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MedianFinder {\r\n\r\n    /** initialize your data structure here. */\r\n    public MedianFinder() {\r\n        \r\n    }\r\n    \r\n    public void AddNum(int num) {\r\n        \r\n    }\r\n    \r\n    public double FindMedian() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * MedianFinder obj = new MedianFinder();\r\n * obj.AddNum(num);\r\n * double param_2 = obj.FindMedian();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * initialize your data structure here.\r\n */\r\nvar MedianFinder = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} num\r\n * @return {void}\r\n */\r\nMedianFinder.prototype.addNum = function(num) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nMedianFinder.prototype.findMedian = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MedianFinder object will be instantiated and called as such:\r\n * var obj = Object.create(MedianFinder).createNew()\r\n * obj.addNum(num)\r\n * var param_2 = obj.findMedian()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MedianFinder\r\n\r\n=begin\r\n    initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type num: Integer\r\n    :rtype: Void\r\n=end\r\n    def add_num(num)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Float\r\n=end\r\n    def find_median()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MedianFinder object will be instantiated and called as such:\r\n# obj = MedianFinder.new()\r\n# obj.add_num(num)\r\n# param_2 = obj.find_median()"},{"value":"swift","text":"Swift","defaultCode":"\nclass MedianFinder {\n\n    /** initialize your data structure here. */\n    init() {\n        \n    }\n    \n    func addNum(_ num: Int) {\n      \n    }\n    \n    func findMedian() -> Double {\n      \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * let obj = MedianFinder()\n * obj.addNum(num)\n * let ret_2: Double = obj.findMedian()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MedianFinder struct {\r\n    \r\n}\r\n\r\n\r\n/** initialize your data structure here. */\r\nfunc Constructor() MedianFinder {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MedianFinder) AddNum(num int)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *MedianFinder) FindMedian() float64 {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.AddNum(num);\r\n * param_2 := obj.FindMedian();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MedianFinder() {\r\n\r\n    /** initialize your data structure here. */\r\n    \r\n\r\n    def addNum(num: Int) {\r\n        \r\n    }\r\n\r\n    def findMedian(): Double = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * var obj = new MedianFinder()\r\n * obj.addNum(num)\r\n * var param_2 = obj.findMedian()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MedianFinder() {\r\n\r\n    /** initialize your data structure here. */\r\n    \r\n\r\n    fun addNum(num: Int) {\r\n        \r\n    }\r\n\r\n    fun findMedian(): Double {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MedianFinder object will be instantiated and called as such:\r\n * var obj = MedianFinder()\r\n * obj.addNum(num)\r\n * var param_2 = obj.findMedian()\r\n */"}],"testcase":"[\"MedianFinder\",\"addNum\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\n[[],[1],[2],[],[3],[]]","testable":true,"templateMeta":{"classname":"MedianFinder","maxbytesperline":410000,"constructor":{"params":[],"comment":"initialize your data structure here."},"methods":[{"name":"addNum","params":[{"type":"integer","name":"num"}],"return":{"type":"void"}},{"name":"findMedian","params":[],"return":{"type":"double"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}