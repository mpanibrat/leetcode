{"id":894,"fid":710,"name":"Random Pick with Blacklist","slug":"random-pick-with-blacklist","link":"https://leetcode.com/problems/random-pick-with-blacklist/description/","percent":29.70789310130516,"level":"Hard","category":"algorithms","totalAC":"2.9K","totalSubmit":"9.7K","desc":"Given a blacklist B containing unique integers from [0, N), write a function to return a uniform random integer from [0, N) which is NOT in B.\r\n\r\nOptimize it such that it minimizes the call to system’s Math.random().\r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 1000000000\r\n\t0 <= B.length < min(100000, N)\r\n\t[0, N) does NOT include N. See interval notation.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pick\",\"pick\",\"pick\"]\r\n[[1,[]],[],[],[]]\r\nOutput: [null,0,0,0]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pick\",\"pick\",\"pick\"]\r\n[[2,[]],[],[],[]]\r\nOutput: [null,1,1,1]\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pick\",\"pick\",\"pick\"]\r\n[[3,[1]],[],[],[]]\r\nOutput: [null,0,0,2]\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pick\",\"pick\",\"pick\"]\r\n[[4,[2]],[],[],[]]\r\nOutput: [null,1,3,1]\r\n\r\n\r\nExplanation of Input Syntax:\r\n\r\nThe input is two lists: the subroutines called and their arguments. Solution's constructor has two arguments, N and the blacklist B. pick has no arguments. Arguments are always wrapped with a list, even if there aren't any.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    Solution(int N, vector<int> blacklist) {\r\n        \r\n    }\r\n    \r\n    int pick() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(N, blacklist);\r\n * int param_1 = obj.pick();\r\n */"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n\r\n    public Solution(int N, int[] blacklist) {\r\n        \r\n    }\r\n    \r\n    public int pick() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(N, blacklist);\r\n * int param_1 = obj.pick();\r\n */"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n\r\n    def __init__(self, N, blacklist):\r\n        \"\"\"\r\n        :type N: int\r\n        :type blacklist: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def pick(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(N, blacklist)\r\n# param_1 = obj.pick()"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n\r\n    def __init__(self, N, blacklist):\r\n        \"\"\"\r\n        :type N: int\r\n        :type blacklist: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def pick(self):\r\n        \"\"\"\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(N, blacklist)\r\n# param_1 = obj.pick()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Solution;\r\n\r\nSolution* solutionCreate(int N, int* blacklist, int blacklistSize) {\r\n    \r\n}\r\n\r\nint solutionPick(Solution* obj) {\r\n    \r\n}\r\n\r\nvoid solutionFree(Solution* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Solution struct will be instantiated and called as such:\r\n * struct Solution* obj = solutionCreate(N, blacklist, blacklistSize);\r\n * int param_1 = solutionPick(obj);\r\n * solutionFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n\r\n    public Solution(int N, int[] blacklist) {\r\n        \r\n    }\r\n    \r\n    public int Pick() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(N, blacklist);\r\n * int param_1 = obj.Pick();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} N\r\n * @param {number[]} blacklist\r\n */\r\nvar Solution = function(N, blacklist) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nSolution.prototype.pick = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(N, blacklist)\r\n * var param_1 = obj.pick()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Solution\r\n\r\n=begin\r\n    :type n: Integer\r\n    :type blacklist: Integer[]\r\n=end\r\n    def initialize(n, blacklist)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer\r\n=end\r\n    def pick()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(n, blacklist)\r\n# param_1 = obj.pick()"},{"value":"swift","text":"Swift","defaultCode":"\nclass Solution {\n\n    init(_ N: Int, _ blacklist: [Int]) {\n        \n    }\n    \n    func pick() -> Int {\n      \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(N, blacklist)\n * let ret_1: Int = obj.pick()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Solution struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(N int, blacklist []int) Solution {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Solution) Pick() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(N, blacklist);\r\n * param_1 := obj.Pick();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Solution(_N: Int, _blacklist: Array[Int]) {\r\n\r\n    def pick(): Int = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = new Solution(N, blacklist)\r\n * var param_1 = obj.pick()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution(N: Int, blacklist: IntArray) {\r\n\r\n    fun pick(): Int {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Solution(N, blacklist)\r\n * var param_1 = obj.pick()\r\n */"}],"testcase":"[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[1, []], [], [], []]","testable":true,"templateMeta":{"classname":"Solution","maxbytesperline":200000,"constructor":{"params":[{"name":"N","type":"integer"},{"name":"blacklist","type":"integer[]"},{"type":"integer","name":"blacklistSize","lang":"c","value":"size_2"}]},"methods":[{"name":"pick","params":[],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}