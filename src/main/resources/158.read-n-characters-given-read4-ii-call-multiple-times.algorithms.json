{"id":158,"fid":158,"name":"Read N Characters Given Read4 II - Call multiple times","slug":"read-n-characters-given-read4-ii-call-multiple-times","link":"https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times/description/","percent":24.30359828763161,"level":"Hard","category":"algorithms","totalAC":"52.5K","totalSubmit":"216.1K","desc":"The API: int read4(char *buf) reads 4 characters at a time from a file.\r\n\r\nThe return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.\r\n\r\nBy using the read4 API, implement the function int read(char *buf, int n) that reads n characters from the file.\r\n\r\nNote:\r\nThe read function may be called multiple times.\r\n\r\nExample 1: \r\n\r\n\r\nGiven buf = \"abc\"\r\nread(\"abc\", 1) // returns \"a\"\r\nread(\"abc\", 2); // returns \"bc\"\r\nread(\"abc\", 1); // returns \"\"\r\n\r\n\r\nExample 2: \r\n\r\n\r\nGiven buf = \"abc\"\r\nread(\"abc\", 4) // returns \"abc\"\r\nread(\"abc\", 1); // returns \"\"\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"// Forward declaration of the read4 API.\r\nint read4(char *buf);\r\n\r\nclass Solution {\r\npublic:\r\n    /**\r\n     * @param buf Destination buffer\r\n     * @param n   Maximum number of characters to read\r\n     * @return    The number of characters read\r\n     */\r\n    int read(char *buf, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/* The read4 API is defined in the parent class Reader4.\r\n      int read4(char[] buf); */\r\n\r\npublic class Solution extends Reader4 {\r\n    /**\r\n     * @param buf Destination buffer\r\n     * @param n   Maximum number of characters to read\r\n     * @return    The number of characters read\r\n     */\r\n    public int read(char[] buf, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# The read4 API is already defined for you.\r\n# @param buf, a list of characters\r\n# @return an integer\r\n# def read4(buf):\r\n\r\nclass Solution(object):\r\n    def read(self, buf, n):\r\n        \"\"\"\r\n        :type buf: Destination buffer (List[str])\r\n        :type n: Maximum number of characters to read (int)\r\n        :rtype: The number of characters read (int)\r\n        \"\"\"\r\n        "},{"value":"csharp","text":"C#","defaultCode":"/* The Read4 API is defined in the parent class Reader4.\r\n      int Read4(char[] buf); */\r\n\r\npublic class Solution : Reader4 {\r\n    /**\r\n     * @param buf Destination buffer\r\n     * @param n   Maximum number of characters to read\r\n     * @return    The number of characters read\r\n     */\r\n    public int Read(char[] buf, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for read4()\r\n * \r\n * @param {character[]} buf Destination buffer\r\n * @return {number} The number of characters read\r\n * read4 = function(buf) {\r\n *     ...\r\n * };\r\n */\r\n\r\n/**\r\n * @param {function} read4()\r\n * @return {function}\r\n */\r\nvar solution = function(read4) {\r\n    /**\r\n     * @param {character[]} buf Destination buffer\r\n     * @param {number} n Maximum number of characters to read\r\n     * @return {number} The number of characters read\r\n     */\r\n    return function(buf, n) {\r\n        \r\n    };\r\n};"}],"testcase":"\"\"\n[read(0)]","testable":false,"templateMeta":{"name":"read","generatedefinition":false,"params":[{"name":"s","type":"string"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<string>","dealloc":true},"generatedriver":false}}