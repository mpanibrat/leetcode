{"id":905,"fid":873,"name":"Length of Longest Fibonacci Subsequence","slug":"length-of-longest-fibonacci-subsequence","link":"https://leetcode.com/problems/length-of-longest-fibonacci-subsequence/description/","percent":42.32168448903098,"level":"Medium","category":"algorithms","totalAC":"7.7K","totalSubmit":"18.1K","desc":"A sequence X_1, X_2, ..., X_n is fibonacci-like if:\r\n\r\n\r\n\tn >= 3\r\n\tX_i + X_{i+1} = X_{i+2} for all i + 2 <= n\r\n\r\n\r\nGiven a strictly increasing array A of positive integers forming a sequence, find the length of the longest fibonacci-like subsequence of A.  If one does not exist, return 0.\r\n\r\n(Recall that a subsequence is derived from another sequence A by deleting any number of elements (including none) from A, without changing the order of the remaining elements.  For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].)\r\n\r\n \r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,2,3,4,5,6,7,8]\r\nOutput: 5\r\nExplanation:\r\nThe longest subsequence that is fibonacci-like: [1,2,3,5,8].\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,3,7,11,12,14,18]\r\nOutput: 3\r\nExplanation:\r\nThe longest subsequence that is fibonacci-like:\r\n[1,11,12], [3,11,14] or [7,11,18].\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t3 <= A.length <= 1000\r\n\t1 <= A[0] < A[1] < ... < A[A.length - 1] <= 10^9\r\n\t(The time limit has been reduced by 50% for submissions in Java, C, and C++.)\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int lenLongestFibSubseq(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int lenLongestFibSubseq(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def lenLongestFibSubseq(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def lenLongestFibSubseq(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int lenLongestFibSubseq(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int LenLongestFibSubseq(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar lenLongestFibSubseq = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer}\ndef len_longest_fib_subseq(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func lenLongestFibSubseq(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func lenLongestFibSubseq(A []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def lenLongestFibSubseq(A: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun lenLongestFibSubseq(A: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,2,3,4,5,6,7,8]","testable":true,"templateMeta":{"name":"lenLongestFibSubseq","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}