{"id":780,"fid":769,"name":"Max Chunks To Make Sorted","slug":"max-chunks-to-make-sorted","link":"https://leetcode.com/problems/max-chunks-to-make-sorted/description/","percent":49.36015789138601,"level":"Medium","category":"algorithms","totalAC":"15.5K","totalSubmit":"31.4K","desc":"Given an array arr that is a permutation of [0, 1, ..., arr.length - 1], we split the array into some number of \"chunks\" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.\r\n\r\nWhat is the most number of chunks we could have made?\r\n\r\nExample 1:\r\n\r\n\r\nInput: arr = [4,3,2,1,0]\r\nOutput: 1\r\nExplanation:\r\nSplitting into two or more chunks will not return the required result.\r\nFor example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: arr = [1,0,2,3,4]\r\nOutput: 4\r\nExplanation:\r\nWe can split into two chunks, such as [1, 0], [2, 3, 4].\r\nHowever, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tarr will have length in range [1, 10].\r\n\tarr[i] will be a permutation of [0, 1, ..., arr.length - 1].\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxChunksToSorted(vector<int>& arr) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxChunksToSorted(int[] arr) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int maxChunksToSorted(int* arr, int arrSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxChunksToSorted(int[] arr) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} arr\n * @return {number}\n */\nvar maxChunksToSorted = function(arr) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} arr\n# @return {Integer}\ndef max_chunks_to_sorted(arr)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxChunksToSorted(_ arr: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxChunksToSorted(arr []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxChunksToSorted(arr: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxChunksToSorted(arr: IntArray): Int {\n        \n    }\n}"}],"testcase":"[4,3,2,1,0]","testable":true,"templateMeta":{"name":"maxChunksToSorted","params":[{"name":"arr","type":"integer[]"}],"return":{"type":"integer"}}}