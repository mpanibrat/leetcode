{"id":928,"fid":892,"name":"Surface Area of 3D Shapes","slug":"surface-area-of-3d-shapes","link":"https://leetcode.com/problems/surface-area-of-3d-shapes/description/","percent":54.653871238237215,"level":"Easy","category":"algorithms","totalAC":"5.9K","totalSubmit":"10.7K","desc":"On a N * N grid, we place some 1 * 1 * 1 cubes.\r\n\r\nEach value v = grid[i][j] represents a tower of v cubes placed on top of grid cell (i, j).\r\n\r\nReturn the total surface area of the resulting shapes.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[2]]\r\nOutput: 10\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1,2],[3,4]]\r\nOutput: 34\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [[1,0],[0,2]]\r\nOutput: 16\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: [[1,1,1],[1,0,1],[1,1,1]]\r\nOutput: 32\r\n\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: [[2,2,2],[2,1,2],[2,2,2]]\r\nOutput: 46\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 50\r\n\t0 <= grid[i][j] <= 50\r\n\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int surfaceArea(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int surfaceArea(int[][] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def surfaceArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def surfaceArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int surfaceArea(int** grid, int gridRowSize, int *gridColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SurfaceArea(int[][] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar surfaceArea = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef surface_area(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func surfaceArea(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func surfaceArea(grid [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def surfaceArea(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun surfaceArea(grid: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[2]]","testable":true,"templateMeta":{"name":"surfaceArea","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}