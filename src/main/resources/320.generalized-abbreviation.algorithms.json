{"id":320,"fid":320,"name":"Generalized Abbreviation","slug":"generalized-abbreviation","link":"https://leetcode.com/problems/generalized-abbreviation/description/","percent":47.288687526546795,"level":"Medium","category":"algorithms","totalAC":"33.4K","totalSubmit":"70.6K","desc":"Write a function to generate the generalized abbreviations of a word. \r\n\r\nNote: The order of the output does not matter.\r\n\r\nExample:\r\n\r\n\r\nInput: \"word\"\r\nOutput:\r\n[\"word\", \"1ord\", \"w1rd\", \"wo1d\", \"wor1\", \"2rd\", \"w2d\", \"wo2\", \"1o1d\", \"1or1\", \"w1r1\", \"1o2\", \"2r1\", \"3d\", \"w3\", \"4\"]\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> generateAbbreviations(string word) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> generateAbbreviations(String word) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def generateAbbreviations(self, word):\r\n        \"\"\"\r\n        :type word: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def generateAbbreviations(self, word):\r\n        \"\"\"\r\n        :type word: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** generateAbbreviations(char* word, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> GenerateAbbreviations(string word) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} word\r\n * @return {string[]}\r\n */\r\nvar generateAbbreviations = function(word) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} word\r\n# @return {String[]}\r\ndef generate_abbreviations(word)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generateAbbreviations(_ word: String) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func generateAbbreviations(word string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def generateAbbreviations(word: String): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun generateAbbreviations(word: String): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"\"word\"","testable":true,"templateMeta":{"name":"generateAbbreviations","params":[{"name":"word","type":"string"}],"return":{"type":"list<string>"}}}