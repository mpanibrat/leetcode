{"id":600,"fid":600,"name":"Non-negative Integers without Consecutive Ones","slug":"non-negative-integers-without-consecutive-ones","link":"https://leetcode.com/problems/non-negative-integers-without-consecutive-ones/description/","percent":31.937009279086368,"level":"Hard","category":"algorithms","totalAC":"7.2K","totalSubmit":"22.4K","desc":"Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.\r\n\r\nExample 1:\r\n\r\nInput: 5\r\nOutput: 5\r\nExplanation: \r\nHere are the non-negative integers \r\n\r\n\r\nNote:\r\n1 9\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findIntegers(int num) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findIntegers(int num) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findIntegers(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findIntegers(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findIntegers(int num) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindIntegers(int num) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} num\r\n * @return {number}\r\n */\r\nvar findIntegers = function(num) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\r\n# @return {Integer}\r\ndef find_integers(num)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findIntegers(_ num: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findIntegers(num int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findIntegers(num: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findIntegers(num: Int): Int {\n        \n    }\n}"}],"testcase":"1","testable":true,"templateMeta":{"name":"findIntegers","params":[{"name":"num","type":"integer"}],"return":{"type":"integer"}}}