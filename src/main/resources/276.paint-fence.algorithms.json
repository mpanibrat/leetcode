{"id":276,"fid":276,"name":"Paint Fence","slug":"paint-fence","link":"https://leetcode.com/problems/paint-fence/description/","percent":35.56683458959888,"level":"Easy","category":"algorithms","totalAC":"37.6K","totalSubmit":"105.6K","desc":"There is a fence with n posts, each post can be painted with one of the k colors.\r\n\r\nYou have to paint all the posts such that no more than two adjacent fence posts have the same color.\r\n\r\nReturn the total number of ways you can paint the fence.\r\n\r\nNote:\r\nn and k are non-negative integers.\r\n\r\nExample:\r\n\r\n\r\nInput: n = 3, k = 2\r\nOutput: 6\r\nExplanation: Take c1 as color 1, c2 as color 2. All possible ways are:\r\n\r\n            post1  post2  post3      \r\n -----      -----  -----  -----       \r\n   1         c1     c1     c2 \r\n   2         c1     c2     c1 \r\n   3         c1     c2     c2 \r\n   4         c2     c1     c1  \r\n   5         c2     c1     c2\r\n   6         c2     c2     c1\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int numWays(int n, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int numWays(int n, int k) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def numWays(self, n, k):\r\n        \"\"\"\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def numWays(self, n, k):\r\n        \"\"\"\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int numWays(int n, int k) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int NumWays(int n, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar numWays = function(n, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef num_ways(n, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numWays(_ n: Int, _ k: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numWays(n int, k int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def numWays(n: Int, k: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun numWays(n: Int, k: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"3\n2","testable":true,"templateMeta":{"name":"numWays","params":[{"name":"n","type":"integer"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}