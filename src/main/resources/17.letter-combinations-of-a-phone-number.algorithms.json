{"id":17,"fid":17,"name":"Letter Combinations of a Phone Number","slug":"letter-combinations-of-a-phone-number","link":"https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/","percent":38.688164058037245,"level":"Medium","category":"algorithms","totalAC":"298K","totalSubmit":"770.2K","desc":"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.\r\n\r\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\r\n\r\n\r\n\r\nExample:\r\n\r\n\r\nInput: \"23\"\r\nOutput: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\r\n\r\n\r\nNote:\r\n\r\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> letterCombinations(string digits) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> letterCombinations(String digits) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def letterCombinations(self, digits):\r\n        \"\"\"\r\n        :type digits: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def letterCombinations(self, digits):\r\n        \"\"\"\r\n        :type digits: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** letterCombinations(char* digits, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> LetterCombinations(string digits) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} digits\r\n * @return {string[]}\r\n */\r\nvar letterCombinations = function(digits) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} digits\r\n# @return {String[]}\r\ndef letter_combinations(digits)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func letterCombinations(digits string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def letterCombinations(digits: String): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun letterCombinations(digits: String): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"\"23\"","testable":true,"templateMeta":{"name":"letterCombinations","params":[{"name":"digits","type":"string"}],"return":{"type":"list<string>"}}}