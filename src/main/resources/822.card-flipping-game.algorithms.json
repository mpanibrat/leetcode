{"id":842,"fid":822,"name":"Card Flipping Game","slug":"card-flipping-game","link":"https://leetcode.com/problems/card-flipping-game/description/","percent":38.451196558214576,"level":"Medium","category":"algorithms","totalAC":"4.3K","totalSubmit":"11.2K","desc":"On a table are N cards, with a positive integer printed on the front and back of each card (possibly different).\r\n\r\nWe flip any number of cards, and after we choose one card. \r\n\r\nIf the number X on the back of the chosen card is not on the front of any card, then this number X is good.\r\n\r\nWhat is the smallest number that is good?  If no number is good, output 0.\r\n\r\nHere, fronts[i] and backs[i] represent the number on the front and back of card i. \r\n\r\nA flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.\r\n\r\nExample:\r\n\r\n\r\nInput: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\r\nOutput: 2\r\nExplanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].\r\nWe choose the second card, which has number 2 on the back, and it isn't on the front of any card, so 2 is good.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= fronts.length == backs.length <= 1000.\r\n\t1 <= fronts[i] <= 2000.\r\n\t1 <= backs[i] <= 2000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int flipgame(vector<int>& fronts, vector<int>& backs) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int flipgame(int[] fronts, int[] backs) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def flipgame(self, fronts, backs):\n        \"\"\"\n        :type fronts: List[int]\n        :type backs: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def flipgame(self, fronts, backs):\n        \"\"\"\n        :type fronts: List[int]\n        :type backs: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int flipgame(int* fronts, int frontsSize, int* backs, int backsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Flipgame(int[] fronts, int[] backs) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} fronts\n * @param {number[]} backs\n * @return {number}\n */\nvar flipgame = function(fronts, backs) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} fronts\n# @param {Integer[]} backs\n# @return {Integer}\ndef flipgame(fronts, backs)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func flipgame(_ fronts: [Int], _ backs: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func flipgame(fronts []int, backs []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def flipgame(fronts: Array[Int], backs: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun flipgame(fronts: IntArray, backs: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,2,4,4,7]\n[1,3,4,1,3]","testable":true,"templateMeta":{"name":"flipgame","params":[{"name":"fronts","type":"integer[]"},{"name":"backs","type":"integer[]"}],"return":{"type":"integer"}}}