{"id":658,"fid":658,"name":"Find K Closest Elements","slug":"find-k-closest-elements","link":"https://leetcode.com/problems/find-k-closest-elements/description/","percent":35.32238729288864,"level":"Medium","category":"algorithms","totalAC":"33K","totalSubmit":"93.4K","desc":"\r\nGiven a sorted array, two integers k and x, find the k closest elements to x in the array.  The result should also be sorted in ascending order.\r\nIf there is a tie,  the smaller elements are always preferred.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,2,3,4,5], k=4, x=3\r\nOutput: [1,2,3,4]\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1,2,3,4,5], k=4, x=-1\r\nOutput: [1,2,3,4]\r\n\r\n\r\n\r\nNote:\r\n\r\nThe value k is positive and will always be smaller than the length of the sorted array.\r\n Length of the given array is positive and will not exceed 104\r\n Absolute value of elements in the array and x will not exceed 104\r\n\r\n\r\n\r\n\r\n\r\n\r\nUPDATE (2017/9/19):\r\nThe arr parameter had been changed to an array of integers (instead of a list of integers). Please reload the code definition to get the latest changes.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findClosestElements(vector<int>& arr, int k, int x) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> findClosestElements(int[] arr, int k, int x) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findClosestElements(self, arr, k, x):\r\n        \"\"\"\r\n        :type arr: List[int]\r\n        :type k: int\r\n        :type x: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findClosestElements(self, arr, k, x):\r\n        \"\"\"\r\n        :type arr: List[int]\r\n        :type k: int\r\n        :type x: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findClosestElements(int* arr, int arrSize, int k, int x, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> FindClosestElements(int[] arr, int k, int x) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} arr\r\n * @param {number} k\r\n * @param {number} x\r\n * @return {number[]}\r\n */\r\nvar findClosestElements = function(arr, k, x) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} arr\r\n# @param {Integer} k\r\n# @param {Integer} x\r\n# @return {Integer[]}\r\ndef find_closest_elements(arr, k, x)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findClosestElements(_ arr: [Int], _ k: Int, _ x: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findClosestElements(arr []int, k int, x int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findClosestElements(arr: Array[Int], k: Int, x: Int): List[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findClosestElements(arr: IntArray, k: Int, x: Int): List<Int> {\n        \n    }\n}"}],"testcase":"[1,2,3,4,5]\n4\n3","testable":true,"templateMeta":{"name":"findClosestElements","params":[{"name":"arr","type":"integer[]"},{"name":"k","type":"integer"},{"name":"x","type":"integer"}],"return":{"type":"list<integer>"}}}