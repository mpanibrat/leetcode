{"id":798,"fid":782,"name":"Transform to Chessboard","slug":"transform-to-chessboard","link":"https://leetcode.com/problems/transform-to-chessboard/description/","percent":37.97979797979798,"level":"Hard","category":"algorithms","totalAC":"2.3K","totalSubmit":"5.9K","desc":"An N x N board contains only 0s and 1s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.\r\n\r\nWhat is the minimum number of moves to transform the board into a \"chessboard\" - a board where no 0s and no 1s are 4-directionally adjacent? If the task is impossible, return -1.\r\n\r\n\r\nExamples:\r\nInput: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\r\nOutput: 2\r\nExplanation:\r\nOne potential sequence of moves is shown below, from left to right:\r\n\r\n0110     1010     1010\r\n0110 --> 1010 --> 0101\r\n1001     0101     1010\r\n1001     0101     0101\r\n\r\nThe first move swaps the first and second column.\r\nThe second move swaps the second and third row.\r\n\r\n\r\nInput: board = [[0, 1], [1, 0]]\r\nOutput: 0\r\nExplanation:\r\nAlso note that the board with 0 in the top left corner,\r\n01\r\n10\r\n\r\nis also a valid chessboard.\r\n\r\nInput: board = [[1, 0], [1, 0]]\r\nOutput: -1\r\nExplanation:\r\nNo matter what sequence of moves you make, you cannot end with a valid chessboard.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tboard will have the same number of rows and columns, a number in the range [2, 30].\r\n\tboard[i][j] will be only 0s or 1s.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int movesToChessboard(vector<vector<int>>& board) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int movesToChessboard(int[][] board) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def movesToChessboard(self, board):\r\n        \"\"\"\r\n        :type board: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def movesToChessboard(self, board):\r\n        \"\"\"\r\n        :type board: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int movesToChessboard(int** board, int boardRowSize, int *boardColSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MovesToChessboard(int[,] board) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} board\r\n * @return {number}\r\n */\r\nvar movesToChessboard = function(board) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} board\r\n# @return {Integer}\r\ndef moves_to_chessboard(board)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func movesToChessboard(_ board: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func movesToChessboard(board [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def movesToChessboard(board: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun movesToChessboard(board: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]","testable":true,"templateMeta":{"name":"movesToChessboard","params":[{"name":"board","type":"integer[][]"}],"return":{"type":"integer"}}}