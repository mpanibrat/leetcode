{"id":593,"fid":593,"name":"Valid Square","slug":"valid-square","link":"https://leetcode.com/problems/valid-square/description/","percent":39.920223374551256,"level":"Medium","category":"algorithms","totalAC":"15K","totalSubmit":"37.6K","desc":"Given the coordinates of four points in 2D space, return whether the four points could construct a square.\r\n\r\nThe coordinate (x,y) of a point is represented by an integer array with two integers.\r\n\r\nExample:\r\n\r\nInput: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\r\nOutput: True\r\n\r\n\r\n\r\n Note: \r\n\r\nAll the input integers are in the range [-10000, 10000].\r\nA valid square has four equal sides with positive length and four equal angles (90-degree angles).\r\nInput points have no order.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def validSquare(self, p1, p2, p3, p4):\r\n        \"\"\"\r\n        :type p1: List[int]\r\n        :type p2: List[int]\r\n        :type p3: List[int]\r\n        :type p4: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def validSquare(self, p1, p2, p3, p4):\r\n        \"\"\"\r\n        :type p1: List[int]\r\n        :type p2: List[int]\r\n        :type p3: List[int]\r\n        :type p4: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool validSquare(int* p1, int p1Size, int* p2, int p2Size, int* p3, int p3Size, int* p4, int p4Size) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool ValidSquare(int[] p1, int[] p2, int[] p3, int[] p4) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} p1\r\n * @param {number[]} p2\r\n * @param {number[]} p3\r\n * @param {number[]} p4\r\n * @return {boolean}\r\n */\r\nvar validSquare = function(p1, p2, p3, p4) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} p1\r\n# @param {Integer[]} p2\r\n# @param {Integer[]} p3\r\n# @param {Integer[]} p4\r\n# @return {Boolean}\r\ndef valid_square(p1, p2, p3, p4)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func validSquare(_ p1: [Int], _ p2: [Int], _ p3: [Int], _ p4: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func validSquare(p1 []int, p2 []int, p3 []int, p4 []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def validSquare(p1: Array[Int], p2: Array[Int], p3: Array[Int], p4: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun validSquare(p1: IntArray, p2: IntArray, p3: IntArray, p4: IntArray): Boolean {\n        \n    }\n}"}],"testcase":"[0,0]\n[1,1]\n[1,0]\n[0,1]","testable":true,"templateMeta":{"name":"validSquare","params":[{"name":"p1","type":"integer[]"},{"name":"p2","type":"integer[]"},{"name":"p3","type":"integer[]"},{"name":"p4","type":"integer[]"}],"return":{"type":"boolean"}}}