{"id":824,"fid":806,"name":"Number of Lines To Write String","slug":"number-of-lines-to-write-string","link":"https://leetcode.com/problems/number-of-lines-to-write-string/description/","percent":61.831540440834544,"level":"Easy","category":"algorithms","totalAC":"19.9K","totalSubmit":"32.3K","desc":"We are to write the letters of a given string S, from left to right into lines. Each line has maximum width 100 units, and if writing a letter would cause the width of the line to exceed 100 units, it is written on the next line. We are given an array widths, an array where widths[0] is the width of 'a', widths[1] is the width of 'b', ..., and widths[25] is the width of 'z'.\r\n\r\nNow answer two questions: how many lines have at least one character from S, and what is the width used by the last such line? Return your answer as an integer list of length 2.\r\n\r\n \r\n\r\n\r\nExample :\r\nInput: \r\nwidths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = \"abcdefghijklmnopqrstuvwxyz\"\r\nOutput: [3, 60]\r\nExplanation: \r\nAll letters have the same length of 10. To write all 26 letters,\r\nwe need two full lines and one line with 60 units.\r\n\r\n\r\n\r\nExample :\r\nInput: \r\nwidths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\r\nS = \"bbbcccdddaaa\"\r\nOutput: [2, 4]\r\nExplanation: \r\nAll letters except 'a' have the same length of 10, and \r\n\"bbbcccdddaa\" will cover 9 * 10 + 2 * 4 = 98 units.\r\nFor the last 'a', it is written on the second line because\r\nthere is only 2 units left in the first line.\r\nSo the answer is 2 lines, plus 4 units in the second line.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe length of S will be in the range [1, 1000].\r\n\tS will only contain lowercase letters.\r\n\twidths is an array of length 26.\r\n\twidths[i] will be in the range of [2, 10].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> numberOfLines(vector<int>& widths, string S) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] numberOfLines(int[] widths, String S) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numberOfLines(self, widths, S):\n        \"\"\"\n        :type widths: List[int]\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numberOfLines(self, widths, S):\n        \"\"\"\n        :type widths: List[int]\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* numberOfLines(int* widths, int widthsSize, char* S, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] NumberOfLines(int[] widths, string S) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} widths\n * @param {string} S\n * @return {number[]}\n */\nvar numberOfLines = function(widths, S) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} widths\n# @param {String} s\n# @return {Integer[]}\ndef number_of_lines(widths, s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numberOfLines(widths []int, S string) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numberOfLines(widths: Array[Int], S: String): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numberOfLines(widths: IntArray, S: String): IntArray {\n        \n    }\n}"}],"testcase":"[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n\"abcdefghijklmnopqrstuvwxyz\"","testable":true,"templateMeta":{"name":"numberOfLines","params":[{"name":"widths","type":"integer[]"},{"name":"S","type":"string"}],"return":{"type":"integer[]"}}}