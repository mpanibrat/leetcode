{"id":826,"fid":808,"name":"Soup Servings","slug":"soup-servings","link":"https://leetcode.com/problems/soup-servings/description/","percent":34.42187366075255,"level":"Medium","category":"algorithms","totalAC":"4K","totalSubmit":"11.7K","desc":"There are two types of soup: type A and type B. Initially we have N ml of each type of soup. There are four kinds of operations:\r\n\r\n\r\n\tServe 100 ml of soup A and 0 ml of soup B\r\n\tServe 75 ml of soup A and 25 ml of soup B\r\n\tServe 50 ml of soup A and 50 ml of soup B\r\n\tServe 25 ml of soup A and 75 ml of soup B\r\n\r\n\r\nWhen we serve some soup, we give it to someone and we no longer have it.  Each turn, we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as we can.  We stop once we no longer have some quantity of both types of soup.\r\n\r\nNote that we do not have the operation where all 100 ml's of soup B are used first.  \r\n\r\nReturn the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time.\r\n\r\n \r\n\r\n\r\nExample:\r\nInput: N = 50\r\nOutput: 0.625\r\nExplanation: \r\nIf we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\r\n\r\n\r\n\r\nNotes: \r\n\r\n\r\n\t0 <= N <= 10^9. \r\n\tAnswers within 10^-6 of the true value will be accepted as correct.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    double soupServings(int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double soupServings(int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def soupServings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: float\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def soupServings(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: float\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"double soupServings(int N) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public double SoupServings(int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @return {number}\n */\nvar soupServings = function(N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Float}\ndef soup_servings(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func soupServings(_ N: Int) -> Double {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func soupServings(N int) float64 {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def soupServings(N: Int): Double = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun soupServings(N: Int): Double {\n        \n    }\n}"}],"testcase":"50","testable":true,"templateMeta":{"name":"soupServings","params":[{"name":"N","type":"integer"}],"return":{"type":"double"}}}