{"id":939,"fid":903,"name":"Valid Permutations for DI Sequence","slug":"valid-permutations-for-di-sequence","link":"https://leetcode.com/problems/valid-permutations-for-di-sequence/description/","percent":39.435483870967744,"level":"Hard","category":"algorithms","totalAC":"1.5K","totalSubmit":"3.7K","desc":"We are given S, a length n string of characters from the set {'D', 'I'}. (These letters stand for \"decreasing\" and \"increasing\".)\r\n\r\nA valid permutation is a permutation P[0], P[1], ..., P[n] of integers {0, 1, ..., n}, such that for all i:\r\n\r\n\r\n\tIf S[i] == 'D', then P[i] > P[i+1], and;\r\n\tIf S[i] == 'I', then P[i] < P[i+1].\r\n\r\n\r\nHow many valid permutations are there?  Since the answer may be large, return your answer modulo 10^9 + 7.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: \"DID\"\r\nOutput: 5\r\nExplanation: \r\nThe 5 valid permutations of (0, 1, 2, 3) are:\r\n(1, 0, 3, 2)\r\n(2, 0, 3, 1)\r\n(2, 1, 3, 0)\r\n(3, 0, 2, 1)\r\n(3, 1, 2, 0)\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= S.length <= 200\r\n\tS consists only of characters from the set {'D', 'I'}.\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numPermsDISequence(string S) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numPermsDISequence(String S) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numPermsDISequence(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numPermsDISequence(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numPermsDISequence(char* S) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumPermsDISequence(string S) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @return {number}\n */\nvar numPermsDISequence = function(S) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer}\ndef num_perms_di_sequence(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numPermsDISequence(_ S: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numPermsDISequence(S string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numPermsDISequence(S: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numPermsDISequence(S: String): Int {\n        \n    }\n}"}],"testcase":"\"DID\"","testable":true,"templateMeta":{"name":"numPermsDISequence","params":[{"name":"S","type":"string"}],"return":{"type":"integer"}}}