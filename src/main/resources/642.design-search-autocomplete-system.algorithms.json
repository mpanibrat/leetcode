{"id":642,"fid":642,"name":"Design Search Autocomplete System","slug":"design-search-autocomplete-system","link":"https://leetcode.com/problems/design-search-autocomplete-system/description/","percent":32.89484479693696,"level":"Hard","category":"algorithms","totalAC":"12K","totalSubmit":"36.6K","desc":"Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#'). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:\r\n\r\nThe hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before. \r\nThe returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first). \r\nIf less than 3 hot sentences exist, then just return as many as you can.\r\nWhen the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.\r\n\r\n\r\nYour job is to implement the following functions:\r\n\r\nThe constructor function:\r\n\r\nAutocompleteSystem(String[] sentences, int[] times): This is the constructor. The input is historical data. Sentences is a string array consists of previously typed sentences. Times is the corresponding times a sentence has been typed. Your system should record these historical data.\r\n\r\nNow, the user wants to input a new sentence. The following function will provide the next character the user types: \r\n\r\nList<String> input(char c): The input c is the next character typed by the user. The character will only be lower-case letters ('a' to 'z'), blank space (' ') or a special character ('#'). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.\r\n\r\n\r\nExample:\r\n\r\nOperation: AutocompleteSystem([\"i love you\", \"island\",\"ironman\", \"i love leetcode\"], [5,3,2,2])\r\n\r\nThe system have already tracked down the following sentences and their corresponding times:\r\n\r\n\"i love you\" : 5 times\r\n\r\n\"island\" : 3 times\r\n\r\n\"ironman\" : 2 times\r\n\r\n\"i love leetcode\" : 2 times\r\n\r\nNow, the user begins another search:\r\n\r\nOperation: input('i')\r\n\r\nOutput: [\"i love you\", \"island\",\"i love leetcode\"]\r\n\r\nExplanation: \r\n\r\nThere are four sentences that have prefix \"i\". Among them, \"ironman\" and \"i love leetcode\" have same hot degree. Since ' ' has ASCII code 32 and 'r' has ASCII code 114, \"i love leetcode\" should be in front of \"ironman\". Also we only need to output top 3 hot sentences, so \"ironman\" will be ignored.\r\n\r\nOperation: input(' ')\r\n\r\nOutput: [\"i love you\",\"i love leetcode\"]\r\n\r\nExplanation: \r\n\r\nThere are only two sentences that have prefix \"i \".\r\n\r\nOperation: input('a')\r\n\r\nOutput: []\r\n\r\nExplanation: \r\n\r\nThere are no sentences that have prefix \"i a\".\r\n\r\nOperation: input('#')\r\n\r\nOutput: []\r\n\r\nExplanation: \r\n\r\nThe user finished the input, the sentence \"i a\" should be saved as a historical sentence in system. And the following input will be counted as a new search.\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\r\nThe input sentence will always start with a letter and end with '#', and only one blank space will exist between two words. \r\nThe number of complete sentences that to be searched won't exceed 100. The length of each sentence including those in the historical data won't exceed 100. \r\nPlease use double-quote instead of single-quote when you write test cases even for a character input.\r\nPlease remember to RESET your class variables declared in class AutocompleteSystem, as static/class variables are persisted across multiple test cases. Please see here for more details.\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class AutocompleteSystem {\r\npublic:\r\n    AutocompleteSystem(vector<string> sentences, vector<int> times) {\r\n        \r\n    }\r\n    \r\n    vector<string> input(char c) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your AutocompleteSystem object will be instantiated and called as such:\r\n * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);\r\n * vector<string> param_1 = obj.input(c);\r\n */"},{"value":"java","text":"Java","defaultCode":"class AutocompleteSystem {\r\n\r\n    public AutocompleteSystem(String[] sentences, int[] times) {\r\n        \r\n    }\r\n    \r\n    public List<String> input(char c) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your AutocompleteSystem object will be instantiated and called as such:\r\n * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);\r\n * List<String> param_1 = obj.input(c);\r\n */"},{"value":"python","text":"Python","defaultCode":"class AutocompleteSystem(object):\r\n\r\n    def __init__(self, sentences, times):\r\n        \"\"\"\r\n        :type sentences: List[str]\r\n        :type times: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def input(self, c):\r\n        \"\"\"\r\n        :type c: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your AutocompleteSystem object will be instantiated and called as such:\r\n# obj = AutocompleteSystem(sentences, times)\r\n# param_1 = obj.input(c)"},{"value":"python3","text":"Python3","defaultCode":"class AutocompleteSystem:\r\n\r\n    def __init__(self, sentences, times):\r\n        \"\"\"\r\n        :type sentences: List[str]\r\n        :type times: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def input(self, c):\r\n        \"\"\"\r\n        :type c: str\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your AutocompleteSystem object will be instantiated and called as such:\r\n# obj = AutocompleteSystem(sentences, times)\r\n# param_1 = obj.input(c)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} AutocompleteSystem;\n\nAutocompleteSystem* autocompleteSystemCreate(char** sentences, int* times) {\n    \n}\n\nchar** autocompleteSystemInput(AutocompleteSystem* obj, char c, int *returnSize) {\n    \n}\n\nvoid autocompleteSystemFree(AutocompleteSystem* obj) {\n    \n}\n\n/**\n * Your AutocompleteSystem struct will be instantiated and called as such:\n * struct AutocompleteSystem* obj = autocompleteSystemCreate(sentences, times);\n * char** param_1 = autocompleteSystemInput(obj, c);\n * autocompleteSystemFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class AutocompleteSystem {\r\n\r\n    public AutocompleteSystem(string[] sentences, int[] times) {\r\n        \r\n    }\r\n    \r\n    public IList<string> Input(char c) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your AutocompleteSystem object will be instantiated and called as such:\r\n * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);\r\n * IList<string> param_1 = obj.Input(c);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} sentences\r\n * @param {number[]} times\r\n */\r\nvar AutocompleteSystem = function(sentences, times) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {character} c\r\n * @return {string[]}\r\n */\r\nAutocompleteSystem.prototype.input = function(c) {\r\n    \r\n};\r\n\r\n/** \r\n * Your AutocompleteSystem object will be instantiated and called as such:\r\n * var obj = Object.create(AutocompleteSystem).createNew(sentences, times)\r\n * var param_1 = obj.input(c)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class AutocompleteSystem\r\n\r\n=begin\r\n    :type sentences: String[]\r\n    :type times: Integer[]\r\n=end\r\n    def initialize(sentences, times)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type c: Character\r\n    :rtype: String[]\r\n=end\r\n    def input(c)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your AutocompleteSystem object will be instantiated and called as such:\r\n# obj = AutocompleteSystem.new(sentences, times)\r\n# param_1 = obj.input(c)"},{"value":"swift","text":"Swift","defaultCode":"\nclass AutocompleteSystem {\n\n    init(_ sentences: [String], _ times: [Int]) {\n        \n    }\n    \n    func input(_ c: Character) -> [String] {\n      \n    }\n}\n\n/**\n * Your AutocompleteSystem object will be instantiated and called as such:\n * let obj = AutocompleteSystem(sentences, times)\n * let ret_1: [String] = obj.input(c)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type AutocompleteSystem struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(sentences []string, times []int) AutocompleteSystem {\r\n    \r\n}\r\n\r\n\r\nfunc (this *AutocompleteSystem) Input(c byte) []string {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your AutocompleteSystem object will be instantiated and called as such:\r\n * obj := Constructor(sentences, times);\r\n * param_1 := obj.Input(c);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class AutocompleteSystem(_sentences: Array[String], _times: Array[Int]) {\n\n    def input(c: Char): List[String] = {\n        \n    }\n\n}\n\n/**\n * Your AutocompleteSystem object will be instantiated and called as such:\n * var obj = new AutocompleteSystem(sentences, times)\n * var param_1 = obj.input(c)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class AutocompleteSystem(sentences: Array<String>, times: IntArray) {\n\n    fun input(c: Char): List<String> {\n        \n    }\n\n}\n\n/**\n * Your AutocompleteSystem object will be instantiated and called as such:\n * var obj = AutocompleteSystem(sentences, times)\n * var param_1 = obj.input(c)\n */"}],"testcase":"[\"AutocompleteSystem\",\"input\",\"input\",\"input\",\"input\"]\n[[[\"i love you\",\"island\",\"iroman\",\"i love leetcode\"],[5,3,2,2]],[\"i\"],[\" \"],[\"a\"],[\"#\"]]","testable":true,"templateMeta":{"classname":"AutocompleteSystem","maxbytesperline":200000,"constructor":{"params":[{"type":"string[]","name":"sentences"},{"type":"integer[]","name":"times"}]},"methods":[{"name":"input","params":[{"type":"character","name":"c"}],"return":{"type":"list<string>"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}