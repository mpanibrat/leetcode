{"id":216,"fid":216,"name":"Combination Sum III","slug":"combination-sum-iii","link":"https://leetcode.com/problems/combination-sum-iii/description/","percent":49.11823114126355,"level":"Medium","category":"algorithms","totalAC":"103.4K","totalSubmit":"210.5K","desc":"\r\nFind all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.\r\n\r\nNote:\r\n\r\n\r\n\tAll numbers will be positive integers.\r\n\tThe solution set must not contain duplicate combinations.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: k = 3, n = 7\r\nOutput: [[1,2,4]]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: k = 3, n = 9\r\nOutput: [[1,2,6], [1,3,5], [2,3,4]]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> combinationSum3(int k, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> combinationSum3(int k, int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def combinationSum3(self, k, n):\r\n        \"\"\"\r\n        :type k: int\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def combinationSum3(self, k, n):\r\n        \"\"\"\r\n        :type k: int\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combinationSum3(int k, int n, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> CombinationSum3(int k, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} k\r\n * @param {number} n\r\n * @return {number[][]}\r\n */\r\nvar combinationSum3 = function(k, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} k\r\n# @param {Integer} n\r\n# @return {Integer[][]}\r\ndef combination_sum3(k, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func combinationSum3(_ k: Int, _ n: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func combinationSum3(k int, n int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def combinationSum3(k: Int, n: Int): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun combinationSum3(k: Int, n: Int): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"3\n7","testable":true,"templateMeta":{"name":"combinationSum3","params":[{"name":"k","type":"integer"},{"name":"n","type":"integer"}],"return":{"type":"list<list<integer>>","dealloc":true}}}