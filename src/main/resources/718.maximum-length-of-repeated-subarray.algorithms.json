{"id":718,"fid":718,"name":"Maximum Length of Repeated Subarray","slug":"maximum-length-of-repeated-subarray","link":"https://leetcode.com/problems/maximum-length-of-repeated-subarray/description/","percent":42.99445471349353,"level":"Medium","category":"algorithms","totalAC":"22.1K","totalSubmit":"51.4K","desc":"Given two integer arrays A and B, return the maximum length of an subarray that appears in both arrays.\r\n\r\nExample 1:\r\n\r\nInput:\r\nA: [1,2,3,2,1]\r\nB: [3,2,1,4,7]\r\nOutput: 3\r\nExplanation: \r\nThe repeated subarray with maximum length is [3, 2, 1].\r\n\r\n\r\n\r\nNote:\r\n\r\n1 \r\n0 \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findLength(vector<int>& A, vector<int>& B) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int findLength(int[] A, int[] B) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findLength(self, A, B):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :type B: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findLength(self, A, B):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :type B: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findLength(int* A, int ASize, int* B, int BSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindLength(int[] A, int[] B) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} A\r\n * @param {number[]} B\r\n * @return {number}\r\n */\r\nvar findLength = function(A, B) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\r\n# @param {Integer[]} b\r\n# @return {Integer}\r\ndef find_length(a, b)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findLength(_ A: [Int], _ B: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findLength(A []int, B []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findLength(A: Array[Int], B: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findLength(A: IntArray, B: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,2,3,2,1]\n[3,2,1,4,7]","testable":true,"templateMeta":{"name":"findLength","params":[{"name":"A","type":"integer[]"},{"name":"B","type":"integer[]"}],"return":{"type":"integer"}}}