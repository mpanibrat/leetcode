{"id":666,"fid":666,"name":"Path Sum IV","slug":"path-sum-iv","link":"https://leetcode.com/problems/path-sum-iv/description/","percent":50.880688610823306,"level":"Medium","category":"algorithms","totalAC":"6.4K","totalSubmit":"12.5K","desc":"\r\nIf the depth of a tree is smaller than 5, then this tree can be represented by a list of three-digits integers.\r\n\r\n\r\n\r\nFor each integer in this list:\r\n\r\nThe hundreds digit represents the depth D of this node, 1 \r\nThe tens digit represents the position P of this node in the level it belongs to, 1 . The position is the same as that in a full binary tree. \r\nThe units digit represents the value V of this node, 0 \r\n\r\n\r\n\r\n\r\nGiven a list of ascending three-digits integers representing a binary with the depth smaller than 5. You need to return the sum of all paths from the root towards the leaves.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [113, 215, 221]\r\nOutput: 12\r\nExplanation: \r\nThe tree that the list represents is:\r\n    3\r\n   / \\\r\n  5   1\r\n\r\nThe path sum is (3 + 5) + (3 + 1) = 12.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [113, 221]\r\nOutput: 4\r\nExplanation: \r\nThe tree that the list represents is: \r\n    3\r\n     \\\r\n      1\r\n\r\nThe path sum is (3 + 1) = 4.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int pathSum(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int pathSum(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def pathSum(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def pathSum(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int pathSum(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int PathSum(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar pathSum = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef path_sum(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func pathSum(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func pathSum(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def pathSum(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun pathSum(nums: IntArray): Int {\n        \n    }\n}"}],"testcase":"[113,215,221]","testable":true,"templateMeta":{"name":"pathSum","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}