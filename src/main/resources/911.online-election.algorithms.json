{"id":947,"fid":911,"name":"Online Election","slug":"online-election","link":"https://leetcode.com/problems/online-election/description/","percent":42.932396839332746,"level":"Medium","category":"algorithms","totalAC":"3.9K","totalSubmit":"9.1K","desc":"In an election, the i-th vote was cast for persons[i] at time times[i].\r\n\r\nNow, we would like to implement the following query function: TopVotedCandidate.q(int t) will return the number of the person that was leading the election at time t.  \r\n\r\nVotes cast at time t will count towards our query.  In the case of a tie, the most recent vote (among tied candidates) wins.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"TopVotedCandidate\",\"q\",\"q\",\"q\",\"q\",\"q\",\"q\"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]\r\nOutput: [null,0,1,1,0,0,1]\r\nExplanation: \r\nAt time 3, the votes are [0], and 0 is leading.\r\nAt time 12, the votes are [0,1,1], and 1 is leading.\r\nAt time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\r\nThis continues for 3 more queries at time 15, 24, and 8.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= persons.length = times.length <= 5000\r\n\t0 <= persons[i] <= persons.length\r\n\ttimes is a strictly increasing array with all elements in [0, 10^9].\r\n\tTopVotedCandidate.q is called at most 10000 times per test case.\r\n\tTopVotedCandidate.q(int t) is always called with t >= times[0].\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class TopVotedCandidate {\npublic:\n    TopVotedCandidate(vector<int> persons, vector<int> times) {\n        \n    }\n    \n    int q(int t) {\n        \n    }\n};\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj.q(t);\n */"},{"value":"java","text":"Java","defaultCode":"class TopVotedCandidate {\n\n    public TopVotedCandidate(int[] persons, int[] times) {\n        \n    }\n    \n    public int q(int t) {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj.q(t);\n */"},{"value":"python","text":"Python","defaultCode":"class TopVotedCandidate(object):\n\n    def __init__(self, persons, times):\n        \"\"\"\n        :type persons: List[int]\n        :type times: List[int]\n        \"\"\"\n        \n\n    def q(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate(persons, times)\n# param_1 = obj.q(t)"},{"value":"python3","text":"Python3","defaultCode":"class TopVotedCandidate:\n\n    def __init__(self, persons, times):\n        \"\"\"\n        :type persons: List[int]\n        :type times: List[int]\n        \"\"\"\n        \n\n    def q(self, t):\n        \"\"\"\n        :type t: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate(persons, times)\n# param_1 = obj.q(t)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} TopVotedCandidate;\n\nTopVotedCandidate* topVotedCandidateCreate(int* persons, int* times) {\n    \n}\n\nint topVotedCandidateQ(TopVotedCandidate* obj, int t) {\n    \n}\n\nvoid topVotedCandidateFree(TopVotedCandidate* obj) {\n    \n}\n\n/**\n * Your TopVotedCandidate struct will be instantiated and called as such:\n * struct TopVotedCandidate* obj = topVotedCandidateCreate(persons, times);\n * int param_1 = topVotedCandidateQ(obj, t);\n * topVotedCandidateFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class TopVotedCandidate {\n\n    public TopVotedCandidate(int[] persons, int[] times) {\n        \n    }\n    \n    public int Q(int t) {\n        \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * TopVotedCandidate obj = new TopVotedCandidate(persons, times);\n * int param_1 = obj.Q(t);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} persons\n * @param {number[]} times\n */\nvar TopVotedCandidate = function(persons, times) {\n    \n};\n\n/** \n * @param {number} t\n * @return {number}\n */\nTopVotedCandidate.prototype.q = function(t) {\n    \n};\n\n/** \n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = Object.create(TopVotedCandidate).createNew(persons, times)\n * var param_1 = obj.q(t)\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class TopVotedCandidate\n\n=begin\n    :type persons: Integer[]\n    :type times: Integer[]\n=end\n    def initialize(persons, times)\n        \n    end\n\n\n=begin\n    :type t: Integer\n    :rtype: Integer\n=end\n    def q(t)\n        \n    end\n\n\nend\n\n# Your TopVotedCandidate object will be instantiated and called as such:\n# obj = TopVotedCandidate.new(persons, times)\n# param_1 = obj.q(t)"},{"value":"swift","text":"Swift","defaultCode":"\nclass TopVotedCandidate {\n\n    init(_ persons: [Int], _ times: [Int]) {\n        \n    }\n    \n    func q(_ t: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * let obj = TopVotedCandidate(persons, times)\n * let ret_1: Int = obj.q(t)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type TopVotedCandidate struct {\n    \n}\n\n\nfunc Constructor(persons []int, times []int) TopVotedCandidate {\n    \n}\n\n\nfunc (this *TopVotedCandidate) Q(t int) int {\n    \n}\n\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * obj := Constructor(persons, times);\n * param_1 := obj.Q(t);\n */"},{"value":"scala","text":"Scala","defaultCode":"class TopVotedCandidate(_persons: Array[Int], _times: Array[Int]) {\n\n    def q(t: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = new TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class TopVotedCandidate(persons: IntArray, times: IntArray) {\n\n    fun q(t: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your TopVotedCandidate object will be instantiated and called as such:\n * var obj = TopVotedCandidate(persons, times)\n * var param_1 = obj.q(t)\n */"}],"testcase":"[\"TopVotedCandidate\",\"q\",\"q\",\"q\",\"q\",\"q\",\"q\"]\n[[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]","testable":true,"templateMeta":{"classname":"TopVotedCandidate","maxbytesperline":200000,"constructor":{"params":[{"type":"integer[]","name":"persons"},{"type":"integer[]","name":"times"}]},"methods":[{"name":"q","params":[{"type":"integer","name":"t"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}