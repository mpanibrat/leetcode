{"id":860,"fid":622,"name":"Design Circular Queue","slug":"design-circular-queue","link":"https://leetcode.com/problems/design-circular-queue/description/","percent":36.87039312039312,"level":"Medium","category":"algorithms","totalAC":"9.6K","totalSubmit":"26K","desc":"Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called \"Ring Buffer\".\r\n\r\nOne of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.\r\n\r\nYour implementation should support following operations:\r\n\r\n\r\n\tMyCircularQueue(k): Constructor, set the size of the queue to be k.\r\n\tFront: Get the front item from the queue. If the queue is empty, return -1.\r\n\tRear: Get the last item from the queue. If the queue is empty, return -1.\r\n\tenQueue(value): Insert an element into the circular queue. Return true if the operation is successful.\r\n\tdeQueue(): Delete an element from the circular queue. Return true if the operation is successful.\r\n\tisEmpty(): Checks whether the circular queue is empty or not.\r\n\tisFull(): Checks whether the circular queue is full or not.\r\n\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\nMyCircularQueue circularQueue = new MyCircularQueue(3); // set the size to be 3\r\ncircularQueue.enQueue(1);  // return true\r\ncircularQueue.enQueue(2);  // return true\r\ncircularQueue.enQueue(3);  // return true\r\ncircularQueue.enQueue(4);  // return false, the queue is full\r\ncircularQueue.Rear();  // return 3\r\ncircularQueue.isFull();  // return true\r\ncircularQueue.deQueue();  // return true\r\ncircularQueue.enQueue(4);  // return true\r\ncircularQueue.Rear();  // return 4\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tAll values will be in the range of [0, 1000].\r\n\tThe number of operations will be in the range of [1, 1000].\r\n\tPlease do not use the built-in Queue library.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyCircularQueue {\r\npublic:\r\n    /** Initialize your data structure here. Set the size of the queue to be k. */\r\n    MyCircularQueue(int k) {\r\n        \r\n    }\r\n    \r\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\r\n    bool enQueue(int value) {\r\n        \r\n    }\r\n    \r\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\r\n    bool deQueue() {\r\n        \r\n    }\r\n    \r\n    /** Get the front item from the queue. */\r\n    int Front() {\r\n        \r\n    }\r\n    \r\n    /** Get the last item from the queue. */\r\n    int Rear() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular queue is empty or not. */\r\n    bool isEmpty() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular queue is full or not. */\r\n    bool isFull() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * MyCircularQueue obj = new MyCircularQueue(k);\r\n * bool param_1 = obj.enQueue(value);\r\n * bool param_2 = obj.deQueue();\r\n * int param_3 = obj.Front();\r\n * int param_4 = obj.Rear();\r\n * bool param_5 = obj.isEmpty();\r\n * bool param_6 = obj.isFull();\r\n */"},{"value":"java","text":"Java","defaultCode":"class MyCircularQueue {\r\n\r\n    /** Initialize your data structure here. Set the size of the queue to be k. */\r\n    public MyCircularQueue(int k) {\r\n        \r\n    }\r\n    \r\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\r\n    public boolean enQueue(int value) {\r\n        \r\n    }\r\n    \r\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\r\n    public boolean deQueue() {\r\n        \r\n    }\r\n    \r\n    /** Get the front item from the queue. */\r\n    public int Front() {\r\n        \r\n    }\r\n    \r\n    /** Get the last item from the queue. */\r\n    public int Rear() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular queue is empty or not. */\r\n    public boolean isEmpty() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular queue is full or not. */\r\n    public boolean isFull() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * MyCircularQueue obj = new MyCircularQueue(k);\r\n * boolean param_1 = obj.enQueue(value);\r\n * boolean param_2 = obj.deQueue();\r\n * int param_3 = obj.Front();\r\n * int param_4 = obj.Rear();\r\n * boolean param_5 = obj.isEmpty();\r\n * boolean param_6 = obj.isFull();\r\n */"},{"value":"python","text":"Python","defaultCode":"class MyCircularQueue(object):\r\n\r\n    def __init__(self, k):\r\n        \"\"\"\r\n        Initialize your data structure here. Set the size of the queue to be k.\r\n        :type k: int\r\n        \"\"\"\r\n        \r\n\r\n    def enQueue(self, value):\r\n        \"\"\"\r\n        Insert an element into the circular queue. Return true if the operation is successful.\r\n        :type value: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def deQueue(self):\r\n        \"\"\"\r\n        Delete an element from the circular queue. Return true if the operation is successful.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def Front(self):\r\n        \"\"\"\r\n        Get the front item from the queue.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def Rear(self):\r\n        \"\"\"\r\n        Get the last item from the queue.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def isEmpty(self):\r\n        \"\"\"\r\n        Checks whether the circular queue is empty or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def isFull(self):\r\n        \"\"\"\r\n        Checks whether the circular queue is full or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyCircularQueue object will be instantiated and called as such:\r\n# obj = MyCircularQueue(k)\r\n# param_1 = obj.enQueue(value)\r\n# param_2 = obj.deQueue()\r\n# param_3 = obj.Front()\r\n# param_4 = obj.Rear()\r\n# param_5 = obj.isEmpty()\r\n# param_6 = obj.isFull()"},{"value":"python3","text":"Python3","defaultCode":"class MyCircularQueue:\r\n\r\n    def __init__(self, k):\r\n        \"\"\"\r\n        Initialize your data structure here. Set the size of the queue to be k.\r\n        :type k: int\r\n        \"\"\"\r\n        \r\n\r\n    def enQueue(self, value):\r\n        \"\"\"\r\n        Insert an element into the circular queue. Return true if the operation is successful.\r\n        :type value: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def deQueue(self):\r\n        \"\"\"\r\n        Delete an element from the circular queue. Return true if the operation is successful.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def Front(self):\r\n        \"\"\"\r\n        Get the front item from the queue.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def Rear(self):\r\n        \"\"\"\r\n        Get the last item from the queue.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def isEmpty(self):\r\n        \"\"\"\r\n        Checks whether the circular queue is empty or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def isFull(self):\r\n        \"\"\"\r\n        Checks whether the circular queue is full or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyCircularQueue object will be instantiated and called as such:\r\n# obj = MyCircularQueue(k)\r\n# param_1 = obj.enQueue(value)\r\n# param_2 = obj.deQueue()\r\n# param_3 = obj.Front()\r\n# param_4 = obj.Rear()\r\n# param_5 = obj.isEmpty()\r\n# param_6 = obj.isFull()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MyCircularQueue;\r\n\r\n/** Initialize your data structure here. Set the size of the queue to be k. */\r\nMyCircularQueue* myCircularQueueCreate(int k) {\r\n    \r\n}\r\n\r\n/** Insert an element into the circular queue. Return true if the operation is successful. */\r\nbool myCircularQueueEnQueue(MyCircularQueue* obj, int value) {\r\n    \r\n}\r\n\r\n/** Delete an element from the circular queue. Return true if the operation is successful. */\r\nbool myCircularQueueDeQueue(MyCircularQueue* obj) {\r\n    \r\n}\r\n\r\n/** Get the front item from the queue. */\r\nint myCircularQueueFront(MyCircularQueue* obj) {\r\n    \r\n}\r\n\r\n/** Get the last item from the queue. */\r\nint myCircularQueueRear(MyCircularQueue* obj) {\r\n    \r\n}\r\n\r\n/** Checks whether the circular queue is empty or not. */\r\nbool myCircularQueueIsEmpty(MyCircularQueue* obj) {\r\n    \r\n}\r\n\r\n/** Checks whether the circular queue is full or not. */\r\nbool myCircularQueueIsFull(MyCircularQueue* obj) {\r\n    \r\n}\r\n\r\nvoid myCircularQueueFree(MyCircularQueue* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MyCircularQueue struct will be instantiated and called as such:\r\n * struct MyCircularQueue* obj = myCircularQueueCreate(k);\r\n * bool param_1 = myCircularQueueEnQueue(obj, value);\r\n * bool param_2 = myCircularQueueDeQueue(obj);\r\n * int param_3 = myCircularQueueFront(obj);\r\n * int param_4 = myCircularQueueRear(obj);\r\n * bool param_5 = myCircularQueueIsEmpty(obj);\r\n * bool param_6 = myCircularQueueIsFull(obj);\r\n * myCircularQueueFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyCircularQueue {\r\n\r\n    /** Initialize your data structure here. Set the size of the queue to be k. */\r\n    public MyCircularQueue(int k) {\r\n        \r\n    }\r\n    \r\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\r\n    public bool EnQueue(int value) {\r\n        \r\n    }\r\n    \r\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\r\n    public bool DeQueue() {\r\n        \r\n    }\r\n    \r\n    /** Get the front item from the queue. */\r\n    public int Front() {\r\n        \r\n    }\r\n    \r\n    /** Get the last item from the queue. */\r\n    public int Rear() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular queue is empty or not. */\r\n    public bool IsEmpty() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular queue is full or not. */\r\n    public bool IsFull() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * MyCircularQueue obj = new MyCircularQueue(k);\r\n * bool param_1 = obj.EnQueue(value);\r\n * bool param_2 = obj.DeQueue();\r\n * int param_3 = obj.Front();\r\n * int param_4 = obj.Rear();\r\n * bool param_5 = obj.IsEmpty();\r\n * bool param_6 = obj.IsFull();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here. Set the size of the queue to be k.\r\n * @param {number} k\r\n */\r\nvar MyCircularQueue = function(k) {\r\n    \r\n};\r\n\r\n/**\r\n * Insert an element into the circular queue. Return true if the operation is successful. \r\n * @param {number} value\r\n * @return {boolean}\r\n */\r\nMyCircularQueue.prototype.enQueue = function(value) {\r\n    \r\n};\r\n\r\n/**\r\n * Delete an element from the circular queue. Return true if the operation is successful.\r\n * @return {boolean}\r\n */\r\nMyCircularQueue.prototype.deQueue = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the front item from the queue.\r\n * @return {number}\r\n */\r\nMyCircularQueue.prototype.Front = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the last item from the queue.\r\n * @return {number}\r\n */\r\nMyCircularQueue.prototype.Rear = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Checks whether the circular queue is empty or not.\r\n * @return {boolean}\r\n */\r\nMyCircularQueue.prototype.isEmpty = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Checks whether the circular queue is full or not.\r\n * @return {boolean}\r\n */\r\nMyCircularQueue.prototype.isFull = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * var obj = Object.create(MyCircularQueue).createNew(k)\r\n * var param_1 = obj.enQueue(value)\r\n * var param_2 = obj.deQueue()\r\n * var param_3 = obj.Front()\r\n * var param_4 = obj.Rear()\r\n * var param_5 = obj.isEmpty()\r\n * var param_6 = obj.isFull()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyCircularQueue\r\n\r\n=begin\r\n    Initialize your data structure here. Set the size of the queue to be k.\r\n    :type k: Integer\r\n=end\r\n    def initialize(k)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Insert an element into the circular queue. Return true if the operation is successful.\r\n    :type value: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def en_queue(value)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Delete an element from the circular queue. Return true if the operation is successful.\r\n    :rtype: Boolean\r\n=end\r\n    def de_queue()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the front item from the queue.\r\n    :rtype: Integer\r\n=end\r\n    def front()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the last item from the queue.\r\n    :rtype: Integer\r\n=end\r\n    def rear()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Checks whether the circular queue is empty or not.\r\n    :rtype: Boolean\r\n=end\r\n    def is_empty()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Checks whether the circular queue is full or not.\r\n    :rtype: Boolean\r\n=end\r\n    def is_full()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyCircularQueue object will be instantiated and called as such:\r\n# obj = MyCircularQueue.new(k)\r\n# param_1 = obj.en_queue(value)\r\n# param_2 = obj.de_queue()\r\n# param_3 = obj.front()\r\n# param_4 = obj.rear()\r\n# param_5 = obj.is_empty()\r\n# param_6 = obj.is_full()"},{"value":"swift","text":"Swift","defaultCode":"\r\nclass MyCircularQueue {\r\n\r\n    /** Initialize your data structure here. Set the size of the queue to be k. */\r\n    init(_ k: Int) {\r\n        \r\n    }\r\n    \r\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\r\n    func enQueue(_ value: Int) -> Bool {\r\n      \r\n    }\r\n    \r\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\r\n    func deQueue() -> Bool {\r\n      \r\n    }\r\n    \r\n    /** Get the front item from the queue. */\r\n    func Front() -> Int {\r\n      \r\n    }\r\n    \r\n    /** Get the last item from the queue. */\r\n    func Rear() -> Int {\r\n      \r\n    }\r\n    \r\n    /** Checks whether the circular queue is empty or not. */\r\n    func isEmpty() -> Bool {\r\n      \r\n    }\r\n    \r\n    /** Checks whether the circular queue is full or not. */\r\n    func isFull() -> Bool {\r\n      \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * let obj = MyCircularQueue(k)\r\n * let ret_1: Bool = obj.enQueue(value)\r\n * let ret_2: Bool = obj.deQueue()\r\n * let ret_3: Int = obj.Front()\r\n * let ret_4: Int = obj.Rear()\r\n * let ret_5: Bool = obj.isEmpty()\r\n * let ret_6: Bool = obj.isFull()\r\n */\r\n "},{"value":"golang","text":"Go","defaultCode":"type MyCircularQueue struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. Set the size of the queue to be k. */\r\nfunc Constructor(k int) MyCircularQueue {\r\n    \r\n}\r\n\r\n\r\n/** Insert an element into the circular queue. Return true if the operation is successful. */\r\nfunc (this *MyCircularQueue) EnQueue(value int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Delete an element from the circular queue. Return true if the operation is successful. */\r\nfunc (this *MyCircularQueue) DeQueue() bool {\r\n    \r\n}\r\n\r\n\r\n/** Get the front item from the queue. */\r\nfunc (this *MyCircularQueue) Front() int {\r\n    \r\n}\r\n\r\n\r\n/** Get the last item from the queue. */\r\nfunc (this *MyCircularQueue) Rear() int {\r\n    \r\n}\r\n\r\n\r\n/** Checks whether the circular queue is empty or not. */\r\nfunc (this *MyCircularQueue) IsEmpty() bool {\r\n    \r\n}\r\n\r\n\r\n/** Checks whether the circular queue is full or not. */\r\nfunc (this *MyCircularQueue) IsFull() bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * obj := Constructor(k);\r\n * param_1 := obj.EnQueue(value);\r\n * param_2 := obj.DeQueue();\r\n * param_3 := obj.Front();\r\n * param_4 := obj.Rear();\r\n * param_5 := obj.IsEmpty();\r\n * param_6 := obj.IsFull();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyCircularQueue(_k: Int) {\r\n\r\n    /** Initialize your data structure here. Set the size of the queue to be k. */\r\n    \r\n\r\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\r\n    def enQueue(value: Int): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\r\n    def deQueue(): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Get the front item from the queue. */\r\n    def Front(): Int = {\r\n        \r\n    }\r\n\r\n    /** Get the last item from the queue. */\r\n    def Rear(): Int = {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular queue is empty or not. */\r\n    def isEmpty(): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular queue is full or not. */\r\n    def isFull(): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * var obj = new MyCircularQueue(k)\r\n * var param_1 = obj.enQueue(value)\r\n * var param_2 = obj.deQueue()\r\n * var param_3 = obj.Front()\r\n * var param_4 = obj.Rear()\r\n * var param_5 = obj.isEmpty()\r\n * var param_6 = obj.isFull()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyCircularQueue(k: Int) {\r\n\r\n    /** Initialize your data structure here. Set the size of the queue to be k. */\r\n    \r\n\r\n    /** Insert an element into the circular queue. Return true if the operation is successful. */\r\n    fun enQueue(value: Int): Boolean {\r\n        \r\n    }\r\n\r\n    /** Delete an element from the circular queue. Return true if the operation is successful. */\r\n    fun deQueue(): Boolean {\r\n        \r\n    }\r\n\r\n    /** Get the front item from the queue. */\r\n    fun Front(): Int {\r\n        \r\n    }\r\n\r\n    /** Get the last item from the queue. */\r\n    fun Rear(): Int {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular queue is empty or not. */\r\n    fun isEmpty(): Boolean {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular queue is full or not. */\r\n    fun isFull(): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyCircularQueue object will be instantiated and called as such:\r\n * var obj = MyCircularQueue(k)\r\n * var param_1 = obj.enQueue(value)\r\n * var param_2 = obj.deQueue()\r\n * var param_3 = obj.Front()\r\n * var param_4 = obj.Rear()\r\n * var param_5 = obj.isEmpty()\r\n * var param_6 = obj.isFull()\r\n */"}],"testcase":"[\"MyCircularQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"enQueue\",\"Rear\",\"isFull\",\"deQueue\",\"enQueue\",\"Rear\"]\n[[3],[1],[2],[3],[4],[],[],[],[4],[]]","testable":true,"templateMeta":{"classname":"MyCircularQueue","maxbytesperline":400000,"constructor":{"params":[{"type":"integer","name":"k"}],"comment":"Initialize your data structure here. Set the size of the queue to be k."},"methods":[{"name":"enQueue","params":[{"type":"integer","name":"value"}],"return":{"type":"boolean"},"comment":"Insert an element into the circular queue. Return true if the operation is successful."},{"name":"deQueue","params":[],"return":{"type":"boolean"},"comment":"Delete an element from the circular queue. Return true if the operation is successful."},{"name":"Front","params":[],"return":{"type":"integer"},"comment":"Get the front item from the queue."},{"name":"Rear","params":[],"return":{"type":"integer"},"comment":"Get the last item from the queue."},{"name":"isEmpty","params":[],"return":{"type":"boolean"},"comment":"Checks whether the circular queue is empty or not."},{"name":"isFull","params":[],"return":{"type":"boolean"},"comment":"Checks whether the circular queue is full or not."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}