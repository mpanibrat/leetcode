{"id":943,"fid":907,"name":"Sum of Subarray Minimums","slug":"sum-of-subarray-minimums","link":"https://leetcode.com/problems/sum-of-subarray-minimums/description/","percent":21.536263303113913,"level":"Medium","category":"algorithms","totalAC":"4.4K","totalSubmit":"20.3K","desc":"Given an array of integers A, find the sum of min(B), where B ranges over every (contiguous) subarray of A.\r\n\r\nSince the answer may be large, return the answer modulo 10^9 + 7.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [3,1,2,4]\r\nOutput: 17\r\nExplanation: Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \r\nMinimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.  Sum is 17.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 30000\r\n\t1 <= A[i] <= 30000\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int sumSubarrayMins(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int sumSubarrayMins(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def sumSubarrayMins(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sumSubarrayMins(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int sumSubarrayMins(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SumSubarrayMins(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar sumSubarrayMins = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer}\ndef sum_subarray_mins(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sumSubarrayMins(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func sumSubarrayMins(A []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sumSubarrayMins(A: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sumSubarrayMins(A: IntArray): Int {\n        \n    }\n}"}],"testcase":"[3,1,2,4]","testable":true,"templateMeta":{"name":"sumSubarrayMins","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}