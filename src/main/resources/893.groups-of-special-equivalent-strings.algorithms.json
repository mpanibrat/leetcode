{"id":929,"fid":893,"name":"Groups of Special-Equivalent Strings","slug":"groups-of-special-equivalent-strings","link":"https://leetcode.com/problems/groups-of-special-equivalent-strings/description/","percent":60.48679867986799,"level":"Easy","category":"algorithms","totalAC":"7.3K","totalSubmit":"12.1K","desc":"You are given an array A of strings.\r\n\r\nTwo strings S and T are special-equivalent if after any number of moves, S == T.\r\n\r\nA move consists of choosing two indices i and j with i % 2 == j % 2, and swapping S[i] with S[j].\r\n\r\nNow, a group of special-equivalent strings from A is a non-empty subset S of A such that any string not in S is not special-equivalent with any string in S.\r\n\r\nReturn the number of groups of special-equivalent strings from A.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"a\",\"b\",\"c\",\"a\",\"c\",\"c\"]\r\nOutput: 3\r\nExplanation: 3 groups [\"a\",\"a\"], [\"b\"], [\"c\",\"c\",\"c\"]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [\"aa\",\"bb\",\"ab\",\"ba\"]\r\nOutput: 4\r\nExplanation: 4 groups [\"aa\"], [\"bb\"], [\"ab\"], [\"ba\"]\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\r\nOutput: 3\r\nExplanation: 3 groups [\"abc\",\"cba\"], [\"acb\",\"bca\"], [\"bac\",\"cab\"]\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: [\"abcd\",\"cdab\",\"adcb\",\"cbad\"]\r\nOutput: 1\r\nExplanation: 1 group [\"abcd\",\"cdab\",\"adcb\",\"cbad\"]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 1000\r\n\t1 <= A[i].length <= 20\r\n\tAll A[i] have the same length.\r\n\tAll A[i] consist of only lowercase letters.\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numSpecialEquivGroups(vector<string>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numSpecialEquivGroups(String[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numSpecialEquivGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numSpecialEquivGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numSpecialEquivGroups(char** A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumSpecialEquivGroups(string[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} A\n * @return {number}\n */\nvar numSpecialEquivGroups = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} a\n# @return {Integer}\ndef num_special_equiv_groups(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numSpecialEquivGroups(_ A: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numSpecialEquivGroups(A []string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numSpecialEquivGroups(A: Array[String]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numSpecialEquivGroups(A: Array<String>): Int {\n        \n    }\n}"}],"testcase":"[\"a\",\"b\",\"c\",\"a\",\"c\",\"c\"]","testable":true,"templateMeta":{"name":"numSpecialEquivGroups","params":[{"name":"A","type":"string[]"}],"return":{"type":"integer"}}}