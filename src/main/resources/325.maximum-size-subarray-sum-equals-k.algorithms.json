{"id":325,"fid":325,"name":"Maximum Size Subarray Sum Equals k","slug":"maximum-size-subarray-sum-equals-k","link":"https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/description/","percent":43.73434607426767,"level":"Medium","category":"algorithms","totalAC":"64.3K","totalSubmit":"146.9K","desc":"Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.\r\n\r\nNote:\r\nThe sum of the entire nums array is guaranteed to fit within the 32-bit signed integer range.\r\n\r\nExample 1:\r\n\r\n\r\nInput: nums = [1, -1, 5, -2, 3], k = 3\r\nOutput: 4 \r\nExplanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: nums = [-2, -1, 2, 1], k = 1\r\nOutput: 2 \r\nExplanation: The subarray [-1, 2] sums to 1 and is the longest.\r\n\r\nFollow Up:\r\nCan you do it in O(n) time?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maxSubArrayLen(vector<int>& nums, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int maxSubArrayLen(int[] nums, int k) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxSubArrayLen(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maxSubArrayLen(self, nums, k):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int maxSubArrayLen(int* nums, int numsSize, int k) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaxSubArrayLen(int[] nums, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar maxSubArrayLen = function(nums, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef max_sub_array_len(nums, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxSubArrayLen(_ nums: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxSubArrayLen(nums []int, k int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maxSubArrayLen(nums: Array[Int], k: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maxSubArrayLen(nums: IntArray, k: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[1,-1,5,-2,3]\n3","testable":true,"templateMeta":{"name":"maxSubArrayLen","params":[{"name":"nums","type":"integer[]"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}