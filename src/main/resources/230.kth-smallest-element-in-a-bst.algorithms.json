{"id":230,"fid":230,"name":"Kth Smallest Element in a BST","slug":"kth-smallest-element-in-a-bst","link":"https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/","percent":48.032125664508946,"level":"Medium","category":"algorithms","totalAC":"176K","totalSubmit":"366.4K","desc":"Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.\r\n\r\nNote: \r\nYou may assume k is always valid, 1 ≤ k ≤ BST's total elements.\r\n\r\nExample 1:\r\n\r\n\r\nInput: root = [3,1,4,null,2], k = 1\r\n   3\r\n  / \\\r\n 1   4\r\n  \\\r\n   2\r\nOutput: 1\r\n\r\nExample 2:\r\n\r\n\r\nInput: root = [5,3,6,2,4,null,null,1], k = 3\r\n       5\r\n      / \\\r\n     3   6\r\n    / \\\r\n   2   4\r\n  /\r\n 1\r\nOutput: 3\r\n\r\n\r\nFollow up:\r\nWhat if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? How would you optimize the kthSmallest routine?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int kthSmallest(TreeNode* root, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public int kthSmallest(TreeNode root, int k) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def kthSmallest(self, root, k):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def kthSmallest(self, root, k):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :type k: int\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nint kthSmallest(struct TreeNode* root, int k) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public int KthSmallest(TreeNode root, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @param {number} k\r\n * @return {number}\r\n */\r\nvar kthSmallest = function(root, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @param {Integer} k\r\n# @return {Integer}\r\ndef kth_smallest(root, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func kthSmallest(_ root: TreeNode?, _ k: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc kthSmallest(root *TreeNode, k int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def kthSmallest(root: TreeNode, k: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun kthSmallest(root: TreeNode?, k: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[3,1,4,null,2]\n1","testable":true,"templateMeta":{"name":"kthSmallest","params":[{"name":"root","type":"TreeNode"},{"name":"k","type":"integer"}],"return":{"type":"integer"}}}