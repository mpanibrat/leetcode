{"id":914,"fid":497,"name":"Random Point in Non-overlapping Rectangles","slug":"random-point-in-non-overlapping-rectangles","link":"https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/description/","percent":33.008921330089215,"level":"Medium","category":"algorithms","totalAC":"2K","totalSubmit":"6.2K","desc":"Given a list of non-overlapping axis-aligned rectangles rects, write a function pick which randomly and uniformily picks an integer point in the space covered by the rectangles.\r\n\r\nNote:\r\n\r\n\r\n\tAn integer point is a point that has integer coordinates. \r\n\tA point on the perimeter of a rectangle is included in the space covered by the rectangles. \r\n\tith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer coordinates of the bottom-left corner, and [x2, y2] are the integer coordinates of the top-right corner.\r\n\tlength and width of each rectangle does not exceed 2000.\r\n\t1 <= rects.length <= 100\r\n\tpick return a point as an array of integer coordinates [p_x, p_y]\r\n\tpick is called at most 10000 times.\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pick\",\"pick\",\"pick\"]\r\n[[[[1,1,5,5]]],[],[],[]]\r\nOutput: \r\n[null,[4,1],[4,1],[3,3]]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\r\n[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\r\nOutput: \r\n[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]\r\n\r\n\r\n\r\nExplanation of Input Syntax:\r\n\r\nThe input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array of rectangles rects. pick has no arguments. Arguments are always wrapped with a list, even if there aren't any.\r\n\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    Solution(vector<vector<int>> rects) {\r\n        \r\n    }\r\n    \r\n    vector<int> pick() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(rects);\r\n * vector<int> param_1 = obj.pick();\r\n */"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n\r\n    public Solution(int[][] rects) {\r\n        \r\n    }\r\n    \r\n    public int[] pick() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(rects);\r\n * int[] param_1 = obj.pick();\r\n */"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n\r\n    def __init__(self, rects):\r\n        \"\"\"\r\n        :type rects: List[List[int]]\r\n        \"\"\"\r\n        \r\n\r\n    def pick(self):\r\n        \"\"\"\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(rects)\r\n# param_1 = obj.pick()"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n\r\n    def __init__(self, rects):\r\n        \"\"\"\r\n        :type rects: List[List[int]]\r\n        \"\"\"\r\n        \r\n\r\n    def pick(self):\r\n        \"\"\"\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(rects)\r\n# param_1 = obj.pick()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Solution;\r\n\r\nSolution* solutionCreate(int** rects, int rectsSize) {\r\n    \r\n}\r\n\r\nint* solutionPick(Solution* obj, int *returnSize) {\r\n    \r\n}\r\n\r\nvoid solutionFree(Solution* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Solution struct will be instantiated and called as such:\r\n * struct Solution* obj = solutionCreate(rects, rectsSize);\r\n * int* param_1 = solutionPick(obj);\r\n * solutionFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n\r\n    public Solution(int[][] rects) {\r\n        \r\n    }\r\n    \r\n    public int[] Pick() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(rects);\r\n * int[] param_1 = obj.Pick();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} rects\r\n */\r\nvar Solution = function(rects) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number[]}\r\n */\r\nSolution.prototype.pick = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(rects)\r\n * var param_1 = obj.pick()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Solution\r\n\r\n=begin\r\n    :type rects: Integer[][]\r\n=end\r\n    def initialize(rects)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer[]\r\n=end\r\n    def pick()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(rects)\r\n# param_1 = obj.pick()"},{"value":"swift","text":"Swift","defaultCode":"\nclass Solution {\n\n    init(_ rects: [[Int]]) {\n        \n    }\n    \n    func pick() -> [Int] {\n      \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(rects)\n * let ret_1: [Int] = obj.pick()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Solution struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(rects [][]int) Solution {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Solution) Pick() []int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(rects);\r\n * param_1 := obj.Pick();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Solution(_rects: Array[Array[Int]]) {\r\n\r\n    def pick(): Array[Int] = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = new Solution(rects)\r\n * var param_1 = obj.pick()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution(rects: Array<IntArray>) {\r\n\r\n    fun pick(): IntArray {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Solution(rects)\r\n * var param_1 = obj.pick()\r\n */"}],"testcase":"[\"Solution\", \"pick\", \"pick\", \"pick\"]\n[[[[1, 1, 5, 5]]], [], [], []]","testable":true,"templateMeta":{"classname":"Solution","maxbytesperline":200000,"constructor":{"params":[{"name":"rects","type":"integer[][]"},{"type":"integer","name":"rectsSize","lang":"c","value":"size_1"}]},"methods":[{"name":"pick","params":[],"return":{"type":"integer[]"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}