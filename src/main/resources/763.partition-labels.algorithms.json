{"id":768,"fid":763,"name":"Partition Labels","slug":"partition-labels","link":"https://leetcode.com/problems/partition-labels/description/","percent":65.89190771181893,"level":"Medium","category":"algorithms","totalAC":"27K","totalSubmit":"41K","desc":"\r\nA string S of lowercase letters is given.  We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.\r\n\r\n\r\nExample 1:\r\n\r\nInput: S = \"ababcbacadefegdehijhklij\"\r\nOutput: [9,7,8]\r\nExplanation:\r\nThe partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\r\nThis is a partition so that each letter appears in at most one part.\r\nA partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits S into less parts.\r\n\r\n\r\n\r\nNote:\r\nS will have length in range [1, 500].\r\nS will consist of lowercase letters ('a' to 'z') only.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> partitionLabels(string S) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> partitionLabels(String S) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def partitionLabels(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* partitionLabels(char* S, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> PartitionLabels(string S) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @return {number[]}\n */\nvar partitionLabels = function(S) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer[]}\ndef partition_labels(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func partitionLabels(_ S: String) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func partitionLabels(S string) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def partitionLabels(S: String): List[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun partitionLabels(S: String): List<Int> {\n        \n    }\n}"}],"testcase":"\"ababcbacadefegdehijhklij\"","testable":true,"templateMeta":{"name":"partitionLabels","params":[{"name":"S","type":"string"}],"return":{"type":"list<integer>"}}}