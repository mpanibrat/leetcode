{"id":90,"fid":90,"name":"Subsets II","slug":"subsets-ii","link":"https://leetcode.com/problems/subsets-ii/description/","percent":40.16126621769305,"level":"Medium","category":"algorithms","totalAC":"172K","totalSubmit":"428.2K","desc":"Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).\r\n\r\nNote: The solution set must not contain duplicate subsets.\r\n\r\nExample:\r\n\r\n\r\nInput: [1,2,2]\r\nOutput:\r\n[\r\n  [2],\r\n  [1],\r\n  [1,2,2],\r\n  [2,2],\r\n  [1,2],\r\n  []\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> subsetsWithDup(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def subsetsWithDup(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def subsetsWithDup(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** subsetsWithDup(int* nums, int numsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> SubsetsWithDup(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[][]}\r\n */\r\nvar subsetsWithDup = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[][]}\r\ndef subsets_with_dup(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func subsetsWithDup(_ nums: [Int]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func subsetsWithDup(nums []int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def subsetsWithDup(nums: Array[Int]): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun subsetsWithDup(nums: IntArray): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"[1,2,2]","testable":true,"templateMeta":{"name":"subsetsWithDup","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<list<integer>>","dealloc":true}}}