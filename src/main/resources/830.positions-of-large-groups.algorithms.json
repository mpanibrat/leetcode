{"id":857,"fid":830,"name":"Positions of Large Groups","slug":"positions-of-large-groups","link":"https://leetcode.com/problems/positions-of-large-groups/description/","percent":46.16731238341225,"level":"Easy","category":"algorithms","totalAC":"16.1K","totalSubmit":"34.8K","desc":"In a string S of lowercase letters, these letters form consecutive groups of the same character.\r\n\r\nFor example, a string like S = \"abbxxxxzyy\" has the groups \"a\", \"bb\", \"xxxx\", \"z\" and \"yy\".\r\n\r\nCall a group large if it has 3 or more characters.  We would like the starting and ending positions of every large group.\r\n\r\nThe final answer should be in lexicographic order.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: \"abbxxxxzzy\"\r\nOutput: [[3,6]]\r\nExplanation: \"xxxx\" is the single large group with starting  3 and ending positions 6.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \"abc\"\r\nOutput: []\r\nExplanation: We have \"a\",\"b\" and \"c\" but no large group.\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: \"abcdddeeeeaabbbcd\"\r\nOutput: [[3,5],[6,9],[12,14]]\r\n\r\n \r\n\r\nNote:  1 <= S.length <= 1000\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> largeGroupPositions(string S) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<Integer>> largeGroupPositions(String S) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def largeGroupPositions(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def largeGroupPositions(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *columnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** largeGroupPositions(char* S, int** columnSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<IList<int>> LargeGroupPositions(string S) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @return {number[][]}\n */\nvar largeGroupPositions = function(S) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {Integer[][]}\ndef large_group_positions(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func largeGroupPositions(_ S: String) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func largeGroupPositions(S string) [][]int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def largeGroupPositions(S: String): List[List[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun largeGroupPositions(S: String): List<List<Int>> {\n        \n    }\n}"}],"testcase":"\"abbxxxxzzy\"","testable":true,"templateMeta":{"name":"largeGroupPositions","params":[{"name":"S","type":"string"}],"return":{"type":"list<list<integer>>"}}}