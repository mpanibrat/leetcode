{"id":382,"fid":382,"name":"Linked List Random Node","slug":"linked-list-random-node","link":"https://leetcode.com/problems/linked-list-random-node/description/","percent":48.07016052779755,"level":"Medium","category":"algorithms","totalAC":"45.2K","totalSubmit":"94.1K","desc":"Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.\r\n\r\nFollow up:\r\nWhat if the linked list is extremely large and its length is unknown to you? Could you solve this efficiently without using extra space?\r\n\r\n\r\nExample:\r\n\r\n// Init a singly linked list [1,2,3].\r\nListNode head = new ListNode(1);\r\nhead.next = new ListNode(2);\r\nhead.next.next = new ListNode(3);\r\nSolution solution = new Solution(head);\r\n\r\n// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\r\nsolution.getRandom();\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    /** @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\n    Solution(ListNode* head) {\r\n        \r\n    }\r\n    \r\n    /** Returns a random node's value. */\r\n    int getRandom() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(head);\r\n * int param_1 = obj.getRandom();\r\n */"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n\r\n    /** @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\n    public Solution(ListNode head) {\r\n        \r\n    }\r\n    \r\n    /** Returns a random node's value. */\r\n    public int getRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(head);\r\n * int param_1 = obj.getRandom();\r\n */"},{"value":"python","text":"Python","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n\r\n    def __init__(self, head):\r\n        \"\"\"\r\n        @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node.\r\n        :type head: ListNode\r\n        \"\"\"\r\n        \r\n\r\n    def getRandom(self):\r\n        \"\"\"\r\n        Returns a random node's value.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(head)\r\n# param_1 = obj.getRandom()"},{"value":"python3","text":"Python3","defaultCode":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n\n    def __init__(self, head):\n        \"\"\"\n        @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node.\n        :type head: ListNode\n        \"\"\"\n        \n\n    def getRandom(self):\n        \"\"\"\n        Returns a random node's value.\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your Solution object will be instantiated and called as such:\n# obj = Solution(head)\n# param_1 = obj.getRandom()"},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\ntypedef struct {\r\n    \r\n} Solution;\r\n\r\n/** @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\nSolution* solutionCreate(struct ListNode* head) {\r\n    \r\n}\r\n\r\n/** Returns a random node's value. */\r\nint solutionGetRandom(Solution* obj) {\r\n    \r\n}\r\n\r\nvoid solutionFree(Solution* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Solution struct will be instantiated and called as such:\r\n * struct Solution* obj = solutionCreate(head);\r\n * int param_1 = solutionGetRandom(obj);\r\n * solutionFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n\r\n    /** @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\n    public Solution(ListNode head) {\r\n        \r\n    }\r\n    \r\n    /** Returns a random node's value. */\r\n    public int GetRandom() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(head);\r\n * int param_1 = obj.GetRandom();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node.\r\n * @param {ListNode} head\r\n */\r\nvar Solution = function(head) {\r\n    \r\n};\r\n\r\n/**\r\n * Returns a random node's value.\r\n * @return {number}\r\n */\r\nSolution.prototype.getRandom = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(head)\r\n * var param_1 = obj.getRandom()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\nclass Solution\r\n\r\n=begin\r\n    @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node.\r\n    :type head: ListNode\r\n=end\r\n    def initialize(head)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns a random node's value.\r\n    :rtype: Integer\r\n=end\r\n    def get_random()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(head)\r\n# param_1 = obj.get_random()"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\n\nclass Solution {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    init(_ head: ListNode?) {\n        \n    }\n    \n    /** Returns a random node's value. */\n    func getRandom() -> Int {\n      \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(head)\n * let ret_1: Int = obj.getRandom()\n */\n "},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\ntype Solution struct {\r\n    \r\n}\r\n\r\n\r\n/** @param head The linked list's head.\r\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\r\nfunc Constructor(head *ListNode) Solution {\r\n    \r\n}\r\n\r\n\r\n/** Returns a random node's value. */\r\nfunc (this *Solution) GetRandom() int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(head);\r\n * param_1 := obj.GetRandom();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nclass Solution(_head: ListNode) {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    \n\n    /** Returns a random node's value. */\n    def getRandom(): Int = {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = new Solution(head)\n * var param_1 = obj.getRandom()\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int = 0) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution(head: ListNode?) {\n\n    /** @param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node. */\n    \n\n    /** Returns a random node's value. */\n    fun getRandom(): Int {\n        \n    }\n\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * var obj = Solution(head)\n * var param_1 = obj.getRandom()\n */"}],"testcase":"[\"Solution\",\"getRandom\"]\n[[[1,2,3]],[]]","testable":true,"templateMeta":{"classname":"Solution","maxbytesperline":121000,"constructor":{"params":[{"type":"ListNode","name":"head"}],"comment":"@param head The linked list's head.\n        Note that the head is guaranteed to be not null, so it contains at least one node."},"methods":[{"name":"getRandom","params":[],"return":{"type":"integer"},"deserialize":false,"comment":"Returns a random node's value."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}