{"id":672,"fid":672,"name":"Bulb Switcher II","slug":"bulb-switcher-ii","link":"https://leetcode.com/problems/bulb-switcher-ii/description/","percent":49.26885582349923,"level":"Medium","category":"algorithms","totalAC":"7.7K","totalSubmit":"15.6K","desc":"\r\nThere is a room with n lights which are turned on initially and 4 buttons on the wall. After performing exactly m unknown operations towards buttons, you need to return how many different kinds of status of the n lights could be.\r\n\r\n\r\n\r\nSuppose n lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:\r\n\r\n\r\nFlip all the lights.\r\nFlip lights with even numbers.\r\nFlip lights with odd numbers.\r\nFlip lights with (3k + 1) numbers, k = 0, 1, 2, ...\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: n = 1, m = 1.\r\nOutput: 2\r\nExplanation: Status can be: [on], [off]\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: n = 2, m = 1.\r\nOutput: 3\r\nExplanation: Status can be: [on, off], [off, on], [off, off]\r\n\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput: n = 3, m = 1.\r\nOutput: 4\r\nExplanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\r\n\r\n\r\n\r\nNote:\r\nn and m both fit in range [0, 1000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int flipLights(int n, int m) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int flipLights(int n, int m) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def flipLights(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def flipLights(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int flipLights(int n, int m) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FlipLights(int n, int m) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @param {number} m\n * @return {number}\n */\nvar flipLights = function(n, m) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @param {Integer} m\n# @return {Integer}\ndef flip_lights(n, m)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func flipLights(_ n: Int, _ m: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func flipLights(n int, m int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def flipLights(n: Int, m: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun flipLights(n: Int, m: Int): Int {\n        \n    }\n}"}],"testcase":"1\n1","testable":true,"templateMeta":{"name":"flipLights","params":[{"name":"n","type":"integer"},{"name":"m","type":"integer"}],"return":{"type":"integer"}}}