{"id":792,"fid":704,"name":"Binary Search","slug":"binary-search","link":"https://leetcode.com/problems/binary-search/description/","percent":39.751291461162666,"level":"Easy","category":"algorithms","totalAC":"17K","totalSubmit":"42.8K","desc":"Given a sorted (in ascending order) integer array nums of n elements and a target value, write a function to search target in nums. If target exists, then return its index, otherwise return -1.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: nums = [-1,0,3,5,9,12], target = 9\r\nOutput: 4\r\nExplanation: 9 exists in nums and its index is 4\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: nums = [-1,0,3,5,9,12], target = 2\r\nOutput: -1\r\nExplanation: 2 does not exist in nums so return -1\r\n\r\n\r\nÂ \r\n\r\nNote:\r\n\r\n\r\n\tYou may assume that all elements in nums are unique.\r\n\tn will be in the range [1, 10000].\r\n\tThe value of each element in nums will be in the range [-9999, 9999].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int search(vector<int>& nums, int target) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int search(int[] nums, int target) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def search(self, nums, target):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def search(self, nums, target):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type target: int\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int search(int* nums, int numsSize, int target) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int Search(int[] nums, int target) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} target\r\n * @return {number}\r\n */\r\nvar search = function(nums, target) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} target\r\n# @return {Integer}\r\ndef search(nums, target)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func search(_ nums: [Int], _ target: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func search(nums []int, target int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def search(nums: Array[Int], target: Int): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun search(nums: IntArray, target: Int): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[-1,0,3,5,9,12]\n9","testable":true,"templateMeta":{"name":"search","params":[{"name":"nums","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"integer"}}}