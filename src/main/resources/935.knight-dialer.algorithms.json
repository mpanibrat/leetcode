{"id":972,"fid":935,"name":"Knight Dialer","slug":"knight-dialer","link":"https://leetcode.com/problems/knight-dialer/description/","percent":32.35722375020223,"level":"Medium","category":"algorithms","totalAC":"2K","totalSubmit":"6.2K","desc":"A chess knight can move as indicated in the chess diagram below:\r\n\r\n .           \r\n\r\n \r\n\r\nThis time, we place our chess knight on any numbered key of a phone pad (indicated above), and the knight makes N-1 hops.  Each hop must be from one key to another numbered key.\r\n\r\nEach time it lands on a key (including the initial placement of the knight), it presses the number of that key, pressing N digits total.\r\n\r\nHow many distinct numbers can you dial in this manner?\r\n\r\nSince the answer may be large, output the answer modulo 10^9 + 7.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: 1\r\nOutput: 10\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: 2\r\nOutput: 20\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: 3\r\nOutput: 46\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 5000\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int knightDialer(int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int knightDialer(int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def knightDialer(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def knightDialer(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int knightDialer(int N) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int KnightDialer(int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @return {number}\n */\nvar knightDialer = function(N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef knight_dialer(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func knightDialer(_ N: Int) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func knightDialer(N int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def knightDialer(N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun knightDialer(N: Int): Int {\n        \n    }\n}"}],"testcase":"1","testable":true,"templateMeta":{"name":"knightDialer","params":[{"name":"N","type":"integer"}],"return":{"type":"integer"}}}