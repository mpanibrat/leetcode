{"id":635,"fid":635,"name":"Design Log Storage System","slug":"design-log-storage-system","link":"https://leetcode.com/problems/design-log-storage-system/description/","percent":50.57544249543614,"level":"Medium","category":"algorithms","totalAC":"6.4K","totalSubmit":"12.6K","desc":"You are given several logs that each log contains a unique id and timestamp. Timestamp is a string that has the following format: Year:Month:Day:Hour:Minute:Second, for example, 2017:01:01:23:59:59. All domains are zero-padded decimal numbers. \r\n\r\nDesign a log storage system to implement the following functions:\r\n\r\nvoid Put(int id, string timestamp): Given a log's unique id and timestamp, store the log in your storage system.\r\n\r\nint[] Retrieve(String start, String end, String granularity): Return the id of logs whose timestamps are within the range from start to end. Start and end all have the same format as timestamp. However, granularity means the time level for consideration. For example, start = \"2017:01:01:23:59:59\", end = \"2017:01:02:23:59:59\", granularity = \"Day\", it means that we need to find the logs within the range from Jan. 1st 2017 to Jan. 2nd 2017.\r\n\r\nExample 1:\r\n\r\nput(1, \"2017:01:01:23:59:59\");\r\nput(2, \"2017:01:01:22:59:59\");\r\nput(3, \"2016:01:01:00:00:00\");\r\nretrieve(\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Year\"); // return [1,2,3], because you need to return all logs within 2016 and 2017.\r\nretrieve(\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Hour\"); // return [1,2], because you need to return all logs start from 2016:01:01:01 to 2017:01:01:23, where log 3 is left outside the range.\r\n\r\n\r\n\r\nNote:\r\n\r\nThere will be at most 300 operations of Put or Retrieve.\r\nYear ranges from [2000,2017]. Hour ranges from [00,23].\r\nOutput for Retrieve has no order required.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class LogSystem {\r\npublic:\r\n    LogSystem() {\r\n        \r\n    }\r\n    \r\n    void put(int id, string timestamp) {\r\n        \r\n    }\r\n    \r\n    vector<int> retrieve(string s, string e, string gra) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your LogSystem object will be instantiated and called as such:\r\n * LogSystem obj = new LogSystem();\r\n * obj.put(id,timestamp);\r\n * vector<int> param_2 = obj.retrieve(s,e,gra);\r\n */"},{"value":"java","text":"Java","defaultCode":"class LogSystem {\r\n\r\n    public LogSystem() {\r\n        \r\n    }\r\n    \r\n    public void put(int id, String timestamp) {\r\n        \r\n    }\r\n    \r\n    public List<Integer> retrieve(String s, String e, String gra) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your LogSystem object will be instantiated and called as such:\r\n * LogSystem obj = new LogSystem();\r\n * obj.put(id,timestamp);\r\n * List<Integer> param_2 = obj.retrieve(s,e,gra);\r\n */"},{"value":"python","text":"Python","defaultCode":"class LogSystem(object):\r\n\r\n    def __init__(self):\r\n        \r\n\r\n    def put(self, id, timestamp):\r\n        \"\"\"\r\n        :type id: int\r\n        :type timestamp: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def retrieve(self, s, e, gra):\r\n        \"\"\"\r\n        :type s: str\r\n        :type e: str\r\n        :type gra: str\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your LogSystem object will be instantiated and called as such:\r\n# obj = LogSystem()\r\n# obj.put(id,timestamp)\r\n# param_2 = obj.retrieve(s,e,gra)"},{"value":"python3","text":"Python3","defaultCode":"class LogSystem:\r\n\r\n    def __init__(self):\r\n        \r\n\r\n    def put(self, id, timestamp):\r\n        \"\"\"\r\n        :type id: int\r\n        :type timestamp: str\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n    def retrieve(self, s, e, gra):\r\n        \"\"\"\r\n        :type s: str\r\n        :type e: str\r\n        :type gra: str\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your LogSystem object will be instantiated and called as such:\r\n# obj = LogSystem()\r\n# obj.put(id,timestamp)\r\n# param_2 = obj.retrieve(s,e,gra)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} LogSystem;\n\nLogSystem* logSystemCreate() {\n    \n}\n\nvoid logSystemPut(LogSystem* obj, int id, char* timestamp) {\n    \n}\n\nint* logSystemRetrieve(LogSystem* obj, char* s, char* e, char* gra, int *returnSize) {\n    \n}\n\nvoid logSystemFree(LogSystem* obj) {\n    \n}\n\n/**\n * Your LogSystem struct will be instantiated and called as such:\n * struct LogSystem* obj = logSystemCreate();\n * logSystemPut(obj, id, timestamp);\n * int* param_2 = logSystemRetrieve(obj, s, e, gra);\n * logSystemFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class LogSystem {\r\n\r\n    public LogSystem() {\r\n        \r\n    }\r\n    \r\n    public void Put(int id, string timestamp) {\r\n        \r\n    }\r\n    \r\n    public IList<int> Retrieve(string s, string e, string gra) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your LogSystem object will be instantiated and called as such:\r\n * LogSystem obj = new LogSystem();\r\n * obj.Put(id,timestamp);\r\n * IList<int> param_2 = obj.Retrieve(s,e,gra);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\r\nvar LogSystem = function() {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} id \r\n * @param {string} timestamp\r\n * @return {void}\r\n */\r\nLogSystem.prototype.put = function(id, timestamp) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {string} s \r\n * @param {string} e \r\n * @param {string} gra\r\n * @return {number[]}\r\n */\r\nLogSystem.prototype.retrieve = function(s, e, gra) {\r\n    \r\n};\r\n\r\n/** \r\n * Your LogSystem object will be instantiated and called as such:\r\n * var obj = Object.create(LogSystem).createNew()\r\n * obj.put(id,timestamp)\r\n * var param_2 = obj.retrieve(s,e,gra)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class LogSystem\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type id: Integer\r\n    :type timestamp: String\r\n    :rtype: Void\r\n=end\r\n    def put(id, timestamp)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type s: String\r\n    :type e: String\r\n    :type gra: String\r\n    :rtype: Integer[]\r\n=end\r\n    def retrieve(s, e, gra)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your LogSystem object will be instantiated and called as such:\r\n# obj = LogSystem.new()\r\n# obj.put(id, timestamp)\r\n# param_2 = obj.retrieve(s, e, gra)"},{"value":"swift","text":"Swift","defaultCode":"\nclass LogSystem {\n\n    init() {\n        \n    }\n    \n    func put(_ id: Int, _ timestamp: String) {\n      \n    }\n    \n    func retrieve(_ s: String, _ e: String, _ gra: String) -> [Int] {\n      \n    }\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * let obj = LogSystem()\n * obj.put(id, timestamp)\n * let ret_2: [Int] = obj.retrieve(s, e, gra)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type LogSystem struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor() LogSystem {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LogSystem) Put(id int, timestamp string)  {\r\n    \r\n}\r\n\r\n\r\nfunc (this *LogSystem) Retrieve(s string, e string, gra string) []int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your LogSystem object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * obj.Put(id,timestamp);\r\n * param_2 := obj.Retrieve(s,e,gra);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class LogSystem() {\n\n    def put(id: Int, timestamp: String) {\n        \n    }\n\n    def retrieve(s: String, e: String, gra: String): List[Int] = {\n        \n    }\n\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * var obj = new LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(s,e,gra)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class LogSystem() {\n\n    fun put(id: Int, timestamp: String) {\n        \n    }\n\n    fun retrieve(s: String, e: String, gra: String): List<Int> {\n        \n    }\n\n}\n\n/**\n * Your LogSystem object will be instantiated and called as such:\n * var obj = LogSystem()\n * obj.put(id,timestamp)\n * var param_2 = obj.retrieve(s,e,gra)\n */"}],"testcase":"[\"LogSystem\",\"put\",\"put\",\"put\",\"retrieve\",\"retrieve\"]\n[[],[1,\"2017:01:01:23:59:59\"],[2,\"2017:01:01:22:59:59\"],[3,\"2016:01:01:00:00:00\"],[\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Year\"],[\"2016:01:01:01:01:01\",\"2017:01:01:23:00:00\",\"Hour\"]]","testable":true,"templateMeta":{"classname":"LogSystem","maxbytesperline":200000,"constructor":{"params":[]},"methods":[{"name":"put","params":[{"type":"integer","name":"id"},{"type":"string","name":"timestamp"}],"return":{"type":"void"}},{"name":"retrieve","params":[{"type":"string","name":"s"},{"type":"string","name":"e"},{"type":"string","name":"gra"}],"return":{"type":"list<integer>"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}