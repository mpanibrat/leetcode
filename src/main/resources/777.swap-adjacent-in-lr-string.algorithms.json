{"id":793,"fid":777,"name":"Swap Adjacent in LR String","slug":"swap-adjacent-in-lr-string","link":"https://leetcode.com/problems/swap-adjacent-in-lr-string/description/","percent":30.017062606641293,"level":"Medium","category":"algorithms","totalAC":"6.9K","totalSubmit":"22.9K","desc":"In a string composed of 'L', 'R', and 'X' characters, like \"RXXLRXRXL\", a move consists of either replacing one occurrence of \"XL\" with \"LX\", or replacing one occurrence of \"RX\" with \"XR\". Given the starting string start and the ending string end, return True if and only if there exists a sequence of moves to transform one string to the other.\r\n\r\nExample:\r\n\r\n\r\nInput: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\r\nOutput: True\r\nExplanation:\r\nWe can transform start to end following these steps:\r\nRXXLRXRXL ->\r\nXRXLRXRXL ->\r\nXRLXRXRXL ->\r\nXRLXXRRXL ->\r\nXRLXXRRLX\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= len(start) = len(end) <= 10000.\r\n\tBoth start and end will only consist of characters in {'L', 'R', 'X'}.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool canTransform(string start, string end) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean canTransform(String start, String end) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def canTransform(self, start, end):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def canTransform(self, start, end):\n        \"\"\"\n        :type start: str\n        :type end: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool canTransform(char* start, char* end) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool CanTransform(string start, string end) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} start\n * @param {string} end\n * @return {boolean}\n */\nvar canTransform = function(start, end) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} start\n# @param {String} end\n# @return {Boolean}\ndef can_transform(start, end)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canTransform(_ start: String, _ end: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canTransform(start string, end string) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canTransform(start: String, end: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canTransform(start: String, end: String): Boolean {\n        \n    }\n}"}],"testcase":"\"X\"\n\"L\"","testable":true,"templateMeta":{"name":"canTransform","params":[{"name":"start","type":"string"},{"name":"end","type":"string"}],"return":{"type":"boolean"}}}