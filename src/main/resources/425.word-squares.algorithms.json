{"id":425,"fid":425,"name":"Word Squares","slug":"word-squares","link":"https://leetcode.com/problems/word-squares/description/","percent":43.0622009569378,"level":"Hard","category":"algorithms","totalAC":"19.5K","totalSubmit":"45.4K","desc":"Given a set of words (without duplicates), find all word squares you can build from them.\r\n\r\nA sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 â‰¤ k < max(numRows, numColumns).\r\n\r\nFor example, the word sequence [\"ball\",\"area\",\"lead\",\"lady\"] forms a word square because each word reads the same both horizontally and vertically.\r\n\r\n\r\nb a l l\r\na r e a\r\nl e a d\r\nl a d y\r\n\r\n\r\nNote:\r\n\r\nThere are at least 1 and at most 1000 words.\r\nAll words will have the exact same length.\r\nWord length is at least 1 and at most 5.\r\nEach word contains only lowercase English alphabet a-z.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput:\r\n[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]\r\n\r\nOutput:\r\n[\r\n  [ \"wall\",\r\n    \"area\",\r\n    \"lead\",\r\n    \"lady\"\r\n  ],\r\n  [ \"ball\",\r\n    \"area\",\r\n    \"lead\",\r\n    \"lady\"\r\n  ]\r\n]\r\n\r\nExplanation:\r\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput:\r\n[\"abat\",\"baba\",\"atan\",\"atal\"]\r\n\r\nOutput:\r\n[\r\n  [ \"baba\",\r\n    \"abat\",\r\n    \"baba\",\r\n    \"atan\"\r\n  ],\r\n  [ \"baba\",\r\n    \"abat\",\r\n    \"baba\",\r\n    \"atal\"\r\n  ]\r\n]\r\n\r\nExplanation:\r\nThe output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<string>> wordSquares(vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<String>> wordSquares(String[] words) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def wordSquares(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: List[List[str]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def wordSquares(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nchar*** wordSquares(char** words, int wordsSize, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<string>> WordSquares(string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n * @return {string[][]}\r\n */\r\nvar wordSquares = function(words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\r\n# @return {String[][]}\r\ndef word_squares(words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordSquares(_ words: [String]) -> [[String]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordSquares(words []string) [][]string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def wordSquares(words: Array[String]): List[List[String]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun wordSquares(words: Array<String>): List<List<String>> {\n        \n    }\n}"}],"testcase":"[\"area\",\"lead\",\"wall\",\"lady\",\"ball\"]","testable":true,"templateMeta":{"name":"wordSquares","params":[{"name":"words","type":"string[]"}],"return":{"type":"list<list<string>>"}}}