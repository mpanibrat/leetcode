{"id":850,"fid":708,"name":"Insert into a Cyclic Sorted List","slug":"insert-into-a-cyclic-sorted-list","link":"https://leetcode.com/problems/insert-into-a-cyclic-sorted-list/description/","percent":25.35588442565187,"level":"Medium","category":"algorithms","totalAC":"5.4K","totalSubmit":"21.3K","desc":"Given a node from a cyclic linked list which is sorted in ascending order, write a function to insert a value into the list such that it remains a cyclic sorted list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the cyclic list.\r\n\r\nIf there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the cyclic list should remain sorted.\r\n\r\nIf the list is empty (i.e., given node is null), you should create a new single cyclic list and return the reference to that single node. Otherwise, you should return the original given node.\r\n\r\nThe following example may help you understand the problem better:\r\n\r\n \r\n\r\n\r\n\r\nIn the figure above, there is a cyclic sorted list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list.\r\n\r\n \r\n\r\n\r\n\r\nThe new node should insert between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\npublic:\r\n    int val;\r\n    Node* next;\r\n\r\n    Node() {}\r\n\r\n    Node(int _val, Node* _next) {\r\n        val = _val;\r\n        next = _next;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\npublic:\r\n    Node* insert(Node* head, int insertVal) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/*\r\n// Definition for a Node.\r\nclass Node {\r\n    public int val;\r\n    public Node next;\r\n\r\n    public Node() {}\r\n\r\n    public Node(int _val,Node _next) {\r\n        val = _val;\r\n        next = _next;\r\n    }\r\n};\r\n*/\r\nclass Solution {\r\n    public Node insert(Node head, int insertVal) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"\"\"\"\r\n# Definition for a Node.\r\nclass Node(object):\r\n    def __init__(self, val, next):\r\n        self.val = val\r\n        self.next = next\r\n\"\"\"\r\nclass Solution(object):\r\n    def insert(self, head, insertVal):\r\n        \"\"\"\r\n        :type head: Node\r\n        :type insertVal: int\r\n        :rtype: Node\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"\"\"\"\r\n# Definition for a Node.\r\nclass Node:\r\n    def __init__(self, val, next):\r\n        self.val = val\r\n        self.next = next\r\n\"\"\"\r\nclass Solution:\r\n    def insert(self, head, insertVal):\r\n        \"\"\"\r\n        :type head: Node\r\n        :type insertVal: int\r\n        :rtype: Node\r\n        \"\"\"\r\n        "},{"value":"csharp","text":"C#","defaultCode":"/*\r\n// Definition for a Node.\r\npublic class Node {\r\n    public int val;\r\n    public Node next;\r\n\r\n    public Node(){}\r\n    public Node(int _val,Node _next) {\r\n        val = _val;\r\n        next = _next;\r\n}\r\n*/\r\npublic class Solution {\r\n    public Node Insert(Node head, int insertVal) {\r\n        \r\n    }\r\n}"}],"testcase":"{\"$id\":\"1\",\"next\":{\"$id\":\"2\",\"next\":{\"$id\":\"3\",\"next\":{\"$ref\":\"1\"},\"val\":3},\"val\":3},\"val\":3}\n0","testable":true,"templateMeta":{"name":"insert","params":[{"name":"head","type":"Node"},{"name":"insertVal","type":"integer"}],"return":{"type":"Node"},"structures":[{"name":"Node","comment":"Definition for a Node.","members":[{"name":"val","type":"integer"},{"name":"next","type":"Node"}]}]}}