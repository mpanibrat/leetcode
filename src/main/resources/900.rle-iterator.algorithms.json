{"id":936,"fid":900,"name":"RLE Iterator","slug":"rle-iterator","link":"https://leetcode.com/problems/rle-iterator/description/","percent":43.68310024220642,"level":"Medium","category":"algorithms","totalAC":"5.6K","totalSubmit":"12.8K","desc":"Write an iterator that iterates through a run-length encoded sequence.\r\n\r\nThe iterator is initialized by RLEIterator(int[] A), where A is a run-length encoding of some sequence.  More specifically, for all even i, A[i] tells us the number of times that the non-negative integer value A[i+1] is repeated in the sequence.\r\n\r\nThe iterator supports one function: next(int n), which exhausts the next n elements (n >= 1) and returns the last element exhausted in this way.  If there is no element left to exhaust, next returns -1 instead.\r\n\r\nFor example, we start with A = [3,8,0,9,2,5], which is a run-length encoding of the sequence [8,8,8,5,5].  This is because the sequence can be read as \"three eights, zero nines, two fives\".\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"RLEIterator\",\"next\",\"next\",\"next\",\"next\"], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\r\nOutput: [null,8,8,5,-1]\r\nExplanation: \r\nRLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\r\nThis maps to the sequence [8,8,8,5,5].\r\nRLEIterator.next is then called 4 times:\r\n\r\n.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\r\n\r\n.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\r\n\r\n.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\r\nbut the second term did not exist.  Since the last term exhausted does not exist, we return -1.\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\t0 <= A.length <= 1000\r\n\tA.length is an even integer.\r\n\t0 <= A[i] <= 10^9\r\n\tThere are at most 1000 calls to RLEIterator.next(int n) per test case.\r\n\tEach call to RLEIterator.next(int n) will have 1 <= n <= 10^9.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class RLEIterator {\r\npublic:\r\n    RLEIterator(vector<int> A) {\r\n        \r\n    }\r\n    \r\n    int next(int n) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your RLEIterator object will be instantiated and called as such:\r\n * RLEIterator obj = new RLEIterator(A);\r\n * int param_1 = obj.next(n);\r\n */"},{"value":"java","text":"Java","defaultCode":"class RLEIterator {\r\n\r\n    public RLEIterator(int[] A) {\r\n        \r\n    }\r\n    \r\n    public int next(int n) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RLEIterator object will be instantiated and called as such:\r\n * RLEIterator obj = new RLEIterator(A);\r\n * int param_1 = obj.next(n);\r\n */"},{"value":"python","text":"Python","defaultCode":"class RLEIterator(object):\r\n\r\n    def __init__(self, A):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def next(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your RLEIterator object will be instantiated and called as such:\r\n# obj = RLEIterator(A)\r\n# param_1 = obj.next(n)"},{"value":"python3","text":"Python3","defaultCode":"class RLEIterator:\r\n\r\n    def __init__(self, A):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def next(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your RLEIterator object will be instantiated and called as such:\r\n# obj = RLEIterator(A)\r\n# param_1 = obj.next(n)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} RLEIterator;\r\n\r\nRLEIterator* rLEIteratorCreate(int* A) {\r\n    \r\n}\r\n\r\nint rLEIteratorNext(RLEIterator* obj, int n) {\r\n    \r\n}\r\n\r\nvoid rLEIteratorFree(RLEIterator* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your RLEIterator struct will be instantiated and called as such:\r\n * struct RLEIterator* obj = rLEIteratorCreate(A);\r\n * int param_1 = rLEIteratorNext(obj, n);\r\n * rLEIteratorFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class RLEIterator {\r\n\r\n    public RLEIterator(int[] A) {\r\n        \r\n    }\r\n    \r\n    public int Next(int n) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your RLEIterator object will be instantiated and called as such:\r\n * RLEIterator obj = new RLEIterator(A);\r\n * int param_1 = obj.Next(n);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} A\r\n */\r\nvar RLEIterator = function(A) {\r\n    \r\n};\r\n\r\n/** \r\n * @param {number} n\r\n * @return {number}\r\n */\r\nRLEIterator.prototype.next = function(n) {\r\n    \r\n};\r\n\r\n/** \r\n * Your RLEIterator object will be instantiated and called as such:\r\n * var obj = Object.create(RLEIterator).createNew(A)\r\n * var param_1 = obj.next(n)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class RLEIterator\r\n\r\n=begin\r\n    :type a: Integer[]\r\n=end\r\n    def initialize(a)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :type n: Integer\r\n    :rtype: Integer\r\n=end\r\n    def next(n)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your RLEIterator object will be instantiated and called as such:\r\n# obj = RLEIterator.new(a)\r\n# param_1 = obj.next(n)"},{"value":"swift","text":"Swift","defaultCode":"\nclass RLEIterator {\n\n    init(_ A: [Int]) {\n        \n    }\n    \n    func next(_ n: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your RLEIterator object will be instantiated and called as such:\n * let obj = RLEIterator(A)\n * let ret_1: Int = obj.next(n)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type RLEIterator struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(A []int) RLEIterator {\r\n    \r\n}\r\n\r\n\r\nfunc (this *RLEIterator) Next(n int) int {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your RLEIterator object will be instantiated and called as such:\r\n * obj := Constructor(A);\r\n * param_1 := obj.Next(n);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class RLEIterator(_A: Array[Int]) {\r\n\r\n    def next(n: Int): Int = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your RLEIterator object will be instantiated and called as such:\r\n * var obj = new RLEIterator(A)\r\n * var param_1 = obj.next(n)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class RLEIterator(A: IntArray) {\r\n\r\n    fun next(n: Int): Int {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your RLEIterator object will be instantiated and called as such:\r\n * var obj = RLEIterator(A)\r\n * var param_1 = obj.next(n)\r\n */"}],"testcase":"[\"RLEIterator\",\"next\",\"next\",\"next\",\"next\"]\n[[[3,8,0,9,2,5]],[2],[1],[1],[2]]","testable":true,"templateMeta":{"classname":"RLEIterator","maxbytesperline":200000,"constructor":{"params":[{"type":"integer[]","name":"A"}]},"methods":[{"name":"next","params":[{"type":"integer","name":"n"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}