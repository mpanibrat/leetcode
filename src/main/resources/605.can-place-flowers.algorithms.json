{"id":605,"fid":605,"name":"Can Place Flowers","slug":"can-place-flowers","link":"https://leetcode.com/problems/can-place-flowers/description/","percent":30.140619425540365,"level":"Easy","category":"algorithms","totalAC":"44.8K","totalSubmit":"148.6K","desc":"Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.\r\n\r\nGiven a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.\r\n\r\nExample 1:\r\n\r\nInput: flowerbed = [1,0,0,0,1], n = 1\r\nOutput: True\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: flowerbed = [1,0,0,0,1], n = 2\r\nOutput: False\r\n\r\n\r\n\r\nNote:\r\n\r\nThe input array won't violate no-adjacent-flowers rule.\r\nThe input array size is in the range of [1, 20000].\r\nn is a non-negative integer which won't exceed the input array size.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool canPlaceFlowers(vector<int>& flowerbed, int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def canPlaceFlowers(self, flowerbed, n):\r\n        \"\"\"\r\n        :type flowerbed: List[int]\r\n        :type n: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def canPlaceFlowers(self, flowerbed, n):\r\n        \"\"\"\r\n        :type flowerbed: List[int]\r\n        :type n: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool canPlaceFlowers(int* flowerbed, int flowerbedSize, int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CanPlaceFlowers(int[] flowerbed, int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} flowerbed\r\n * @param {number} n\r\n * @return {boolean}\r\n */\r\nvar canPlaceFlowers = function(flowerbed, n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} flowerbed\r\n# @param {Integer} n\r\n# @return {Boolean}\r\ndef can_place_flowers(flowerbed, n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canPlaceFlowers(_ flowerbed: [Int], _ n: Int) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canPlaceFlowers(flowerbed []int, n int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canPlaceFlowers(flowerbed: Array[Int], n: Int): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canPlaceFlowers(flowerbed: IntArray, n: Int): Boolean {\n        \n    }\n}"}],"testcase":"[1,0,0,0,1]\n1","testable":true,"templateMeta":{"name":"canPlaceFlowers","params":[{"name":"flowerbed","type":"integer[]"},{"name":"n","type":"integer"}],"return":{"type":"boolean"}}}