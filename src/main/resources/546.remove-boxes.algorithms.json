{"id":546,"fid":546,"name":"Remove Boxes","slug":"remove-boxes","link":"https://leetcode.com/problems/remove-boxes/description/","percent":36.643082512668514,"level":"Hard","category":"algorithms","totalAC":"7.7K","totalSubmit":"20.9K","desc":"Given several boxes with different colors represented by different positive numbers. \r\nYou may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (composed of k boxes, k >= 1), remove them and get k*k points.\r\nFind the maximum points you can get.\r\n\r\n\r\nExample 1:\r\nInput: \r\n\r\n[1, 3, 2, 2, 2, 3, 4, 3, 1]\r\n\r\nOutput:\r\n\r\n23\r\n\r\nExplanation: \r\n\r\n[1, 3, 2, 2, 2, 3, 4, 3, 1] \r\n----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \r\n----> [1, 3, 3, 3, 1] (1*1=1 points) \r\n----> [1, 1] (3*3=9 points) \r\n----> [] (2*2=4 points)\r\n\r\n\r\n\r\nNote:\r\nThe number of boxes n would not exceed 100.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int removeBoxes(vector<int>& boxes) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int removeBoxes(int[] boxes) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def removeBoxes(self, boxes):\n        \"\"\"\n        :type boxes: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def removeBoxes(self, boxes):\n        \"\"\"\n        :type boxes: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int removeBoxes(int* boxes, int boxesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int RemoveBoxes(int[] boxes) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} boxes\n * @return {number}\n */\nvar removeBoxes = function(boxes) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} boxes\n# @return {Integer}\ndef remove_boxes(boxes)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func removeBoxes(_ boxes: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func removeBoxes(boxes []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def removeBoxes(boxes: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun removeBoxes(boxes: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,3,2,2,2,3,4,3,1]","testable":true,"templateMeta":{"name":"removeBoxes","params":[{"name":"boxes","type":"integer[]"}],"return":{"type":"integer"}}}