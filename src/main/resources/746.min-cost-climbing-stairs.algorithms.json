{"id":747,"fid":746,"name":"Min Cost Climbing Stairs","slug":"min-cost-climbing-stairs","link":"https://leetcode.com/problems/min-cost-climbing-stairs/description/","percent":44.373743538196436,"level":"Easy","category":"algorithms","totalAC":"49.4K","totalSubmit":"111.4K","desc":"\r\nOn a staircase, the i-th step has some non-negative cost cost[i] assigned (0 indexed).\r\n\r\nOnce you pay the cost, you can either climb one or two steps. You need to find minimum cost to reach the top of the floor, and you can either start from the step with index 0, or the step with index 1.\r\n\r\n\r\nExample 1:\r\n\r\nInput: cost = [10, 15, 20]\r\nOutput: 15\r\nExplanation: Cheapest is start on cost[1], pay that cost and go to the top.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\r\nOutput: 6\r\nExplanation: Cheapest is start on cost[0], and only step on 1s, skipping cost[3].\r\n\r\n\r\n\r\nNote:\r\n\r\ncost will have a length in the range [2, 1000].\r\nEvery cost[i] will be an integer in the range [0, 999].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minCostClimbingStairs(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minCostClimbingStairs(self, cost):\n        \"\"\"\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int minCostClimbingStairs(int* cost, int costSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinCostClimbingStairs(int[] cost) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} cost\n * @return {number}\n */\nvar minCostClimbingStairs = function(cost) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} cost\n# @return {Integer}\ndef min_cost_climbing_stairs(cost)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minCostClimbingStairs(_ cost: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minCostClimbingStairs(cost []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minCostClimbingStairs(cost: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minCostClimbingStairs(cost: IntArray): Int {\n        \n    }\n}"}],"testcase":"[0,0,0,0]","testable":true,"templateMeta":{"name":"minCostClimbingStairs","params":[{"name":"cost","type":"integer[]"}],"return":{"type":"integer"}}}