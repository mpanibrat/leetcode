{"id":401,"fid":401,"name":"Binary Watch","slug":"binary-watch","link":"https://leetcode.com/problems/binary-watch/description/","percent":44.73650198714014,"level":"Easy","category":"algorithms","totalAC":"55.4K","totalSubmit":"123.8K","desc":"A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).\r\nEach LED represents a zero or one, with the least significant bit on the right.\r\n\r\nFor example, the above binary watch reads \"3:25\".\r\n\r\nGiven a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.\r\n\r\nExample:\r\nInput: n = 1Return: [\"1:00\", \"2:00\", \"4:00\", \"8:00\", \"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\"]\r\n\r\n\r\nNote:\r\n\r\nThe order of output does not matter.\r\nThe hour must not contain a leading zero, for example \"01:00\" is not valid, it should be \"1:00\".\r\nThe minute must be consist of two digits and may contain a leading zero, for example \"10:2\" is not valid, it should be \"10:02\".\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> readBinaryWatch(int num) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> readBinaryWatch(int num) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def readBinaryWatch(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def readBinaryWatch(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** readBinaryWatch(int num, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> ReadBinaryWatch(int num) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} num\r\n * @return {string[]}\r\n */\r\nvar readBinaryWatch = function(num) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\r\n# @return {String[]}\r\ndef read_binary_watch(num)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func readBinaryWatch(_ num: Int) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func readBinaryWatch(num int) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def readBinaryWatch(num: Int): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun readBinaryWatch(num: Int): List<String> {\n        \n    }\n}"}],"testcase":"0","testable":true,"templateMeta":{"name":"readBinaryWatch","params":[{"name":"num","type":"integer"}],"return":{"type":"list<string>"}}}