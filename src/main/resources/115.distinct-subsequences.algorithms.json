{"id":115,"fid":115,"name":"Distinct Subsequences","slug":"distinct-subsequences","link":"https://leetcode.com/problems/distinct-subsequences/description/","percent":33.550017927572604,"level":"Hard","category":"algorithms","totalAC":"93.6K","totalSubmit":"278.9K","desc":"Given a string S and a string T, count the number of distinct subsequences of S which equals T.\r\n\r\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ACE\" is a subsequence of \"ABCDE\" while \"AEC\" is not).\r\n\r\nExample 1:\r\n\r\n\r\nInput: S = \"rabbbit\", T = \"rabbit\"\r\nOutput: 3\r\nExplanation:\r\n\r\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\r\n(The caret symbol ^ means the chosen letters)\r\n\r\nrabbbit\r\n^^^^ ^^\r\nrabbbit\r\n^^ ^^^^\r\nrabbbit\r\n^^^ ^^^\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: S = \"babgbag\", T = \"bag\"\r\nOutput: 5\r\nExplanation:\r\n\r\nAs shown below, there are 5 ways you can generate \"bag\" from S.\r\n(The caret symbol ^ means the chosen letters)\r\n\r\nbabgbag\r\n^^ ^\r\nbabgbag\r\n^^    ^\r\nbabgbag\r\n^    ^^\r\nbabgbag\r\n  ^  ^^\r\nbabgbag\r\n    ^^^\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int numDistinct(string s, string t) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int numDistinct(String s, String t) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def numDistinct(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def numDistinct(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int numDistinct(char* s, char* t) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int NumDistinct(string s, string t) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {number}\r\n */\r\nvar numDistinct = function(s, t) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String} t\r\n# @return {Integer}\r\ndef num_distinct(s, t)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numDistinct(_ s: String, _ t: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numDistinct(s string, t string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def numDistinct(s: String, t: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun numDistinct(s: String, t: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"rabbbit\"\n\"rabbit\"","testable":true,"templateMeta":{"name":"numDistinct","params":[{"name":"s","type":"string"},{"name":"t","type":"string"}],"return":{"type":"integer"}}}