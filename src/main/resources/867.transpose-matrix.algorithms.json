{"id":898,"fid":867,"name":"Transpose Matrix","slug":"transpose-matrix","link":"https://leetcode.com/problems/transpose-matrix/description/","percent":63.2969871587889,"level":"Easy","category":"algorithms","totalAC":"25.5K","totalSubmit":"40.3K","desc":"Given a matrix A, return the transpose of A.\r\n\r\nThe transpose of a matrix is the matrix flipped over it's main diagonal, switching the row and column indices of the matrix.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[1,2,3],[4,5,6],[7,8,9]]\r\nOutput: [[1,4,7],[2,5,8],[3,6,9]]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1,2,3],[4,5,6]]\r\nOutput: [[1,4],[2,5],[3,6]]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 1000\r\n\t1 <= A[0].length <= 1000\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> transpose(vector<vector<int>>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[][] transpose(int[][] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def transpose(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *columnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** transpose(int** A, int ARowSize, int *AColSizes, int** columnSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[][] Transpose(int[][] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} A\n * @return {number[][]}\n */\nvar transpose = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} a\n# @return {Integer[][]}\ndef transpose(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func transpose(_ A: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func transpose(A [][]int) [][]int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def transpose(A: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun transpose(A: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}],"testcase":"[[1,2,3],[4,5,6],[7,8,9]]","testable":true,"templateMeta":{"name":"transpose","params":[{"name":"A","type":"integer[][]"}],"return":{"type":"integer[][]"}}}