{"id":760,"fid":758,"name":"Bold Words in String","slug":"bold-words-in-string","link":"https://leetcode.com/problems/bold-words-in-string/description/","percent":40.35148894623056,"level":"Easy","category":"algorithms","totalAC":"5.8K","totalSubmit":"14.3K","desc":"\r\nGiven a set of keywords words and a string S, make all appearances of all keywords in S bold.  Any letters between <b> and </b> tags become bold.\r\n\r\nThe returned string should use the least number of tags possible, and of course the tags should form a valid combination.\r\n\r\n\r\nFor example, given that words = [\"ab\", \"bc\"] and  S = \"aabcd\", we should return \"a<b>abc</b>d\".  Note that returning \"a<b>a<b>b</b>c</b>d\" would use more tags, so it is incorrect.\r\n\r\n\r\nNote:\r\nwords has length in range [0, 50].\r\nwords[i] has length in range [1, 10].\r\nS has length in range [0, 500].\r\nAll characters in words[i] and S are lowercase letters.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string boldWords(vector<string>& words, string S) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String boldWords(String[] words, String S) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def boldWords(self, words, S):\n        \"\"\"\n        :type words: List[str]\n        :type S: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def boldWords(self, words, S):\n        \"\"\"\n        :type words: List[str]\n        :type S: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* boldWords(char** words, int wordsSize, char* S) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string BoldWords(string[] words, string S) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} words\n * @param {string} S\n * @return {string}\n */\nvar boldWords = function(words, S) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\n# @param {String} s\n# @return {String}\ndef bold_words(words, s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func boldWords(_ words: [String], _ S: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func boldWords(words []string, S string) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def boldWords(words: Array[String], S: String): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun boldWords(words: Array<String>, S: String): String {\n        \n    }\n}"}],"testcase":"[\"ab\",\"bc\"]\n\"aabcd\"","testable":true,"templateMeta":{"name":"boldWords","params":[{"name":"words","type":"string[]"},{"name":"S","type":"string"}],"return":{"type":"string"}}}