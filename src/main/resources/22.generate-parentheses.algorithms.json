{"id":22,"fid":22,"name":"Generate Parentheses","slug":"generate-parentheses","link":"https://leetcode.com/problems/generate-parentheses/description/","percent":50.94127668220483,"level":"Medium","category":"algorithms","totalAC":"260.7K","totalSubmit":"511.9K","desc":"\r\nGiven n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\r\n\r\n\r\n\r\nFor example, given n = 3, a solution set is:\r\n\r\n\r\n[\r\n  \"((()))\",\r\n  \"(()())\",\r\n  \"(())()\",\r\n  \"()(())\",\r\n  \"()()()\"\r\n]\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> generateParenthesis(int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> generateParenthesis(int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def generateParenthesis(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** generateParenthesis(int n, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> GenerateParenthesis(int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @return {string[]}\r\n */\r\nvar generateParenthesis = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @return {String[]}\r\ndef generate_parenthesis(n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generateParenthesis(_ n: Int) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func generateParenthesis(n int) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def generateParenthesis(n: Int): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun generateParenthesis(n: Int): List<String> {\n        \n    }\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"generateParenthesis","params":[{"name":"n","type":"integer"}],"return":{"type":"list<string>"}}}