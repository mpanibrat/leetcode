{"id":685,"fid":685,"name":"Redundant Connection II","slug":"redundant-connection-ii","link":"https://leetcode.com/problems/redundant-connection-ii/description/","percent":28.74409267701058,"level":"Hard","category":"algorithms","totalAC":"13.7K","totalSubmit":"47.8K","desc":"\r\nIn this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.\r\n\r\nThe given input is a directed graph that started as a rooted tree with N nodes (with distinct values 1, 2, ..., N), with one additional directed edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.\r\n\r\nThe resulting graph is given as a 2D-array of edges.  Each element of edges is a pair [u, v] that represents a directed edge connecting nodes u and v, where u is a parent of child v.\r\n\r\nReturn an edge that can be removed so that the resulting graph is a rooted tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.\r\nExample 1:\r\n\r\nInput: [[1,2], [1,3], [2,3]]\r\nOutput: [2,3]\r\nExplanation: The given directed graph will be like this:\r\n  1\r\n / \\\r\nv   v\r\n2-->3\r\n\r\n\r\nExample 2:\r\n\r\nInput: [[1,2], [2,3], [3,4], [4,1], [1,5]]\r\nOutput: [4,1]\r\nExplanation: The given directed graph will be like this:\r\n5  2\r\n     ^    |\r\n     |    v\r\n     4 \r\n\r\nNote:\r\nThe size of the input 2D-array will be between 3 and 1000.\r\nEvery integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[] findRedundantDirectedConnection(int[][] edges) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findRedundantDirectedConnection(self, edges):\r\n        \"\"\"\r\n        :type edges: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findRedundantDirectedConnection(self, edges):\r\n        \"\"\"\r\n        :type edges: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findRedundantDirectedConnection(int** edges, int edgesRowSize, int edgesColSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[] FindRedundantDirectedConnection(int[,] edges) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} edges\r\n * @return {number[]}\r\n */\r\nvar findRedundantDirectedConnection = function(edges) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} edges\r\n# @return {Integer[]}\r\ndef find_redundant_directed_connection(edges)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findRedundantDirectedConnection(_ edges: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findRedundantDirectedConnection(edges [][]int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findRedundantDirectedConnection(edges: Array[Array[Int]]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findRedundantDirectedConnection(edges: Array<IntArray>): IntArray {\n        \n    }\n}"}],"testcase":"[[1,2],[1,3],[2,3]]","testable":true,"templateMeta":{"name":"findRedundantDirectedConnection","params":[{"name":"edges","type":"integer[][]"}],"return":{"type":"integer[]"}}}