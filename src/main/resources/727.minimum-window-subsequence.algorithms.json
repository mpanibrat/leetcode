{"id":727,"fid":727,"name":"Minimum Window Subsequence","slug":"minimum-window-subsequence","link":"https://leetcode.com/problems/minimum-window-subsequence/description/","percent":33.44479250994333,"level":"Hard","category":"algorithms","totalAC":"9.5K","totalSubmit":"28.4K","desc":"Given strings S and T, find the minimum (contiguous) substring W of S, so that T is a subsequence of W.\r\n\r\nIf there is no such window in S that covers all characters in T, return the empty string \"\". If there are multiple such minimum-length windows, return the one with the left-most starting index.\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\nS = \"abcdebdde\", T = \"bde\"\r\nOutput: \"bcde\"\r\nExplanation: \r\n\"bcde\" is the answer because it occurs before \"bdde\" which has the same length.\r\n\"deb\" is not a smaller window because the elements of T in the window must occur in order.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tAll the strings in the input will only contain lowercase letters.\r\n\tThe length of S will be in the range [1, 20000].\r\n\tThe length of T will be in the range [1, 100].\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string minWindow(string S, string T) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String minWindow(String S, String T) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minWindow(self, S, T):\r\n        \"\"\"\r\n        :type S: str\r\n        :type T: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minWindow(self, S, T):\r\n        \"\"\"\r\n        :type S: str\r\n        :type T: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* minWindow(char* S, char* T) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string MinWindow(string S, string T) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} S\r\n * @param {string} T\r\n * @return {string}\r\n */\r\nvar minWindow = function(S, T) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String} t\r\n# @return {String}\r\ndef min_window(s, t)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minWindow(_ S: String, _ T: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minWindow(S string, T string) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minWindow(S: String, T: String): String = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minWindow(S: String, T: String): String {\r\n        \r\n    }\r\n}"}],"testcase":"\"abcdebdde\"\n\"bde\"","testable":true,"templateMeta":{"name":"minWindow","params":[{"name":"S","type":"string"},{"name":"T","type":"string"}],"return":{"type":"string"}}}