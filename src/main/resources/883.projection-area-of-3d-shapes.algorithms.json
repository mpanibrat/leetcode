{"id":919,"fid":883,"name":"Projection Area of 3D Shapes","slug":"projection-area-of-3d-shapes","link":"https://leetcode.com/problems/projection-area-of-3d-shapes/description/","percent":64.52837232453957,"level":"Easy","category":"algorithms","totalAC":"10.4K","totalSubmit":"16.1K","desc":"On a N * N grid, we place some 1 * 1 * 1 cubes that are axis-aligned with the x, y, and z axes.\r\n\r\nEach value v = grid[i][j] represents a tower of v cubes placed on top of grid cell (i, j).\r\n\r\nNow we view the projection of these cubes onto the xy, yz, and zx planes.\r\n\r\nA projection is like a shadow, that maps our 3 dimensional figure to a 2 dimensional plane. \r\n\r\nHere, we are viewing the \"shadow\" when looking at the cubes from the top, the front, and the side.\r\n\r\nReturn the total area of all three projections.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[2]]\r\nOutput: 5\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1,2],[3,4]]\r\nOutput: 17\r\nExplanation: \r\nHere are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\r\n\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [[1,0],[0,2]]\r\nOutput: 8\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: [[1,1,1],[1,0,1],[1,1,1]]\r\nOutput: 14\r\n\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: [[2,2,2],[2,1,2],[2,2,2]]\r\nOutput: 21\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= grid.length = grid[0].length <= 50\r\n\t0 <= grid[i][j] <= 50\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int projectionArea(vector<vector<int>>& grid) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int projectionArea(int[][] grid) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def projectionArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def projectionArea(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int projectionArea(int** grid, int gridRowSize, int *gridColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int ProjectionArea(int[][] grid) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} grid\n * @return {number}\n */\nvar projectionArea = function(grid) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} grid\n# @return {Integer}\ndef projection_area(grid)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func projectionArea(_ grid: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func projectionArea(grid [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def projectionArea(grid: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun projectionArea(grid: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[2]]","testable":true,"templateMeta":{"name":"projectionArea","params":[{"name":"grid","type":"integer[][]"}],"return":{"type":"integer"}}}