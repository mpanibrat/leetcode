{"id":686,"fid":686,"name":"Repeated String Match","slug":"repeated-string-match","link":"https://leetcode.com/problems/repeated-string-match/description/","percent":31.313937179107743,"level":"Easy","category":"algorithms","totalAC":"48.7K","totalSubmit":"155.4K","desc":"Given two strings A and B, find the minimum number of times A has to be repeated such that B is a substring of it. If no such solution, return -1.\r\n\r\nFor example, with A = \"abcd\" and B = \"cdabcdab\".\r\n\r\nReturn 3, because by repeating A three times (“abcdabcdabcd”), B is a substring of it; and B is not a substring of A repeated two times (\"abcdabcd\").\r\n\r\nNote:\r\nThe length of A and B will be between 1 and 10000.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int repeatedStringMatch(string A, string B) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int repeatedStringMatch(String A, String B) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def repeatedStringMatch(self, A, B):\r\n        \"\"\"\r\n        :type A: str\r\n        :type B: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def repeatedStringMatch(self, A, B):\r\n        \"\"\"\r\n        :type A: str\r\n        :type B: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int repeatedStringMatch(char* A, char* B) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int RepeatedStringMatch(string A, string B) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} A\r\n * @param {string} B\r\n * @return {number}\r\n */\r\nvar repeatedStringMatch = function(A, B) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} a\r\n# @param {String} b\r\n# @return {Integer}\r\ndef repeated_string_match(a, b)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func repeatedStringMatch(_ A: String, _ B: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func repeatedStringMatch(A string, B string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def repeatedStringMatch(A: String, B: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun repeatedStringMatch(A: String, B: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"abcd\"\n\"cdabcdab\"","testable":true,"templateMeta":{"name":"repeatedStringMatch","params":[{"name":"A","type":"string"},{"name":"B","type":"string"}],"return":{"type":"integer"}}}