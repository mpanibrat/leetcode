{"id":535,"fid":535,"name":"Encode and Decode TinyURL","slug":"encode-and-decode-tinyurl","link":"https://leetcode.com/problems/encode-and-decode-tinyurl/description/","percent":74.56472472146453,"level":"Medium","category":"algorithms","totalAC":"54.9K","totalSubmit":"73.7K","desc":"Note: This is a companion problem to the System Design problem: Design TinyURL.\r\n\r\nTinyURL is a URL shortening service where you enter a URL such as https://leetcode.com/problems/design-tinyurl and it returns a short URL such as http://tinyurl.com/4e9iAk.\r\n\r\nDesign the encode and decode methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n\r\n    // Encodes a URL to a shortened URL.\r\n    string encode(string longUrl) {\r\n        \r\n    }\r\n\r\n    // Decodes a shortened URL to its original URL.\r\n    string decode(string shortUrl) {\r\n        \r\n    }\r\n};\r\n\r\n// Your Solution object will be instantiated and called as such:\r\n// Solution solution;\r\n// solution.decode(solution.encode(url));"},{"value":"java","text":"Java","defaultCode":"public class Codec {\r\n\r\n    // Encodes a URL to a shortened URL.\r\n    public String encode(String longUrl) {\r\n        \r\n    }\r\n\r\n    // Decodes a shortened URL to its original URL.\r\n    public String decode(String shortUrl) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(url));"},{"value":"python","text":"Python","defaultCode":"class Codec:\r\n\r\n    def encode(self, longUrl):\r\n        \"\"\"Encodes a URL to a shortened URL.\r\n        \r\n        :type longUrl: str\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n    def decode(self, shortUrl):\r\n        \"\"\"Decodes a shortened URL to its original URL.\r\n        \r\n        :type shortUrl: str\r\n        :rtype: str\r\n        \"\"\"\r\n        \r\n\r\n# Your Codec object will be instantiated and called as such:\r\n# codec = Codec()\r\n# codec.decode(codec.encode(url))"},{"value":"c","text":"C","defaultCode":"/** Encodes a URL to a shortened URL. */\r\nchar* encode(char* longUrl) {\r\n    \r\n}\r\n\r\n/** Decodes a shortened URL to its original URL. */\r\nchar* decode(char* shortUrl) {\r\n    \r\n}\r\n\r\n// Your functions will be called as such:\r\n// char* s = encode(s);\r\n// decode(s);"},{"value":"csharp","text":"C#","defaultCode":"public class Codec {\r\n\r\n    // Encodes a URL to a shortened URL\r\n    public string encode(string longUrl) {\r\n        \r\n    }\r\n\r\n    // Decodes a shortened URL to its original URL.\r\n    public string decode(string shortUrl) {\r\n        \r\n    }\r\n}\r\n\r\n// Your Codec object will be instantiated and called as such:\r\n// Codec codec = new Codec();\r\n// codec.decode(codec.encode(url));"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Encodes a URL to a shortened URL.\r\n *\r\n * @param {string} longUrl\r\n * @return {string}\r\n */\r\nvar encode = function(longUrl) {\r\n    \r\n};\r\n\r\n/**\r\n * Decodes a shortened URL to its original URL.\r\n *\r\n * @param {string} shortUrl\r\n * @return {string}\r\n */\r\nvar decode = function(shortUrl) {\r\n    \r\n};\r\n\r\n/**\r\n * Your functions will be called as such:\r\n * decode(encode(url));\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"# Encodes a URL to a shortened URL.\r\n#\r\n# @param {string} longUrl\r\n# @return {string}\r\ndef encode(longUrl)\r\n    \r\nend\r\n\r\n# Decodes a shortened URL to its original URL.\r\n#\r\n# @param {string} shortUrl\r\n# @return {string}\r\ndef decode(shortUrl)\r\n    \r\nend\r\n\r\n\r\n# Your functions will be called as such:\r\n# decode(encode(url))"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func CodecDriver(_ url: String) -> String {\n\n    }\n}"}],"testcase":"\"https://leetcode.com/problems/design-tinyurl\"","testable":true,"templateMeta":{"name":"CodecDriver","params":[{"name":"url","type":"string"}],"return":{"type":"string"},"generatedriver":false,"generatedefinition":false}}