{"id":917,"fid":881,"name":"Boats to Save People","slug":"boats-to-save-people","link":"https://leetcode.com/problems/boats-to-save-people/description/","percent":39.82106419714331,"level":"Medium","category":"algorithms","totalAC":"7.6K","totalSubmit":"19.1K","desc":"The i-th person has weight people[i], and each boat can carry a maximum weight of limit.\r\n\r\nEach boat carries at most 2 people at the same time, provided the sum of the weight of those people is at most limit.\r\n\r\nReturn the minimum number of boats to carry every given person.  (It is guaranteed each person can be carried by a boat.)\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: people = [1,2], limit = 3\r\nOutput: 1\r\nExplanation: 1 boat (1, 2)\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: people = [3,2,2,1], limit = 3\r\nOutput: 3\r\nExplanation: 3 boats (1, 2), (2) and (3)\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: people = [3,5,3,4], limit = 5\r\nOutput: 4\r\nExplanation: 4 boats (3), (3), (4), (5)\r\n\r\nNote:\r\n\r\n\r\n\t1 <= people.length <= 50000\r\n\t1 <= people[i] <= limit <= 30000\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numRescueBoats(vector<int>& people, int limit) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numRescueBoats(int[] people, int limit) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numRescueBoats(self, people, limit):\n        \"\"\"\n        :type people: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numRescueBoats(self, people, limit):\n        \"\"\"\n        :type people: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numRescueBoats(int* people, int peopleSize, int limit) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumRescueBoats(int[] people, int limit) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} people\n * @param {number} limit\n * @return {number}\n */\nvar numRescueBoats = function(people, limit) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} people\n# @param {Integer} limit\n# @return {Integer}\ndef num_rescue_boats(people, limit)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numRescueBoats(_ people: [Int], _ limit: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numRescueBoats(people []int, limit int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numRescueBoats(people: Array[Int], limit: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numRescueBoats(people: IntArray, limit: Int): Int {\n        \n    }\n}"}],"testcase":"[1,2]\n3","testable":true,"templateMeta":{"name":"numRescueBoats","params":[{"name":"people","type":"integer[]"},{"name":"limit","type":"integer"}],"return":{"type":"integer"}}}