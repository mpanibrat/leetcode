{"id":937,"fid":901,"name":"Online Stock Span","slug":"online-stock-span","link":"https://leetcode.com/problems/online-stock-span/description/","percent":43.57351103706789,"level":"Medium","category":"algorithms","totalAC":"5.2K","totalSubmit":"12K","desc":"Write a class StockSpanner which collects daily price quotes for some stock, and returns the span of that stock's price for the current day.\r\n\r\nThe span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today's price.\r\n\r\nFor example, if the price of a stock over the next 7 days were [100, 80, 60, 70, 60, 75, 85], then the stock spans would be [1, 1, 1, 2, 1, 4, 6].\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"StockSpanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"], [[],[100],[80],[60],[70],[60],[75],[85]]\r\nOutput: [null,1,1,1,2,1,4,6]\r\nExplanation: \r\nFirst, S = StockSpanner() is initialized.  Then:\r\nS.next(100) is called and returns 1,\r\nS.next(80) is called and returns 1,\r\nS.next(60) is called and returns 1,\r\nS.next(70) is called and returns 2,\r\nS.next(60) is called and returns 1,\r\nS.next(75) is called and returns 4,\r\nS.next(85) is called and returns 6.\r\n\r\nNote that (for example) S.next(75) returned 4, because the last 4 prices\r\n(including today's price of 75) were less than or equal to today's price.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tCalls to StockSpanner.next(int price) will have 1 <= price <= 10^5.\r\n\tThere will be at most 10000 calls to StockSpanner.next per test case.\r\n\tThere will be at most 150000 calls to StockSpanner.next across all test cases.\r\n\tThe total time limit for this problem has been reduced by 75% for C++, and 50% for all other languages.\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class StockSpanner {\npublic:\n    StockSpanner() {\n        \n    }\n    \n    int next(int price) {\n        \n    }\n};\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner obj = new StockSpanner();\n * int param_1 = obj.next(price);\n */"},{"value":"java","text":"Java","defaultCode":"class StockSpanner {\n\n    public StockSpanner() {\n        \n    }\n    \n    public int next(int price) {\n        \n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner obj = new StockSpanner();\n * int param_1 = obj.next(price);\n */"},{"value":"python","text":"Python","defaultCode":"class StockSpanner(object):\n\n    def __init__(self):\n        \n\n    def next(self, price):\n        \"\"\"\n        :type price: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your StockSpanner object will be instantiated and called as such:\n# obj = StockSpanner()\n# param_1 = obj.next(price)"},{"value":"python3","text":"Python3","defaultCode":"class StockSpanner:\n\n    def __init__(self):\n        \n\n    def next(self, price):\n        \"\"\"\n        :type price: int\n        :rtype: int\n        \"\"\"\n        \n\n\n# Your StockSpanner object will be instantiated and called as such:\n# obj = StockSpanner()\n# param_1 = obj.next(price)"},{"value":"c","text":"C","defaultCode":"typedef struct {\n    \n} StockSpanner;\n\nStockSpanner* stockSpannerCreate() {\n    \n}\n\nint stockSpannerNext(StockSpanner* obj, int price) {\n    \n}\n\nvoid stockSpannerFree(StockSpanner* obj) {\n    \n}\n\n/**\n * Your StockSpanner struct will be instantiated and called as such:\n * struct StockSpanner* obj = stockSpannerCreate();\n * int param_1 = stockSpannerNext(obj, price);\n * stockSpannerFree(obj);\n */"},{"value":"csharp","text":"C#","defaultCode":"public class StockSpanner {\n\n    public StockSpanner() {\n        \n    }\n    \n    public int Next(int price) {\n        \n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * StockSpanner obj = new StockSpanner();\n * int param_1 = obj.Next(price);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar StockSpanner = function() {\n    \n};\n\n/** \n * @param {number} price\n * @return {number}\n */\nStockSpanner.prototype.next = function(price) {\n    \n};\n\n/** \n * Your StockSpanner object will be instantiated and called as such:\n * var obj = Object.create(StockSpanner).createNew()\n * var param_1 = obj.next(price)\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class StockSpanner\n    def initialize()\n        \n    end\n\n\n=begin\n    :type price: Integer\n    :rtype: Integer\n=end\n    def next(price)\n        \n    end\n\n\nend\n\n# Your StockSpanner object will be instantiated and called as such:\n# obj = StockSpanner.new()\n# param_1 = obj.next(price)"},{"value":"swift","text":"Swift","defaultCode":"\nclass StockSpanner {\n\n    init() {\n        \n    }\n    \n    func next(_ price: Int) -> Int {\n      \n    }\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * let obj = StockSpanner()\n * let ret_1: Int = obj.next(price)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type StockSpanner struct {\n    \n}\n\n\nfunc Constructor() StockSpanner {\n    \n}\n\n\nfunc (this *StockSpanner) Next(price int) int {\n    \n}\n\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Next(price);\n */"},{"value":"scala","text":"Scala","defaultCode":"class StockSpanner() {\n\n    def next(price: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * var obj = new StockSpanner()\n * var param_1 = obj.next(price)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class StockSpanner() {\n\n    fun next(price: Int): Int {\n        \n    }\n\n}\n\n/**\n * Your StockSpanner object will be instantiated and called as such:\n * var obj = StockSpanner()\n * var param_1 = obj.next(price)\n */"}],"testcase":"[\"StockSpanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"]\n[[],[100],[80],[60],[70],[60],[75],[85]]","testable":true,"templateMeta":{"classname":"StockSpanner","maxbytesperline":200000,"constructor":{"params":[]},"methods":[{"name":"next","params":[{"type":"integer","name":"price"}],"return":{"type":"integer"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}