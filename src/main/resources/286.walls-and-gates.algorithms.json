{"id":286,"fid":286,"name":"Walls and Gates","slug":"walls-and-gates","link":"https://leetcode.com/problems/walls-and-gates/description/","percent":46.95642416907775,"level":"Medium","category":"algorithms","totalAC":"58.6K","totalSubmit":"124.8K","desc":"You are given a m x n 2D grid initialized with these three possible values.\r\n\r\n\r\n\t-1 - A wall or an obstacle.\r\n\t0 - A gate.\r\n\tINF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.\r\n\r\n\r\nFill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.\r\n\r\nExample:Â \r\n\r\nGiven the 2D grid:\r\n\r\n\r\nINF  -1  0  INF\r\nINF INF INF  -1\r\nINF  -1 INF  -1\r\n  0  -1 INF INF\r\n\r\n\r\nAfter running your function, the 2D grid should be:\r\n\r\n\r\n  3  -1   0   1\r\n  2   2   1  -1\r\n  1  -1   2  -1\r\n  0  -1   3   4\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    void wallsAndGates(vector<vector<int>>& rooms) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public void wallsAndGates(int[][] rooms) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def wallsAndGates(self, rooms):\r\n        \"\"\"\r\n        :type rooms: List[List[int]]\r\n        :rtype: void Do not return anything, modify rooms in-place instead.\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def wallsAndGates(self, rooms):\r\n        \"\"\"\r\n        :type rooms: List[List[int]]\r\n        :rtype: void Do not return anything, modify rooms in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"void wallsAndGates(int** rooms, int roomsRowSize, int roomsColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public void WallsAndGates(int[,] rooms) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} rooms\r\n * @return {void} Do not return anything, modify rooms in-place instead.\r\n */\r\nvar wallsAndGates = function(rooms) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} rooms\r\n# @return {Void} Do not return anything, modify rooms in-place instead.\r\ndef walls_and_gates(rooms)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wallsAndGates(_ rooms: inout [[Int]]) {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wallsAndGates(rooms [][]int)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def wallsAndGates(rooms: Array[Array[Int]]): Unit = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun wallsAndGates(rooms: Array<IntArray>): Unit {\r\n        \r\n    }\r\n}"}],"testcase":"[[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]","testable":true,"templateMeta":{"name":"wallsAndGates","params":[{"name":"rooms","type":"integer[][]"}],"return":{"type":"void"},"output":{"paramindex":0}}}