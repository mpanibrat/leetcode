{"id":663,"fid":663,"name":"Equal Tree Partition","slug":"equal-tree-partition","link":"https://leetcode.com/problems/equal-tree-partition/description/","percent":36.46233564806655,"level":"Medium","category":"algorithms","totalAC":"10.3K","totalSubmit":"28.4K","desc":"\r\nGiven a binary tree with n nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing exactly one edge on the original tree.\r\n\r\n\r\nExample 1:\r\n\r\nInput:     \r\n    5\r\n   / \\\r\n  10 10\r\n    /  \\\r\n   2   3\r\n\r\nOutput: True\r\nExplanation: \r\n    5\r\n   / \r\n  10\r\n      \r\nSum: 15\r\n\r\n   10\r\n  /  \\\r\n 2    3\r\n\r\nSum: 15\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput:     \r\n    1\r\n   / \\\r\n  2  10\r\n    /  \\\r\n   2   20\r\n\r\nOutput: False\r\nExplanation: You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.\r\n\r\n\r\n\r\nNote:\r\n\r\nThe range of tree node value is in the range of [-100000, 100000].\r\n1 \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    bool checkEqualTree(TreeNode* root) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public boolean checkEqualTree(TreeNode root) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def checkEqualTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def checkEqualTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     struct TreeNode *left;\n *     struct TreeNode *right;\n * };\n */\nbool checkEqualTree(struct TreeNode* root) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public int val;\n *     public TreeNode left;\n *     public TreeNode right;\n *     public TreeNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public bool CheckEqualTree(TreeNode root) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar checkEqualTree = function(root) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\n# class TreeNode\n#     attr_accessor :val, :left, :right\n#     def initialize(val)\n#         @val = val\n#         @left, @right = nil, nil\n#     end\n# end\n\n# @param {TreeNode} root\n# @return {Boolean}\ndef check_equal_tree(root)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     public var val: Int\n *     public var left: TreeNode?\n *     public var right: TreeNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.left = nil\n *         self.right = nil\n *     }\n * }\n */\nclass Solution {\n    func checkEqualTree(_ root: TreeNode?) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc checkEqualTree(root *TreeNode) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode(var _value: Int) {\n *   var value: Int = _value\n *   var left: TreeNode = null\n *   var right: TreeNode = null\n * }\n */\nobject Solution {\n    def checkEqualTree(root: TreeNode): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for a binary tree node.\n * class TreeNode(var `val`: Int = 0) {\n *     var left: TreeNode? = null\n *     var right: TreeNode? = null\n * }\n */\nclass Solution {\n    fun checkEqualTree(root: TreeNode?): Boolean {\n        \n    }\n}"}],"testcase":"[5,10,10,null,null,2,3]","testable":true,"templateMeta":{"name":"checkEqualTree","params":[{"name":"root","type":"TreeNode"}],"return":{"type":"boolean"}}}