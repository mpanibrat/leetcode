{"id":871,"fid":841,"name":"Keys and Rooms","slug":"keys-and-rooms","link":"https://leetcode.com/problems/keys-and-rooms/description/","percent":57.38937626530416,"level":"Medium","category":"algorithms","totalAC":"17.9K","totalSubmit":"31.1K","desc":"There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some keys to access the next room. \r\n\r\nFormally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length.  A key rooms[i][j] = v opens the room with number v.\r\n\r\nInitially, all the rooms start locked (except for room 0). \r\n\r\nYou can walk back and forth between rooms freely.\r\n\r\nReturn true if and only if you can enter every room.\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[1],[2],[3],[]]\r\nOutput: true\r\nExplanation:  \r\nWe start in room 0, and pick up key 1.\r\nWe then go to room 1, and pick up key 2.\r\nWe then go to room 2, and pick up key 3.\r\nWe then go to room 3.  Since we were able to go to every room, we return true.\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1,3],[3,0,1],[2],[0]]\r\nOutput: false\r\nExplanation: We can't enter the room with number 2.\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= rooms.length <= 1000\r\n\t0 <= rooms[i].length <= 1000\r\n\tThe number of keys in all rooms combined is at most 3000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool canVisitAllRooms(vector<vector<int>>& rooms) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean canVisitAllRooms(List<List<Integer>> rooms) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def canVisitAllRooms(self, rooms):\r\n        \"\"\"\r\n        :type rooms: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def canVisitAllRooms(self, rooms):\r\n        \"\"\"\r\n        :type rooms: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool canVisitAllRooms(int** rooms, int roomsRowSize, int *roomsColSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool CanVisitAllRooms(IList<IList<int>> rooms) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} rooms\r\n * @return {boolean}\r\n */\r\nvar canVisitAllRooms = function(rooms) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} rooms\r\n# @return {Boolean}\r\ndef can_visit_all_rooms(rooms)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canVisitAllRooms(_ rooms: [[Int]]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func canVisitAllRooms(rooms [][]int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def canVisitAllRooms(rooms: List[List[Int]]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun canVisitAllRooms(rooms: List<List<Int>>): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[[1],[2],[3],[]]","testable":true,"templateMeta":{"name":"canVisitAllRooms","params":[{"name":"rooms","type":"list<list<integer>>"}],"return":{"type":"boolean"}}}