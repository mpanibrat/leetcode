{"id":728,"fid":728,"name":"Self Dividing Numbers","slug":"self-dividing-numbers","link":"https://leetcode.com/problems/self-dividing-numbers/description/","percent":67.28860902163527,"level":"Easy","category":"algorithms","totalAC":"54.9K","totalSubmit":"81.6K","desc":"\r\nA self-dividing number is a number that is divisible by every digit it contains.\r\n\r\nFor example, 128 is a self-dividing number because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.\r\n\r\nAlso, a self-dividing number is not allowed to contain the digit zero.\r\n\r\nGiven a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.\r\n\r\nExample 1:\r\n\r\nInput: \r\nleft = 1, right = 22\r\nOutput: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n\r\n\r\n\r\nNote:\r\nThe boundaries of each input argument are 1 .\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> selfDividingNumbers(int left, int right) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> selfDividingNumbers(int left, int right) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def selfDividingNumbers(self, left, right):\r\n        \"\"\"\r\n        :type left: int\r\n        :type right: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def selfDividingNumbers(self, left, right):\r\n        \"\"\"\r\n        :type left: int\r\n        :type right: int\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* selfDividingNumbers(int left, int right, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> SelfDividingNumbers(int left, int right) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} left\r\n * @param {number} right\r\n * @return {number[]}\r\n */\r\nvar selfDividingNumbers = function(left, right) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} left\r\n# @param {Integer} right\r\n# @return {Integer[]}\r\ndef self_dividing_numbers(left, right)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func selfDividingNumbers(_ left: Int, _ right: Int) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func selfDividingNumbers(left int, right int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def selfDividingNumbers(left: Int, right: Int): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun selfDividingNumbers(left: Int, right: Int): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"1\n22","testable":true,"templateMeta":{"name":"selfDividingNumbers","params":[{"name":"left","type":"integer"},{"name":"right","type":"integer"}],"return":{"type":"list<integer>"}}}