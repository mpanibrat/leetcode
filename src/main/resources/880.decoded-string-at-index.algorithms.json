{"id":916,"fid":880,"name":"Decoded String at Index","slug":"decoded-string-at-index","link":"https://leetcode.com/problems/decoded-string-at-index/description/","percent":22.36086028566738,"level":"Medium","category":"algorithms","totalAC":"4.1K","totalSubmit":"18.3K","desc":"An encoded string S is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:\r\n\r\n\r\n\tIf the character read is a letter, that letter is written onto the tape.\r\n\tIf the character read is a digit (say d), the entire current tape is repeatedly written d-1 more times in total.\r\n\r\n\r\nNow for some encoded string S, and an index K, find and return the K-th letter (1 indexed) in the decoded string.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: S = \"leet2code3\", K = 10\r\nOutput: \"o\"\r\nExplanation: \r\nThe decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\r\nThe 10th letter in the string is \"o\".\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: S = \"ha22\", K = 5\r\nOutput: \"h\"\r\nExplanation: \r\nThe decoded string is \"hahahaha\".  The 5th letter is \"h\".\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: S = \"a2345678999999999999999\", K = 1\r\nOutput: \"a\"\r\nExplanation: \r\nThe decoded string is \"a\" repeated 8301530446056247680 times.  The 1st letter is \"a\".\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t2 <= S.length <= 100\r\n\tS will only contain lowercase letters and digits 2 through 9.\r\n\tS starts with a letter.\r\n\t1 <= K <= 10^9\r\n\tThe decoded string is guaranteed to have less than 2^63 letters.\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string decodeAtIndex(string S, int K) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String decodeAtIndex(String S, int K) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def decodeAtIndex(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def decodeAtIndex(self, S, K):\n        \"\"\"\n        :type S: str\n        :type K: int\n        :rtype: str\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"char* decodeAtIndex(char* S, int K) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string DecodeAtIndex(string S, int K) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @param {number} K\n * @return {string}\n */\nvar decodeAtIndex = function(S, K) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer} k\n# @return {String}\ndef decode_at_index(s, k)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func decodeAtIndex(_ S: String, _ K: Int) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func decodeAtIndex(S string, K int) string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def decodeAtIndex(S: String, K: Int): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun decodeAtIndex(S: String, K: Int): String {\n        \n    }\n}"}],"testcase":"\"leet2code3\"\n10","testable":true,"templateMeta":{"name":"decodeAtIndex","params":[{"name":"S","type":"string"},{"name":"K","type":"integer"}],"return":{"type":"string"}}}