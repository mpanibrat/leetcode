{"id":163,"fid":163,"name":"Missing Ranges","slug":"missing-ranges","link":"https://leetcode.com/problems/missing-ranges/description/","percent":22.78556545726667,"level":"Medium","category":"algorithms","totalAC":"46.6K","totalSubmit":"204.4K","desc":"Given a sorted integer array nums, where the range of elements are in the inclusive range [lower, upper], return its missing ranges.\r\n\r\nExample:\r\n\r\n\r\nInput: nums = [0, 1, 3, 50, 75], lower = 0 and upper = 99,\r\nOutput: [\"2\", \"4->49\", \"51->74\", \"76->99\"]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> findMissingRanges(vector<int>& nums, int lower, int upper) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<String> findMissingRanges(int[] nums, int lower, int upper) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findMissingRanges(self, nums, lower, upper):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type lower: int\r\n        :type upper: int\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findMissingRanges(self, nums, lower, upper):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :type lower: int\r\n        :type upper: int\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findMissingRanges(int* nums, int numsSize, int lower, int upper, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<string> FindMissingRanges(int[] nums, int lower, int upper) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @param {number} lower\r\n * @param {number} upper\r\n * @return {string[]}\r\n */\r\nvar findMissingRanges = function(nums, lower, upper) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @param {Integer} lower\r\n# @param {Integer} upper\r\n# @return {String[]}\r\ndef find_missing_ranges(nums, lower, upper)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMissingRanges(_ nums: [Int], _ lower: Int, _ upper: Int) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMissingRanges(nums []int, lower int, upper int) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findMissingRanges(nums: Array[Int], lower: Int, upper: Int): List[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findMissingRanges(nums: IntArray, lower: Int, upper: Int): List<String> {\r\n        \r\n    }\r\n}"}],"testcase":"[0,1,3,50,75]\n0\n99","testable":true,"templateMeta":{"name":"findMissingRanges","params":[{"name":"nums","type":"integer[]"},{"name":"lower","type":"integer"},{"name":"upper","type":"integer"}],"return":{"type":"list<string>"}}}