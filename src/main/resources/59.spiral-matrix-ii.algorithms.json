{"id":59,"fid":59,"name":"Spiral Matrix II","slug":"spiral-matrix-ii","link":"https://leetcode.com/problems/spiral-matrix-ii/description/","percent":43.66632761431798,"level":"Medium","category":"algorithms","totalAC":"116.8K","totalSubmit":"267.4K","desc":"Given a positive integer n, generate a square matrix filled with elements from 1 to n2 in spiral order.\r\n\r\nExample:\r\n\r\n\r\nInput: 3\r\nOutput:\r\n[\r\n [ 1, 2, 3 ],\r\n [ 8, 9, 4 ],\r\n [ 7, 6, 5 ]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> generateMatrix(int n) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[][] generateMatrix(int n) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def generateMatrix(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def generateMatrix(self, n):\r\n        \"\"\"\r\n        :type n: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** generateMatrix(int n) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[,] GenerateMatrix(int n) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @return {number[][]}\r\n */\r\nvar generateMatrix = function(n) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @return {Integer[][]}\r\ndef generate_matrix(n)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generateMatrix(_ n: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func generateMatrix(n int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def generateMatrix(n: Int): Array[Array[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun generateMatrix(n: Int): Array<IntArray> {\r\n        \r\n    }\r\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"generateMatrix","params":[{"name":"n","type":"integer"}],"return":{"type":"integer[][]","rowsize":"param_1","colsize":"param_1","dealloc":true}}}