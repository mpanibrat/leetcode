{"id":444,"fid":444,"name":"Sequence Reconstruction","slug":"sequence-reconstruction","link":"https://leetcode.com/problems/sequence-reconstruction/description/","percent":19.62836300656089,"level":"Medium","category":"algorithms","totalAC":"13.4K","totalSubmit":"68.1K","desc":"Check whether the original sequence org can be uniquely reconstructed from the sequences in seqs. The org sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in seqs (i.e., a shortest sequence so that all sequences in seqs are subsequences of it). Determine whether there is only one sequence that can be reconstructed from seqs and it is the org sequence.\r\n\r\nExample 1:\r\n\r\nInput:\r\norg: [1,2,3], seqs: [[1,2],[1,3]]\r\n\r\nOutput:\r\nfalse\r\n\r\nExplanation:\r\n[1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput:\r\norg: [1,2,3], seqs: [[1,2]]\r\n\r\nOutput:\r\nfalse\r\n\r\nExplanation:\r\nThe reconstructed sequence can only be [1,2].\r\n\r\n\r\n\r\nExample 3:\r\n\r\nInput:\r\norg: [1,2,3], seqs: [[1,2],[1,3],[2,3]]\r\n\r\nOutput:\r\ntrue\r\n\r\nExplanation:\r\nThe sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].\r\n\r\n\r\n\r\nExample 4:\r\n\r\nInput:\r\norg: [4,1,5,2,6,3], seqs: [[5,2,6,3],[4,1,5,2]]\r\n\r\nOutput:\r\ntrue\r\n\r\n\r\n\r\n\r\nUPDATE (2017/1/8):\r\nThe seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool sequenceReconstruction(vector<int>& org, vector<vector<int>>& seqs) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean sequenceReconstruction(int[] org, List<List<Integer>> seqs) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def sequenceReconstruction(self, org, seqs):\r\n        \"\"\"\r\n        :type org: List[int]\r\n        :type seqs: List[List[int]]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sequenceReconstruction(self, org, seqs):\n        \"\"\"\n        :type org: List[int]\n        :type seqs: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool sequenceReconstruction(int* org, int orgSize, int** seqs, int seqsRowSize, int *seqsColSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool SequenceReconstruction(int[] org, IList<IList<int>> seqs) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} org\r\n * @param {number[][]} seqs\r\n * @return {boolean}\r\n */\r\nvar sequenceReconstruction = function(org, seqs) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} org\r\n# @param {Integer[][]} seqs\r\n# @return {Boolean}\r\ndef sequence_reconstruction(org, seqs)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sequenceReconstruction(_ org: [Int], _ seqs: [[Int]]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func sequenceReconstruction(org []int, seqs [][]int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sequenceReconstruction(org: Array[Int], seqs: List[List[Int]]): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sequenceReconstruction(org: IntArray, seqs: List<List<Int>>): Boolean {\n        \n    }\n}"}],"testcase":"[1,2,3]\n[[1,2],[1,3]]","testable":true,"templateMeta":{"name":"sequenceReconstruction","params":[{"name":"org","type":"integer[]"},{"name":"seqs","type":"list<list<integer>>"}],"return":{"type":"boolean"}}}