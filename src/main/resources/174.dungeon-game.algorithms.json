{"id":174,"fid":174,"name":"Dungeon Game","slug":"dungeon-game","link":"https://leetcode.com/problems/dungeon-game/description/","percent":25.509374649152353,"level":"Hard","category":"algorithms","totalAC":"56.8K","totalSubmit":"222.7K","desc":"table.dungeon, .dungeon th, .dungeon td {\r\n  border:3px solid black;\r\n}\r\n\r\n .dungeon th, .dungeon td {\r\n    text-align: center;\r\n    height: 70px;\r\n    width: 70px;\r\n}\r\n\r\nThe demons had captured the princess (P) and imprisoned her in the bottom-right corner of a dungeon. The dungeon consists of M x N rooms laid out in a 2D grid. Our valiant knight (K) was initially positioned in the top-left room and must fight his way through the dungeon to rescue the princess.\r\n\r\nThe knight has an initial health point represented by a positive integer. If at any point his health point drops to 0 or below, he dies immediately.\r\n\r\nSome of the rooms are guarded by demons, so the knight loses health (negative integers) upon entering these rooms; other rooms are either empty (0's) or contain magic orbs that increase the knight's health (positive integers).\r\n\r\nIn order to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.\r\n\r\n \r\n\r\nWrite a function to determine the knight's minimum initial health so that he is able to rescue the princess.\r\n\r\nFor example, given the dungeon below, the initial health of the knight must be at least 7 if he follows the optimal path RIGHT-> RIGHT -> DOWN -> DOWN.\r\n\r\n\r\n\t\r\n\t\t\r\n\t\t\t-2 (K)\r\n\t\t\t-3\r\n\t\t\t3\r\n\t\t\r\n\t\t\r\n\t\t\t-5\r\n\t\t\t-10\r\n\t\t\t1\r\n\t\t\r\n\t\t\r\n\t\t\t10\r\n\t\t\t30\r\n\t\t\t-5 (P)\r\n\t\t\r\n\t\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe knight's health has no upper bound.\r\n\tAny room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int calculateMinimumHP(vector<vector<int>>& dungeon) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int calculateMinimumHP(int[][] dungeon) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def calculateMinimumHP(self, dungeon):\r\n        \"\"\"\r\n        :type dungeon: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def calculateMinimumHP(self, dungeon):\r\n        \"\"\"\r\n        :type dungeon: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int calculateMinimumHP(int** dungeon, int dungeonRowSize, int *dungeonColSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int CalculateMinimumHP(int[][] dungeon) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} dungeon\r\n * @return {number}\r\n */\r\nvar calculateMinimumHP = function(dungeon) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} dungeon\r\n# @return {Integer}\r\ndef calculate_minimum_hp(dungeon)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func calculateMinimumHP(_ dungeon: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func calculateMinimumHP(dungeon [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def calculateMinimumHP(dungeon: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun calculateMinimumHP(dungeon: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[-2,-3,3],[-5,-10,1],[10,30,-5]]","testable":true,"templateMeta":{"name":"calculateMinimumHP","params":[{"name":"dungeon","type":"integer[][]"}],"return":{"type":"integer"}}}