{"id":778,"fid":767,"name":"Reorganize String","slug":"reorganize-string","link":"https://leetcode.com/problems/reorganize-string/description/","percent":39.402415082161205,"level":"Medium","category":"algorithms","totalAC":"14.7K","totalSubmit":"37.2K","desc":"Given a string S, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.\r\n\r\nIf possible, output any possible result.  If not possible, return the empty string.\r\n\r\nExample 1:\r\n\r\n\r\nInput: S = \"aab\"\r\nOutput: \"aba\"\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: S = \"aaab\"\r\nOutput: \"\"\r\n\r\n\r\nNote:\r\n\r\n\r\n\tS will consist of lowercase letters and have length in range [1, 500].\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string reorganizeString(string S) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String reorganizeString(String S) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def reorganizeString(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def reorganizeString(self, S):\r\n        \"\"\"\r\n        :type S: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* reorganizeString(char* S) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string ReorganizeString(string S) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} S\r\n * @return {string}\r\n */\r\nvar reorganizeString = function(S) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {String}\r\ndef reorganize_string(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reorganizeString(_ S: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func reorganizeString(S string) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def reorganizeString(S: String): String = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun reorganizeString(S: String): String {\r\n        \r\n    }\r\n}"}],"testcase":"\"aab\"","testable":true,"templateMeta":{"name":"reorganizeString","params":[{"name":"S","type":"string"}],"return":{"type":"string"}}}