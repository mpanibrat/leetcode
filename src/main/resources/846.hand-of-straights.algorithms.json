{"id":876,"fid":846,"name":"Hand of Straights","slug":"hand-of-straights","link":"https://leetcode.com/problems/hand-of-straights/description/","percent":45.86683417085427,"level":"Medium","category":"algorithms","totalAC":"11K","totalSubmit":"23.9K","desc":"Alice has a hand of cards, given as an array of integers.\r\n\r\nNow she wants to rearrange the cards into groups so that each group is size W, and consists of W consecutive cards.\r\n\r\nReturn true if and only if she can.\r\n\r\n \r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: hand = [1,2,3,6,2,3,4,7,8], W = 3\r\nOutput: true\r\nExplanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8].\r\n\r\nExample 2:\r\n\r\n\r\nInput: hand = [1,2,3,4,5], W = 4\r\nOutput: false\r\nExplanation: Alice's hand can't be rearranged into groups of 4.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= hand.length <= 10000\r\n\t0 <= hand[i] <= 10^9\r\n\t1 <= W <= hand.length\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isNStraightHand(vector<int>& hand, int W) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isNStraightHand(int[] hand, int W) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isNStraightHand(self, hand, W):\n        \"\"\"\n        :type hand: List[int]\n        :type W: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isNStraightHand(self, hand, W):\n        \"\"\"\n        :type hand: List[int]\n        :type W: int\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool isNStraightHand(int* hand, int handSize, int W) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsNStraightHand(int[] hand, int W) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} hand\n * @param {number} W\n * @return {boolean}\n */\nvar isNStraightHand = function(hand, W) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} hand\n# @param {Integer} w\n# @return {Boolean}\ndef is_n_straight_hand(hand, w)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isNStraightHand(_ hand: [Int], _ W: Int) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isNStraightHand(hand []int, W int) bool {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isNStraightHand(hand: Array[Int], W: Int): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isNStraightHand(hand: IntArray, W: Int): Boolean {\n        \n    }\n}"}],"testcase":"[1,2,3,6,2,3,4,7,8]\n3","testable":true,"templateMeta":{"name":"isNStraightHand","params":[{"name":"hand","type":"integer[]"},{"name":"W","type":"integer"}],"return":{"type":"boolean"}}}