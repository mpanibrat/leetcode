{"id":4,"fid":4,"name":"Median of Two Sorted Arrays","slug":"median-of-two-sorted-arrays","link":"https://leetcode.com/problems/median-of-two-sorted-arrays/description/","percent":24.22547386793136,"level":"Hard","category":"algorithms","totalAC":"324.5K","totalSubmit":"1.3M","desc":"There are two sorted arrays nums1 and nums2 of size m and n respectively.\r\n\r\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\r\n\r\nYou may assume nums1 and nums2Â cannot be both empty.\r\n\r\nExample 1:\r\n\r\n\r\nnums1 = [1, 3]\r\nnums2 = [2]\r\n\r\nThe median is 2.0\r\n\r\n\r\nExample 2:\r\n\r\n\r\nnums1 = [1, 2]\r\nnums2 = [3, 4]\r\n\r\nThe median is (2 + 3)/2 = 2.5\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findMedianSortedArrays(self, nums1, nums2):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: float\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findMedianSortedArrays(self, nums1, nums2):\r\n        \"\"\"\r\n        :type nums1: List[int]\r\n        :type nums2: List[int]\r\n        :rtype: float\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums1\r\n * @param {number[]} nums2\r\n * @return {number}\r\n */\r\nvar findMedianSortedArrays = function(nums1, nums2) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums1\r\n# @param {Integer[]} nums2\r\n# @return {Float}\r\ndef find_median_sorted_arrays(nums1, nums2)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMedianSortedArrays(_ nums1: [Int], _ nums2: [Int]) -> Double {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findMedianSortedArrays(nums1: Array[Int], nums2: Array[Int]): Double = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findMedianSortedArrays(nums1: IntArray, nums2: IntArray): Double {\r\n        \r\n    }\r\n}"}],"testcase":"[1,3]\n[2]","testable":true,"templateMeta":{"name":"findMedianSortedArrays","params":[{"name":"nums1","type":"integer[]"},{"name":"nums2","type":"integer[]"}],"return":{"type":"double"}}}