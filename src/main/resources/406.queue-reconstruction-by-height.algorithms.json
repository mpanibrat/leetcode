{"id":406,"fid":406,"name":"Queue Reconstruction by Height","slug":"queue-reconstruction-by-height","link":"https://leetcode.com/problems/queue-reconstruction-by-height/description/","percent":57.38490533872541,"level":"Medium","category":"algorithms","totalAC":"60.6K","totalSubmit":"105.6K","desc":"Suppose you have a random list of people standing in a queue. Each person is described by a pair of integers (h, k), where h is the height of the person and k is the number of people in front of this person who have a height greater than or equal to h. Write an algorithm to reconstruct the queue.\r\n\r\n\r\nNote:\r\nThe number of people is less than 1,100.\r\n\r\n\r\n\r\n\r\nExample\r\n\r\nInput:\r\n[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]\r\n\r\nOutput:\r\n[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int[][] reconstructQueue(int[][] people) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def reconstructQueue(self, people):\r\n        \"\"\"\r\n        :type people: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def reconstructQueue(self, people):\r\n        \"\"\"\r\n        :type people: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint** reconstructQueue(int** people, int peopleRowSize, int peopleColSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int[,] ReconstructQueue(int[,] people) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} people\r\n * @return {number[][]}\r\n */\r\nvar reconstructQueue = function(people) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} people\r\n# @return {Integer[][]}\r\ndef reconstruct_queue(people)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func reconstructQueue(_ people: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func reconstructQueue(people [][]int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def reconstructQueue(people: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun reconstructQueue(people: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}],"testcase":"[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]","testable":true,"templateMeta":{"name":"reconstructQueue","params":[{"name":"people","type":"pair<integer,integer>[]"}],"return":{"type":"pair<integer,integer>[]","colsize":"2"}}}