{"id":951,"fid":915,"name":"Partition Array into Disjoint Intervals","slug":"partition-array-into-disjoint-intervals","link":"https://leetcode.com/problems/partition-array-into-disjoint-intervals/description/","percent":40.00449236298293,"level":"Medium","category":"algorithms","totalAC":"5.3K","totalSubmit":"13.4K","desc":"Given an array A, partition it into two (contiguous) subarrays left and right so that:\r\n\r\n\r\n\tEvery element in left is less than or equal to every element in right.\r\n\tleft and right are non-empty.\r\n\tleft has the smallest possible size.\r\n\r\n\r\nReturn the length of left after such a partitioning.  It is guaranteed that such a partitioning exists.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [5,0,3,8,6]\r\nOutput: 3\r\nExplanation: left = [5,0,3], right = [8,6]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,1,1,0,6,12]\r\nOutput: 4\r\nExplanation: left = [1,1,1,0], right = [6,12]\r\n\r\n\r\n \r\n\r\n\r\nNote:\r\n\r\n\r\n\t2 <= A.length <= 30000\r\n\t0 <= A[i] <= 10^6\r\n\tIt is guaranteed there is at least one way to partition A as described.\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int partitionDisjoint(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int partitionDisjoint(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def partitionDisjoint(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def partitionDisjoint(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int partitionDisjoint(int* A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int PartitionDisjoint(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number}\n */\nvar partitionDisjoint = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer}\ndef partition_disjoint(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func partitionDisjoint(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func partitionDisjoint(A []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def partitionDisjoint(A: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun partitionDisjoint(A: IntArray): Int {\n        \n    }\n}"}],"testcase":"[5,0,3,8,6]","testable":true,"templateMeta":{"name":"partitionDisjoint","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}