{"id":123,"fid":123,"name":"Best Time to Buy and Sell Stock III","slug":"best-time-to-buy-and-sell-stock-iii","link":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/","percent":31.835701722196212,"level":"Hard","category":"algorithms","totalAC":"125.8K","totalSubmit":"395.1K","desc":"Say you have an array for which the ith element is the price of a given stock on day i.\r\n\r\nDesign an algorithm to find the maximum profit. You may complete at most two transactions.\r\n\r\nNote: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).\r\n\r\nExample 1:\r\n\r\n\r\nInput: [3,3,5,0,0,3,1,4]\r\nOutput: 6\r\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\r\n             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,2,3,4,5]\r\nOutput: 4\r\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\r\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\r\n             engaging multiple transactions at the same time. You must sell before buying again.\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [7,6,4,3,1]\r\nOutput: 0\r\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maxProfit(vector<int>& prices) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int maxProfit(int[] prices) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxProfit(self, prices):\r\n        \"\"\"\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maxProfit(self, prices):\r\n        \"\"\"\r\n        :type prices: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int maxProfit(int* prices, int pricesSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaxProfit(int[] prices) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} prices\r\n * @return {number}\r\n */\r\nvar maxProfit = function(prices) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} prices\r\n# @return {Integer}\r\ndef max_profit(prices)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxProfit(_ prices: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxProfit(prices []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maxProfit(prices: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maxProfit(prices: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[3,3,5,0,0,3,1,4]","testable":true,"templateMeta":{"name":"maxProfit","params":[{"name":"prices","type":"integer[]"}],"return":{"type":"integer"}}}