{"id":933,"fid":897,"name":"Increasing Order Search Tree","slug":"increasing-order-search-tree","link":"https://leetcode.com/problems/increasing-order-search-tree/description/","percent":57.8508058165783,"level":"Easy","category":"algorithms","totalAC":"11K","totalSubmit":"19K","desc":"Given a tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.\r\n\r\n\r\nExample 1:\r\nInput: [5,3,6,2,4,null,8,1,null,null,null,7,9]\r\n\r\n       5\r\n      / \\\r\n    3    6\r\n   / \\    \\\r\n  2   4    8\r\n /        / \\ \r\n1        7   9\r\n\r\nOutput: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\r\n\r\n 1\r\n  \\\r\n   2\r\n    \\\r\n     3\r\n      \\\r\n       4\r\n        \\\r\n         5\r\n          \\\r\n           6\r\n            \\\r\n             7\r\n              \\\r\n               8\r\n                \\\r\n                 9  \r\n\r\nNote:\r\n\r\n\r\n\tThe number of nodes in the given tree will be between 1 and 100.\r\n\tEach node will have a unique integer value from 0 to 1000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    TreeNode* increasingBST(TreeNode* root) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public TreeNode increasingBST(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution(object):\r\n    def increasingBST(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.left = None\r\n#         self.right = None\r\n\r\nclass Solution:\r\n    def increasingBST(self, root):\r\n        \"\"\"\r\n        :type root: TreeNode\r\n        :rtype: TreeNode\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nstruct TreeNode* increasingBST(struct TreeNode* root) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public int val;\r\n *     public TreeNode left;\r\n *     public TreeNode right;\r\n *     public TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode IncreasingBST(TreeNode root) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * function TreeNode(val) {\r\n *     this.val = val;\r\n *     this.left = this.right = null;\r\n * }\r\n */\r\n/**\r\n * @param {TreeNode} root\r\n * @return {TreeNode}\r\n */\r\nvar increasingBST = function(root) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a binary tree node.\r\n# class TreeNode\r\n#     attr_accessor :val, :left, :right\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @left, @right = nil, nil\r\n#     end\r\n# end\r\n\r\n# @param {TreeNode} root\r\n# @return {TreeNode}\r\ndef increasing_bst(root)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     public var val: Int\r\n *     public var left: TreeNode?\r\n *     public var right: TreeNode?\r\n *     public init(_ val: Int) {\r\n *         self.val = val\r\n *         self.left = nil\r\n *         self.right = nil\r\n *     }\r\n * }\r\n */\r\nclass Solution {\r\n    func increasingBST(_ root: TreeNode?) -> TreeNode? {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * type TreeNode struct {\r\n *     Val int\r\n *     Left *TreeNode\r\n *     Right *TreeNode\r\n * }\r\n */\r\nfunc increasingBST(root *TreeNode) *TreeNode {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var _value: Int) {\r\n *   var value: Int = _value\r\n *   var left: TreeNode = null\r\n *   var right: TreeNode = null\r\n * }\r\n */\r\nobject Solution {\r\n    def increasingBST(root: TreeNode): TreeNode = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a binary tree node.\r\n * class TreeNode(var `val`: Int = 0) {\r\n *     var left: TreeNode? = null\r\n *     var right: TreeNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun increasingBST(root: TreeNode?): TreeNode? {\r\n        \r\n    }\r\n}"}],"testcase":"[5,3,6,2,4,null,8,1,null,null,null,7,9]","testable":true,"templateMeta":{"name":"increasingBST","params":[{"name":"root","type":"TreeNode"}],"return":{"type":"TreeNode"}}}