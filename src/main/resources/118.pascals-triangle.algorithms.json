{"id":118,"fid":118,"name":"Pascal's Triangle","slug":"pascals-triangle","link":"https://leetcode.com/problems/pascals-triangle/description/","percent":42.6500817172415,"level":"Easy","category":"algorithms","totalAC":"202.5K","totalSubmit":"474.8K","desc":"Given a non-negative integerÂ numRows, generate the first numRows of Pascal's triangle.\r\n\r\n\r\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\r\n\r\nExample:\r\n\r\n\r\nInput: 5\r\nOutput:\r\n[\r\n     [1],\r\n    [1,1],\r\n   [1,2,1],\r\n  [1,3,3,1],\r\n [1,4,6,4,1]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> generate(int numRows) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> generate(int numRows) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def generate(self, numRows):\r\n        \"\"\"\r\n        :type numRows: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def generate(self, numRows):\r\n        \"\"\"\r\n        :type numRows: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** generate(int numRows, int** columnSizes) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> Generate(int numRows) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} numRows\r\n * @return {number[][]}\r\n */\r\nvar generate = function(numRows) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num_rows\r\n# @return {Integer[][]}\r\ndef generate(num_rows)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func generate(_ numRows: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func generate(numRows int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def generate(numRows: Int): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun generate(numRows: Int): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"5","testable":true,"templateMeta":{"name":"generate","params":[{"name":"numRows","type":"integer"}],"return":{"type":"list<list<integer>>","dealloc":true,"rowsize":"param_1"}}}