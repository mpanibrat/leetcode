{"id":949,"fid":913,"name":"Cat and Mouse","slug":"cat-and-mouse","link":"https://leetcode.com/problems/cat-and-mouse/description/","percent":22.928994082840237,"level":"Hard","category":"algorithms","totalAC":"1.6K","totalSubmit":"6.8K","desc":"A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.\r\n\r\nThe graph is given as follows: graph[a] is a list of all nodes b such that ab is an edge of the graph.\r\n\r\nMouse starts at node 1 and goes first, Cat starts at node 2 and goes second, and there is a Hole at node 0.\r\n\r\nDuring each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in graph[1].\r\n\r\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\r\n\r\nThen, the game can end in 3 ways:\r\n\r\n\r\n\tIf ever the Cat occupies the same node as the Mouse, the Cat wins.\r\n\tIf ever the Mouse reaches the Hole, the Mouse wins.\r\n\tIf ever a position is repeated (ie. the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\r\n\r\n\r\nGiven a graph, and assuming both players play optimally, return 1 if the game is won by Mouse, 2 if the game is won by Cat, and 0 if the game is a draw.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\r\nOutput: 0\r\nExplanation:\r\n4---3---1\r\n|   |\r\n2---5\r\n \\ /\r\n  0\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t3 <= graph.length <= 50\r\n\tIt is guaranteed that graph[1] is non-empty.\r\n\tIt is guaranteed that graph[2] contains a non-zero element. \r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int catMouseGame(vector<vector<int>>& graph) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int catMouseGame(int[][] graph) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def catMouseGame(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def catMouseGame(self, graph):\n        \"\"\"\n        :type graph: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int catMouseGame(int** graph, int graphRowSize, int *graphColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CatMouseGame(int[][] graph) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} graph\n * @return {number}\n */\nvar catMouseGame = function(graph) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} graph\n# @return {Integer}\ndef cat_mouse_game(graph)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func catMouseGame(_ graph: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func catMouseGame(graph [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def catMouseGame(graph: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun catMouseGame(graph: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]","testable":true,"templateMeta":{"name":"catMouseGame","params":[{"name":"graph","type":"integer[][]"}],"return":{"type":"integer"}}}