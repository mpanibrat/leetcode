{"id":359,"fid":359,"name":"Logger Rate Limiter","slug":"logger-rate-limiter","link":"https://leetcode.com/problems/logger-rate-limiter/description/","percent":62.429001917633094,"level":"Easy","category":"algorithms","totalAC":"34.2K","totalSubmit":"54.8K","desc":"Design a logger system that receive stream of messages along with its timestamps, each message should be printed if and only if it is not printed in the last 10 seconds.\r\n\r\nGiven a message and a timestamp (in seconds granularity), return true if the message should be printed in the given timestamp, otherwise returns false.\r\n\r\nIt is possible that several messages arrive roughly at the same time.\r\n\r\nExample:\r\n\r\n\r\nLogger logger = new Logger();\r\n\r\n// logging string \"foo\" at timestamp 1\r\nlogger.shouldPrintMessage(1, \"foo\"); returns true; \r\n\r\n// logging string \"bar\" at timestamp 2\r\nlogger.shouldPrintMessage(2,\"bar\"); returns true;\r\n\r\n// logging string \"foo\" at timestamp 3\r\nlogger.shouldPrintMessage(3,\"foo\"); returns false;\r\n\r\n// logging string \"bar\" at timestamp 8\r\nlogger.shouldPrintMessage(8,\"bar\"); returns false;\r\n\r\n// logging string \"foo\" at timestamp 10\r\nlogger.shouldPrintMessage(10,\"foo\"); returns false;\r\n\r\n// logging string \"foo\" at timestamp 11\r\nlogger.shouldPrintMessage(11,\"foo\"); returns true;\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Logger {\r\npublic:\r\n    /** Initialize your data structure here. */\r\n    Logger() {\r\n        \r\n    }\r\n    \r\n    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. */\r\n    bool shouldPrintMessage(int timestamp, string message) {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Logger object will be instantiated and called as such:\r\n * Logger obj = new Logger();\r\n * bool param_1 = obj.shouldPrintMessage(timestamp,message);\r\n */"},{"value":"java","text":"Java","defaultCode":"class Logger {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Logger() {\r\n        \r\n    }\r\n    \r\n    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. */\r\n    public boolean shouldPrintMessage(int timestamp, String message) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Logger object will be instantiated and called as such:\r\n * Logger obj = new Logger();\r\n * boolean param_1 = obj.shouldPrintMessage(timestamp,message);\r\n */"},{"value":"python","text":"Python","defaultCode":"class Logger(object):\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def shouldPrintMessage(self, timestamp, message):\r\n        \"\"\"\r\n        Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity.\r\n        :type timestamp: int\r\n        :type message: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Logger object will be instantiated and called as such:\r\n# obj = Logger()\r\n# param_1 = obj.shouldPrintMessage(timestamp,message)"},{"value":"python3","text":"Python3","defaultCode":"class Logger:\r\n\r\n    def __init__(self):\r\n        \"\"\"\r\n        Initialize your data structure here.\r\n        \"\"\"\r\n        \r\n\r\n    def shouldPrintMessage(self, timestamp, message):\r\n        \"\"\"\r\n        Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity.\r\n        :type timestamp: int\r\n        :type message: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Logger object will be instantiated and called as such:\r\n# obj = Logger()\r\n# param_1 = obj.shouldPrintMessage(timestamp,message)"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Logger;\r\n\r\n/** Initialize your data structure here. */\r\nLogger* loggerCreate() {\r\n    \r\n}\r\n\r\n/** Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. */\r\nbool loggerShouldPrintMessage(Logger* obj, int timestamp, char* message) {\r\n    \r\n}\r\n\r\nvoid loggerFree(Logger* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Logger struct will be instantiated and called as such:\r\n * struct Logger* obj = loggerCreate();\r\n * bool param_1 = loggerShouldPrintMessage(obj, timestamp, message);\r\n * loggerFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Logger {\r\n\r\n    /** Initialize your data structure here. */\r\n    public Logger() {\r\n        \r\n    }\r\n    \r\n    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. */\r\n    public bool ShouldPrintMessage(int timestamp, string message) {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Logger object will be instantiated and called as such:\r\n * Logger obj = new Logger();\r\n * bool param_1 = obj.ShouldPrintMessage(timestamp,message);\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here.\r\n */\r\nvar Logger = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. \r\n * @param {number} timestamp \r\n * @param {string} message\r\n * @return {boolean}\r\n */\r\nLogger.prototype.shouldPrintMessage = function(timestamp, message) {\r\n    \r\n};\r\n\r\n/** \r\n * Your Logger object will be instantiated and called as such:\r\n * var obj = Object.create(Logger).createNew()\r\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Logger\r\n\r\n=begin\r\n    Initialize your data structure here.\r\n=end\r\n    def initialize()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity.\r\n    :type timestamp: Integer\r\n    :type message: String\r\n    :rtype: Boolean\r\n=end\r\n    def should_print_message(timestamp, message)\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Logger object will be instantiated and called as such:\r\n# obj = Logger.new()\r\n# param_1 = obj.should_print_message(timestamp, message)"},{"value":"swift","text":"Swift","defaultCode":"\nclass Logger {\n\n    /** Initialize your data structure here. */\n    init() {\n        \n    }\n    \n    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.\n        If this method returns false, the message will not be printed.\n        The timestamp is in seconds granularity. */\n    func shouldPrintMessage(_ timestamp: Int, _ message: String) -> Bool {\n      \n    }\n}\n\n/**\n * Your Logger object will be instantiated and called as such:\n * let obj = Logger()\n * let ret_1: Bool = obj.shouldPrintMessage(timestamp, message)\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Logger struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. */\r\nfunc Constructor() Logger {\r\n    \r\n}\r\n\r\n\r\n/** Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. */\r\nfunc (this *Logger) ShouldPrintMessage(timestamp int, message string) bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Logger object will be instantiated and called as such:\r\n * obj := Constructor();\r\n * param_1 := obj.ShouldPrintMessage(timestamp,message);\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Logger() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. */\r\n    def shouldPrintMessage(timestamp: Int, message: String): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Logger object will be instantiated and called as such:\r\n * var obj = new Logger()\r\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Logger() {\r\n\r\n    /** Initialize your data structure here. */\r\n    \r\n\r\n    /** Returns true if the message should be printed in the given timestamp, otherwise returns false.\r\n        If this method returns false, the message will not be printed.\r\n        The timestamp is in seconds granularity. */\r\n    fun shouldPrintMessage(timestamp: Int, message: String): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Logger object will be instantiated and called as such:\r\n * var obj = Logger()\r\n * var param_1 = obj.shouldPrintMessage(timestamp,message)\r\n */"}],"testcase":"[\"Logger\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\",\"shouldPrintMessage\"]\n[[],[1,\"foo\"],[2,\"bar\"],[3,\"foo\"],[8,\"bar\"],[10,\"foo\"],[11,\"foo\"]]","testable":true,"templateMeta":{"classname":"Logger","maxbytesperline":211000,"constructor":{"params":[],"comment":"Initialize your data structure here."},"methods":[{"name":"shouldPrintMessage","params":[{"type":"integer","name":"timestamp"},{"type":"string","name":"message"}],"return":{"type":"boolean"},"comment":"Returns true if the message should be printed in the given timestamp, otherwise returns false.\n        If this method returns false, the message will not be printed.\n        The timestamp is in seconds granularity."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}