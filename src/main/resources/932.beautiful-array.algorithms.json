{"id":968,"fid":932,"name":"Beautiful Array","slug":"beautiful-array","link":"https://leetcode.com/problems/beautiful-array/description/","percent":44.51818423148394,"level":"Medium","category":"algorithms","totalAC":"1.7K","totalSubmit":"3.8K","desc":"For some fixed N, an array A is beautiful if it is a permutation of the integers 1, 2, ..., N, such that:\r\n\r\nFor every i < j, there is no k with i < k < j such that A[k] * 2 = A[i] + A[j].\r\n\r\nGiven N, return any beautiful array A.  (It is guaranteed that one exists.)\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: 4\r\nOutput: [2,1,4,3]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: 5\r\nOutput: [3,1,2,5,4]\r\n\r\n \r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 1000\r\n\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> beautifulArray(int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] beautifulArray(int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def beautifulArray(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def beautifulArray(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* beautifulArray(int N, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] BeautifulArray(int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @return {number[]}\n */\nvar beautifulArray = function(N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer[]}\ndef beautiful_array(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func beautifulArray(_ N: Int) -> [Int] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func beautifulArray(N int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def beautifulArray(N: Int): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun beautifulArray(N: Int): IntArray {\n        \n    }\n}"}],"testcase":"4","testable":true,"templateMeta":{"name":"beautifulArray","params":[{"name":"N","type":"integer"}],"return":{"type":"integer[]"}}}