{"id":722,"fid":722,"name":"Remove Comments","slug":"remove-comments","link":"https://leetcode.com/problems/remove-comments/description/","percent":29.142908588920232,"level":"Medium","category":"algorithms","totalAC":"9.7K","totalSubmit":"33.3K","desc":"Given a C++ program, remove comments from it. The program source is an array where source[i] is the i-th line of the source code.  This represents the result of splitting the original source code string by the newline character \\n.\r\n\r\nIn C++, there are two types of comments, line comments, and block comments.\r\n\r\nThe string // denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.\r\n\r\nThe string /* denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of */ should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string /*/ does not yet end the block comment, as the ending would be overlapping the beginning.\r\n\r\nThe first effective comment takes precedence over others: if the string // occurs in a block comment, it is ignored. Similarly, if the string /* occurs in a line or block comment, it is also ignored.\r\n\r\nIf a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.\r\n\r\nThere will be no control characters, single quote, or double quote characters.  For example, source = \"string s = \"/* Not a comment. */\";\" will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)\r\n\r\nIt is guaranteed that every open block comment will eventually be closed, so /* outside of a line or block comment always starts a new comment.\r\n\r\nFinally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.\r\n\r\n\r\nAfter removing the comments from the source code, return the source code in the same format.\r\n\r\nExample 1:\r\n\r\nInput: \r\nsource = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\r\n\r\nThe line by line code is visualized as below:\r\n/*Test program */\r\nint main()\r\n{ \r\n  // variable declaration \r\nint a, b, c;\r\n/* This is a test\r\n   multiline  \r\n   comment for \r\n   testing */\r\na = b + c;\r\n}\r\n\r\nOutput: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\r\n\r\nThe line by line code is visualized as below:\r\nint main()\r\n{ \r\n  \r\nint a, b, c;\r\na = b + c;\r\n}\r\n\r\nExplanation: \r\nThe string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: \r\nsource = [\"a/*comment\", \"line\", \"more_comment*/b\"]\r\nOutput: [\"ab\"]\r\nExplanation: The original source string is \"a/*comment\\nline\\nmore_comment*/b\", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\r\n\r\n\r\n\r\nNote:\r\nThe length of source is in the range [1, 100].\r\nThe length of source[i] is in the range [0, 80].\r\nEvery open block comment is eventually closed.\r\nThere are no single-quote, double-quote, or control characters in the source code.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> removeComments(vector<string>& source) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> removeComments(String[] source) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def removeComments(self, source):\n        \"\"\"\n        :type source: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def removeComments(self, source):\n        \"\"\"\n        :type source: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** removeComments(char** source, int sourceSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> RemoveComments(string[] source) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} source\n * @return {string[]}\n */\nvar removeComments = function(source) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} source\n# @return {String[]}\ndef remove_comments(source)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func removeComments(_ source: [String]) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func removeComments(source []string) []string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def removeComments(source: Array[String]): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun removeComments(source: Array<String>): List<String> {\n        \n    }\n}"}],"testcase":"[\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]","testable":true,"templateMeta":{"name":"removeComments","params":[{"name":"source","type":"string[]"}],"return":{"type":"list<string>"}}}