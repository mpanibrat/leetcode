{"id":861,"fid":832,"name":"Flipping an Image","slug":"flipping-an-image","link":"https://leetcode.com/problems/flipping-an-image/description/","percent":69.10639629134552,"level":"Easy","category":"algorithms","totalAC":"48.6K","totalSubmit":"70.3K","desc":"Given a binary matrix A, we want to flip the image horizontally, then invert it, and return the resulting image.\r\n\r\nTo flip an image horizontally means that each row of the image is reversed.  For example, flipping [1, 1, 0] horizontally results in [0, 1, 1].\r\n\r\nTo invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0. For example, inverting [0, 1, 1] results in [1, 0, 0].\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[1,1,0],[1,0,1],[0,0,0]]\r\nOutput: [[1,0,0],[0,1,0],[1,1,1]]\r\nExplanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\r\nThen, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\r\nOutput: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\nExplanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\r\nThen invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\r\n\r\n\r\nNotes:\r\n\r\n\r\n\t1 <= A.length = A[0].length <= 20\r\n\t0 <= A[i][j] <= 1\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> flipAndInvertImage(vector<vector<int>>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[][] flipAndInvertImage(int[][] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def flipAndInvertImage(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def flipAndInvertImage(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *columnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** flipAndInvertImage(int** A, int ARowSize, int *AColSizes, int** columnSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[][] FlipAndInvertImage(int[][] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} A\n * @return {number[][]}\n */\nvar flipAndInvertImage = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} a\n# @return {Integer[][]}\ndef flip_and_invert_image(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func flipAndInvertImage(_ A: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func flipAndInvertImage(A [][]int) [][]int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def flipAndInvertImage(A: Array[Array[Int]]): Array[Array[Int]] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun flipAndInvertImage(A: Array<IntArray>): Array<IntArray> {\n        \n    }\n}"}],"testcase":"[[1,1,0],[1,0,1],[0,0,0]]","testable":true,"templateMeta":{"name":"flipAndInvertImage","params":[{"name":"A","type":"integer[][]"}],"return":{"type":"integer[][]"}}}