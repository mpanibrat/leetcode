{"id":899,"fid":868,"name":"Binary Gap","slug":"binary-gap","link":"https://leetcode.com/problems/binary-gap/description/","percent":58.77403846153846,"level":"Easy","category":"algorithms","totalAC":"13.2K","totalSubmit":"22.5K","desc":"Given a positive integer N, find and return the longest distance between two consecutive 1's in the binary representation of N.\r\n\r\nIf there aren't two consecutive 1's, return 0.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: 22\r\nOutput: 2\r\nExplanation: \r\n22 in binary is 0b10110.\r\nIn the binary representation of 22, there are three ones, and two consecutive pairs of 1's.\r\nThe first consecutive pair of 1's have distance 2.\r\nThe second consecutive pair of 1's have distance 1.\r\nThe answer is the largest of these two distances, which is 2.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: 5\r\nOutput: 2\r\nExplanation: \r\n5 in binary is 0b101.\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: 6\r\nOutput: 1\r\nExplanation: \r\n6 in binary is 0b110.\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: 8\r\nOutput: 0\r\nExplanation: \r\n8 in binary is 0b1000.\r\nThere aren't any consecutive pairs of 1's in the binary representation of 8, so we return 0.\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\nNote:\r\n\r\n\r\n\t1 <= N <= 10^9\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int binaryGap(int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int binaryGap(int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def binaryGap(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def binaryGap(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int binaryGap(int N) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int BinaryGap(int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @return {number}\n */\nvar binaryGap = function(N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef binary_gap(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func binaryGap(_ N: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func binaryGap(N int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def binaryGap(N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun binaryGap(N: Int): Int {\n        \n    }\n}"}],"testcase":"22","testable":true,"templateMeta":{"name":"binaryGap","params":[{"name":"N","type":"integer"}],"return":{"type":"integer"}}}