{"id":77,"fid":77,"name":"Combinations","slug":"combinations","link":"https://leetcode.com/problems/combinations/description/","percent":44.08595665456071,"level":"Medium","category":"algorithms","totalAC":"168.1K","totalSubmit":"381.4K","desc":"Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\r\n\r\nExample:\r\n\r\n\r\nInput:Â n = 4, k = 2\r\nOutput:\r\n[\r\n  [2,4],\r\n  [3,4],\r\n  [2,3],\r\n  [1,2],\r\n  [1,3],\r\n  [1,4],\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> combine(int n, int k) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> combine(int n, int k) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def combine(self, n, k):\r\n        \"\"\"\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def combine(self, n, k):\r\n        \"\"\"\r\n        :type n: int\r\n        :type k: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combine(int n, int k, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> Combine(int n, int k) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @param {number} k\r\n * @return {number[][]}\r\n */\r\nvar combine = function(n, k) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @param {Integer} k\r\n# @return {Integer[][]}\r\ndef combine(n, k)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func combine(_ n: Int, _ k: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func combine(n int, k int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def combine(n: Int, k: Int): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun combine(n: Int, k: Int): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"4\n2","testable":true,"templateMeta":{"name":"combine","params":[{"name":"n","type":"integer"},{"name":"k","type":"integer"}],"return":{"type":"list<list<integer>>","dealloc":true}}}