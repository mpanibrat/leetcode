{"id":836,"fid":818,"name":"Race Car","slug":"race-car","link":"https://leetcode.com/problems/race-car/description/","percent":31.019091153535896,"level":"Hard","category":"algorithms","totalAC":"5.8K","totalSubmit":"18.6K","desc":"Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)\r\n\r\nYour car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).\r\n\r\nWhen you get an instruction \"A\", your car does the following: position += speed, speed *= 2.\r\n\r\nWhen you get an instruction \"R\", your car does the following: if your speed is positive then speed = -1 , otherwise speed = 1.  (Your position stays the same.)\r\n\r\nFor example, after commands \"AAR\", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.\r\n\r\nNow for some target position, say the length of the shortest sequence of instructions to get there.\r\n\r\n\r\nExample 1:\r\nInput: \r\ntarget = 3\r\nOutput: 2\r\nExplanation: \r\nThe shortest instruction sequence is \"AA\".\r\nYour position goes from 0->1->3.\r\n\r\n\r\n\r\nExample 2:\r\nInput: \r\ntarget = 6\r\nOutput: 5\r\nExplanation: \r\nThe shortest instruction sequence is \"AAARA\".\r\nYour position goes from 0->1->3->7->7->6.\r\n\r\n\r\n \r\n\r\nNote: \r\n\r\n\r\n\t1 <= target <= 10000.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int racecar(int target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int racecar(int target) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def racecar(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def racecar(self, target):\n        \"\"\"\n        :type target: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int racecar(int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int Racecar(int target) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} target\n * @return {number}\n */\nvar racecar = function(target) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} target\n# @return {Integer}\ndef racecar(target)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func racecar(_ target: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func racecar(target int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def racecar(target: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun racecar(target: Int): Int {\n        \n    }\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"racecar","params":[{"name":"target","type":"integer"}],"return":{"type":"integer"}}}