{"id":834,"fid":816,"name":"Ambiguous Coordinates","slug":"ambiguous-coordinates","link":"https://leetcode.com/problems/ambiguous-coordinates/description/","percent":42.45854876091995,"level":"Medium","category":"algorithms","totalAC":"4.8K","totalSubmit":"11.2K","desc":"We had some 2-dimensional coordinates, like \"(1, 3)\" or \"(2, 0.5)\".  Then, we removed all commas, decimal points, and spaces, and ended up with the string S.  Return a list of strings representing all possibilities for what our original coordinates could have been.\r\n\r\nOur original representation never had extraneous zeroes, so we never started with numbers like \"00\", \"0.0\", \"0.00\", \"1.0\", \"001\", \"00.01\", or any other number that can be represented with less digits.  Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like \".1\".\r\n\r\nThe final answer list can be returned in any order.  Also note that all coordinates in the final answer have exactly one space between them (occurring after the comma.)\r\n\r\n\r\nExample 1:\r\nInput: \"(123)\"\r\nOutput: [\"(1, 23)\", \"(12, 3)\", \"(1.2, 3)\", \"(1, 2.3)\"]\r\n\r\n\r\n\r\nExample 2:\r\nInput: \"(00011)\"\r\nOutput:  [\"(0.001, 1)\", \"(0, 0.011)\"]\r\nExplanation: \r\n0.0, 00, 0001 or 00.01 are not allowed.\r\n\r\n\r\n\r\nExample 3:\r\nInput: \"(0123)\"\r\nOutput: [\"(0, 123)\", \"(0, 12.3)\", \"(0, 1.23)\", \"(0.1, 23)\", \"(0.1, 2.3)\", \"(0.12, 3)\"]\r\n\r\n\r\n\r\nExample 4:\r\nInput: \"(100)\"\r\nOutput: [(10, 0)]\r\nExplanation: \r\n1.0 is not allowed.\r\n\r\n\r\n \r\n\r\nNote: \r\n\r\n\r\n\t4 <= S.length <= 12.\r\n\tS[0] = \"(\", S[S.length - 1] = \")\", and the other elements in S are digits.\r\n\r\n\r\n \r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> ambiguousCoordinates(string S) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> ambiguousCoordinates(String S) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def ambiguousCoordinates(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def ambiguousCoordinates(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** ambiguousCoordinates(char* S, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> AmbiguousCoordinates(string S) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} S\n * @return {string[]}\n */\nvar ambiguousCoordinates = function(S) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String[]}\ndef ambiguous_coordinates(s)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func ambiguousCoordinates(_ S: String) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func ambiguousCoordinates(S string) []string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def ambiguousCoordinates(S: String): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun ambiguousCoordinates(S: String): List<String> {\n        \n    }\n}"}],"testcase":"\"(123)\"","testable":true,"templateMeta":{"name":"ambiguousCoordinates","params":[{"name":"S","type":"string"}],"return":{"type":"list<string>"}}}