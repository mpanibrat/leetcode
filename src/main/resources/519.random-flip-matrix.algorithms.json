{"id":913,"fid":519,"name":"Random Flip Matrix","slug":"random-flip-matrix","link":"https://leetcode.com/problems/random-flip-matrix/description/","percent":32.27217071890852,"level":"Medium","category":"algorithms","totalAC":"1.8K","totalSubmit":"5.7K","desc":"You are given the number of rows n_rows and number of columns n_cols of a 2D binary matrix where all values are initially 0. Write a function flip which chooses a 0 value uniformly at random, changes it to 1, and then returns the position [row.id, col.id] of that value. Also, write a function reset which sets all values back to 0. Try to minimize the number of calls to system's Math.random() and optimize the time and space complexity.\r\n\r\nNote:\r\n\r\n\r\n\t1 <= n_rows, n_cols <= 10000\r\n\t0 <= row.id < n_rows and 0 <= col.id < n_cols\r\n\tflip will not be called when the matrix has no 0 values left.\r\n\tthe total number of calls to flip and reset will not exceed 1000.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"flip\",\"flip\",\"flip\",\"flip\"]\r\n[[2,3],[],[],[],[]]\r\nOutput: [null,[0,1],[1,2],[1,0],[1,1]]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: \r\n[\"Solution\",\"flip\",\"flip\",\"reset\",\"flip\"]\r\n[[1,2],[],[],[],[]]\r\nOutput: [null,[0,0],[0,1],null,[0,0]]\r\n\r\n\r\nExplanation of Input Syntax:\r\n\r\nThe input is two lists: the subroutines called and their arguments. Solution's constructor has two arguments, n_rows and n_cols. flip and reset have no arguments. Arguments are always wrapped with a list, even if there aren't any.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    Solution(int n_rows, int n_cols) {\r\n        \r\n    }\r\n    \r\n    vector<int> flip() {\r\n        \r\n    }\r\n    \r\n    void reset() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(n_rows, n_cols);\r\n * vector<int> param_1 = obj.flip();\r\n * obj.reset();\r\n */"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n\r\n    public Solution(int n_rows, int n_cols) {\r\n        \r\n    }\r\n    \r\n    public int[] flip() {\r\n        \r\n    }\r\n    \r\n    public void reset() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(n_rows, n_cols);\r\n * int[] param_1 = obj.flip();\r\n * obj.reset();\r\n */"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n\r\n    def __init__(self, n_rows, n_cols):\r\n        \"\"\"\r\n        :type n_rows: int\r\n        :type n_cols: int\r\n        \"\"\"\r\n        \r\n\r\n    def flip(self):\r\n        \"\"\"\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def reset(self):\r\n        \"\"\"\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(n_rows, n_cols)\r\n# param_1 = obj.flip()\r\n# obj.reset()"},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n\r\n    def __init__(self, n_rows, n_cols):\r\n        \"\"\"\r\n        :type n_rows: int\r\n        :type n_cols: int\r\n        \"\"\"\r\n        \r\n\r\n    def flip(self):\r\n        \"\"\"\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        \r\n\r\n    def reset(self):\r\n        \"\"\"\r\n        :rtype: void\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution(n_rows, n_cols)\r\n# param_1 = obj.flip()\r\n# obj.reset()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} Solution;\r\n\r\nSolution* solutionCreate(int n_rows, int n_cols) {\r\n    \r\n}\r\n\r\nint* solutionFlip(Solution* obj, int *returnSize) {\r\n    \r\n}\r\n\r\nvoid solutionReset(Solution* obj) {\r\n    \r\n}\r\n\r\nvoid solutionFree(Solution* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your Solution struct will be instantiated and called as such:\r\n * struct Solution* obj = solutionCreate(n_rows, n_cols);\r\n * int* param_1 = solutionFlip(obj);\r\n * solutionReset(obj);\r\n * solutionFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n\r\n    public Solution(int n_rows, int n_cols) {\r\n        \r\n    }\r\n    \r\n    public int[] Flip() {\r\n        \r\n    }\r\n    \r\n    public void Reset() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * Solution obj = new Solution(n_rows, n_cols);\r\n * int[] param_1 = obj.Flip();\r\n * obj.Reset();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n_rows\r\n * @param {number} n_cols\r\n */\r\nvar Solution = function(n_rows, n_cols) {\r\n    \r\n};\r\n\r\n/**\r\n * @return {number[]}\r\n */\r\nSolution.prototype.flip = function() {\r\n    \r\n};\r\n\r\n/**\r\n * @return {void}\r\n */\r\nSolution.prototype.reset = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Object.create(Solution).createNew(n_rows, n_cols)\r\n * var param_1 = obj.flip()\r\n * obj.reset()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class Solution\r\n\r\n=begin\r\n    :type n_rows: Integer\r\n    :type n_cols: Integer\r\n=end\r\n    def initialize(n_rows, n_cols)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Integer[]\r\n=end\r\n    def flip()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    :rtype: Void\r\n=end\r\n    def reset()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your Solution object will be instantiated and called as such:\r\n# obj = Solution.new(n_rows, n_cols)\r\n# param_1 = obj.flip()\r\n# obj.reset()"},{"value":"swift","text":"Swift","defaultCode":"\nclass Solution {\n\n    init(_ n_rows: Int, _ n_cols: Int) {\n        \n    }\n    \n    func flip() -> [Int] {\n      \n    }\n    \n    func reset() {\n      \n    }\n}\n\n/**\n * Your Solution object will be instantiated and called as such:\n * let obj = Solution(n_rows, n_cols)\n * let ret_1: [Int] = obj.flip()\n * obj.reset()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type Solution struct {\r\n    \r\n}\r\n\r\n\r\nfunc Constructor(n_rows int, n_cols int) Solution {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Solution) Flip() []int {\r\n    \r\n}\r\n\r\n\r\nfunc (this *Solution) Reset()  {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * obj := Constructor(n_rows, n_cols);\r\n * param_1 := obj.Flip();\r\n * obj.Reset();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class Solution(_n_rows: Int, _n_cols: Int) {\r\n\r\n    def flip(): Array[Int] = {\r\n        \r\n    }\r\n\r\n    def reset() {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = new Solution(n_rows, n_cols)\r\n * var param_1 = obj.flip()\r\n * obj.reset()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution(n_rows: Int, n_cols: Int) {\r\n\r\n    fun flip(): IntArray {\r\n        \r\n    }\r\n\r\n    fun reset() {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your Solution object will be instantiated and called as such:\r\n * var obj = Solution(n_rows, n_cols)\r\n * var param_1 = obj.flip()\r\n * obj.reset()\r\n */"}],"testcase":"[\"Solution\", \"flip\", \"flip\", \"flip\", \"flip\"]\n[[2, 2], [], [], [], []]","testable":true,"templateMeta":{"classname":"Solution","maxbytesperline":200000,"constructor":{"params":[{"name":"n_rows","type":"integer"},{"name":"n_cols","type":"integer"}]},"methods":[{"name":"flip","params":[],"return":{"type":"integer[]"}},{"name":"reset","params":[],"return":{"type":"void"}}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}