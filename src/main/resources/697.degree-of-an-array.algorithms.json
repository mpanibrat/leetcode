{"id":697,"fid":697,"name":"Degree of an Array","slug":"degree-of-an-array","link":"https://leetcode.com/problems/degree-of-an-array/description/","percent":47.65780326977815,"level":"Easy","category":"algorithms","totalAC":"33.3K","totalSubmit":"69.9K","desc":"Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.\r\nYour task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.\r\n\r\nExample 1:\r\n\r\nInput: [1, 2, 2, 3, 1]\r\nOutput: 2\r\nExplanation: \r\nThe input array has a degree of 2 because both elements 1 and 2 appear twice.\r\nOf the subarrays that have the same degree:\r\n[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\r\nThe shortest length is 2. So return 2.\r\n\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [1,2,2,3,1,4,2]\r\nOutput: 6\r\n\r\n\r\n\r\nNote:\r\nnums.length will be between 1 and 50,000.\r\nnums[i] will be an integer between 0 and 49,999.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findShortestSubArray(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findShortestSubArray(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findShortestSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findShortestSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int findShortestSubArray(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindShortestSubArray(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findShortestSubArray = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_shortest_sub_array(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findShortestSubArray(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findShortestSubArray(nums []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findShortestSubArray(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findShortestSubArray(nums: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,2,2,3,1]","testable":true,"templateMeta":{"name":"findShortestSubArray","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}