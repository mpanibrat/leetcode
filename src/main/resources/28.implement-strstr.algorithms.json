{"id":28,"fid":28,"name":"Implement strStr()","slug":"implement-strstr","link":"https://leetcode.com/problems/implement-strstr/description/","percent":30.22956050380939,"level":"Easy","category":"algorithms","totalAC":"333.5K","totalSubmit":"1.1M","desc":"Implement strStr().\r\n\r\nReturn the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.\r\n\r\nExample 1:\r\n\r\n\r\nInput: haystack = \"hello\", needle = \"ll\"\r\nOutput: 2\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: haystack = \"aaaaa\", needle = \"bba\"\r\nOutput: -1\r\n\r\n\r\nClarification:\r\n\r\nWhat should we return when needle is an empty string? This is a great question to ask during an interview.\r\n\r\nFor the purpose of this problem, we will return 0 when needle is an empty string. This is consistent to C's strstr() and Java's indexOf().\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int strStr(string haystack, string needle) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int strStr(String haystack, String needle) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def strStr(self, haystack, needle):\r\n        \"\"\"\r\n        :type haystack: str\r\n        :type needle: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def strStr(self, haystack, needle):\r\n        \"\"\"\r\n        :type haystack: str\r\n        :type needle: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int strStr(char* haystack, char* needle) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int StrStr(string haystack, string needle) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} haystack\r\n * @param {string} needle\r\n * @return {number}\r\n */\r\nvar strStr = function(haystack, needle) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} haystack\r\n# @param {String} needle\r\n# @return {Integer}\r\ndef str_str(haystack, needle)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func strStr(haystack string, needle string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def strStr(haystack: String, needle: String): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun strStr(haystack: String, needle: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"hello\"\n\"ll\"","testable":true,"templateMeta":{"name":"strStr","params":[{"name":"haystack","type":"string"},{"name":"needle","type":"string"}],"return":{"type":"integer"}}}