{"id":952,"fid":916,"name":"Word Subsets","slug":"word-subsets","link":"https://leetcode.com/problems/word-subsets/description/","percent":42.82044908443119,"level":"Medium","category":"algorithms","totalAC":"5.2K","totalSubmit":"12.1K","desc":"We are given two arrays A and B of words.  Each word is a string of lowercase letters.\r\n\r\nNow, say that word b is a subset of word a if every letter in b occurs in a, including multiplicity.  For example, \"wrr\" is a subset of \"warrior\", but is not a subset of \"world\".\r\n\r\nNow say a word a from A is universal if for every b in B, b is a subset of a. \r\n\r\nReturn a list of all universal words in A.  You can return the words in any order.\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"e\",\"o\"]\r\nOutput: [\"facebook\",\"google\",\"leetcode\"]\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"l\",\"e\"]\r\nOutput: [\"apple\",\"google\",\"leetcode\"]\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"e\",\"oo\"]\r\nOutput: [\"facebook\",\"google\"]\r\n\r\n\r\n\r\nExample 4:\r\n\r\n\r\nInput: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"lo\",\"eo\"]\r\nOutput: [\"google\",\"leetcode\"]\r\n\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: A = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], B = [\"ec\",\"oc\",\"ceo\"]\r\nOutput: [\"facebook\",\"leetcode\"]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length, B.length <= 10000\r\n\t1 <= A[i].length, B[i].length <= 10\r\n\tA[i] and B[i] consist only of lowercase letters.\r\n\tAll words in A[i] are unique: there isn't i != j with A[i] == A[j].\r\n\r\n\r\n\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> wordSubsets(vector<string>& A, vector<string>& B) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> wordSubsets(String[] A, String[] B) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def wordSubsets(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def wordSubsets(self, A, B):\n        \"\"\"\n        :type A: List[str]\n        :type B: List[str]\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** wordSubsets(char** A, int ASize, char** B, int BSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> WordSubsets(string[] A, string[] B) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} A\n * @param {string[]} B\n * @return {string[]}\n */\nvar wordSubsets = function(A, B) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} a\n# @param {String[]} b\n# @return {String[]}\ndef word_subsets(a, b)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordSubsets(_ A: [String], _ B: [String]) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordSubsets(A []string, B []string) []string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def wordSubsets(A: Array[String], B: Array[String]): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun wordSubsets(A: Array<String>, B: Array<String>): List<String> {\n        \n    }\n}"}],"testcase":"[\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"]\n[\"e\",\"o\"]","testable":true,"templateMeta":{"name":"wordSubsets","params":[{"name":"A","type":"string[]"},{"name":"B","type":"string[]"}],"return":{"type":"list<string>"}}}