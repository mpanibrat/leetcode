{"id":639,"fid":639,"name":"Decode Ways II","slug":"decode-ways-ii","link":"https://leetcode.com/problems/decode-ways-ii/description/","percent":24.091701683674927,"level":"Hard","category":"algorithms","totalAC":"16.9K","totalSubmit":"70K","desc":"\r\nA message containing letters from A-Z is being encoded to numbers using the following mapping way:\r\n\r\n\r\n\r\n'A' -> 1\r\n'B' -> 2\r\n...\r\n'Z' -> 26\r\n\r\n\r\n\r\nBeyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.\r\n\r\n\r\n\r\n\r\nGiven the encoded message containing digits and the character '*', return the total number of ways to decode it.\r\n\r\n\r\n\r\nAlso, since the answer may be very large, you should return the output mod 109 + 7.\r\n\r\n\r\nExample 1:\r\n\r\nInput: \"*\"\r\nOutput: 9\r\nExplanation: The encoded message can be decoded to the string: \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\".\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: \"1*\"\r\nOutput: 9 + 9 = 18\r\n\r\n\r\n\r\nNote:\r\n\r\nThe length of the input string will fit in range [1, 105].\r\nThe input string will only contain the character '*' and digits '0' - '9'.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int numDecodings(string s) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int numDecodings(String s) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def numDecodings(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def numDecodings(self, s):\r\n        \"\"\"\r\n        :type s: str\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int numDecodings(char* s) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int NumDecodings(string s) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @return {number}\r\n */\r\nvar numDecodings = function(s) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @return {Integer}\r\ndef num_decodings(s)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numDecodings(_ s: String) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numDecodings(s string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numDecodings(s: String): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun numDecodings(s: String): Int {\r\n        \r\n    }\r\n}"}],"testcase":"\"*\"","testable":true,"templateMeta":{"name":"numDecodings","params":[{"name":"s","type":"string"}],"return":{"type":"integer"}}}