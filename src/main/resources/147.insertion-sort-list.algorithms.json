{"id":147,"fid":147,"name":"Insertion Sort List","slug":"insertion-sort-list","link":"https://leetcode.com/problems/insertion-sort-list/description/","percent":35.342969426497035,"level":"Medium","category":"algorithms","totalAC":"132.7K","totalSubmit":"375.3K","desc":"Sort a linked list using insertion sort.\r\n\r\n\r\n\r\n\r\n\r\nA graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.\r\nWith each iteration one element (red) is removed from the input data and inserted in-place into the sorted list\r\nÂ \r\n\r\n\r\n\r\n\r\nAlgorithm of Insertion Sort:\r\n\r\n\r\n\tInsertion sort iterates, consuming one input element each repetition, and growing a sorted output list.\r\n\tAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.\r\n\tIt repeats until no input elements remain.\r\n\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: 4->2->1->3\r\nOutput: 1->2->3->4\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: -1->5->3->4->0\r\nOutput: -1->0->3->4->5\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     ListNode *next;\r\n *     ListNode(int x) : val(x), next(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    ListNode* insertionSortList(ListNode* head) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     int val;\r\n *     ListNode next;\r\n *     ListNode(int x) { val = x; }\r\n * }\r\n */\r\nclass Solution {\r\n    public ListNode insertionSortList(ListNode head) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode(object):\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution(object):\r\n    def insertionSortList(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode:\r\n#     def __init__(self, x):\r\n#         self.val = x\r\n#         self.next = None\r\n\r\nclass Solution:\r\n    def insertionSortList(self, head):\r\n        \"\"\"\r\n        :type head: ListNode\r\n        :rtype: ListNode\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n */\r\nstruct ListNode* insertionSortList(struct ListNode* head) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public ListNode InsertionSortList(ListNode head) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * function ListNode(val) {\r\n *     this.val = val;\r\n *     this.next = null;\r\n * }\r\n */\r\n/**\r\n * @param {ListNode} head\r\n * @return {ListNode}\r\n */\r\nvar insertionSortList = function(head) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for singly-linked list.\r\n# class ListNode\r\n#     attr_accessor :val, :next\r\n#     def initialize(val)\r\n#         @val = val\r\n#         @next = nil\r\n#     end\r\n# end\r\n\r\n# @param {ListNode} head\r\n# @return {ListNode}\r\ndef insertion_sort_list(head)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func insertionSortList(_ head: ListNode?) -> ListNode? {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * type ListNode struct {\r\n *     Val int\r\n *     Next *ListNode\r\n * }\r\n */\r\nfunc insertionSortList(head *ListNode) *ListNode {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var _x: Int = 0) {\r\n *   var next: ListNode = null\r\n *   var x: Int = _x\r\n * }\r\n */\r\nobject Solution {\r\n    def insertionSortList(head: ListNode): ListNode = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for singly-linked list.\r\n * class ListNode(var `val`: Int = 0) {\r\n *     var next: ListNode? = null\r\n * }\r\n */\r\nclass Solution {\r\n    fun insertionSortList(head: ListNode?): ListNode? {\r\n        \r\n    }\r\n}"}],"testcase":"[4,2,1,3]","testable":true,"templateMeta":{"name":"insertionSortList","params":[{"name":"head","type":"ListNode","dealloc":false}],"return":{"type":"ListNode","dealloc":true}}}