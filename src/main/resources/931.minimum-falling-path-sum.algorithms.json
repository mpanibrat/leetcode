{"id":967,"fid":931,"name":"Minimum Falling Path Sum","slug":"minimum-falling-path-sum","link":"https://leetcode.com/problems/minimum-falling-path-sum/description/","percent":55.359565807327,"level":"Medium","category":"algorithms","totalAC":"3.7K","totalSubmit":"6.6K","desc":"Given a square array of integers A, we want the minimum sum of a falling path through A.\r\n\r\nA falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [[1,2,3],[4,5,6],[7,8,9]]\r\nOutput: 12\r\nExplanation: \r\nThe possible falling paths are:\r\n\r\n\r\n\r\n\t[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]\r\n\t[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]\r\n\t[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]\r\n\r\n\r\nThe falling path with the smallest sum is [1,4,7], so the answer is 12.\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length == A[0].length <= 100\r\n\t-100 <= A[i][j] <= 100\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minFallingPathSum(vector<vector<int>>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minFallingPathSum(int[][] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minFallingPathSum(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minFallingPathSum(self, A):\n        \"\"\"\n        :type A: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int minFallingPathSum(int** A, int ARowSize, int *AColSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinFallingPathSum(int[][] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} A\n * @return {number}\n */\nvar minFallingPathSum = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} a\n# @return {Integer}\ndef min_falling_path_sum(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minFallingPathSum(_ A: [[Int]]) -> Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minFallingPathSum(A [][]int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minFallingPathSum(A: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minFallingPathSum(A: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[1,2,3],[4,5,6],[7,8,9]]","testable":true,"templateMeta":{"name":"minFallingPathSum","params":[{"name":"A","type":"integer[][]"}],"return":{"type":"integer"}}}