{"id":761,"fid":759,"name":"Employee Free Time","slug":"employee-free-time","link":"https://leetcode.com/problems/employee-free-time/description/","percent":55.34490055014812,"level":"Hard","category":"algorithms","totalAC":"6.5K","totalSubmit":"11.8K","desc":"\r\nWe are given a list schedule of employees, which represents the working time for each employee.\r\n\r\nEach employee has a list of non-overlapping Intervals, and these intervals are in sorted order.\r\n\r\nReturn the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.\r\n\r\n\r\nExample 1:\r\n\r\nInput: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]\r\nOutput: [[3,4]]\r\nExplanation:\r\nThere are a total of three employees, and all common\r\nfree time intervals would be [-inf, 1], [3, 4], [10, inf].\r\nWe discard any intervals that contain inf as they aren't finite.\r\n\r\n\r\nExample 2:\r\n\r\nInput: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]\r\nOutput: [[5,6],[7,9]]\r\n\r\n\r\n\r\n\r\n(Even though we are representing Intervals in the form [x, y], the objects inside are Intervals, not lists or arrays.  For example, schedule[0][0].start = 1, schedule[0][0].end = 2, and schedule[0][0][0] is not defined.)\r\n\r\nAlso, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.\r\n\r\n\r\nNote:\r\nschedule and schedule[i] are lists with lengths in range [1, 50].\r\n0 .\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * Definition for an interval.\n * struct Interval {\n *     int start;\n *     int end;\n *     Interval() : start(0), end(0) {}\n *     Interval(int s, int e) : start(s), end(e) {}\n * };\n */\nclass Solution {\npublic:\n    vector<Interval> employeeFreeTime(vector<vector<Interval>>& schedule) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * Definition for an interval.\n * public class Interval {\n *     int start;\n *     int end;\n *     Interval() { start = 0; end = 0; }\n *     Interval(int s, int e) { start = s; end = e; }\n * }\n */\nclass Solution {\n    public List<Interval> employeeFreeTime(List<List<Interval>> schedule) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for an interval.\n# class Interval(object):\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution(object):\n    def employeeFreeTime(self, schedule):\n        \"\"\"\n        :type schedule: List[List[Interval]]\n        :rtype: List[Interval]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for an interval.\n# class Interval:\n#     def __init__(self, s=0, e=0):\n#         self.start = s\n#         self.end = e\n\nclass Solution:\n    def employeeFreeTime(self, schedule):\n        \"\"\"\n        :type schedule: List[List[Interval]]\n        :rtype: List[Interval]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Definition for an interval.\n * struct Interval {\n *     int start;\n *     int end;\n * };\n */\n/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nstruct Interval* employeeFreeTime(struct Interval** schedule, int scheduleRowSize, int *scheduleColSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"/**\n * Definition for an interval.\n * public class Interval {\n *     public int start;\n *     public int end;\n *     public Interval() { start = 0; end = 0; }\n *     public Interval(int s, int e) { start = s; end = e; }\n * }\n */\npublic class Solution {\n    public IList<Interval> EmployeeFreeTime(IList<IList<Interval>> schedule) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for an interval.\n * function Interval(start, end) {\n *     this.start = start;\n *     this.end = end;\n * }\n */\n/**\n * @param {Interval[][]} schedule\n * @return {Interval[]}\n */\nvar employeeFreeTime = function(schedule) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for an interval.\n# class Interval\n#     attr_accessor :start, :end\n#     def initialize(s=0, e=0)\n#         @start = s\n#         @end = e\n#     end\n# end\n\n# @param {Interval[][]} schedule\n# @return {Interval[]}\ndef employee_free_time(schedule)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for an interval.\n * public class Interval {\n *   public var start: Int\n *   public var end: Int\n *   public init(_ start: Int, _ end: Int) {\n *     self.start = start\n *     self.end = end\n *   }\n * }\n */\nclass Solution {\n    func employeeFreeTime(_ schedule: [[Interval]]) -> [Interval] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for an interval.\n * type Interval struct {\n *\t   Start int\n *\t   End   int\n * }\n */\nfunc employeeFreeTime(schedule [][]Interval) []Interval {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for an interval.\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\n *   var start: Int = _start\n *   var end: Int = _end\n * }\n */\nobject Solution {\n    def employeeFreeTime(schedule: List[List[Interval]]): List[Interval] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for an interval.\n * class Interval(\n *     var start: Int = 0,\n *     var end: Int = 0\n * )\n */\nclass Solution {\n    fun employeeFreeTime(schedule: List<List<Interval>>): List<Interval> {\n        \n    }\n}"}],"testcase":"[[[1,2],[5,6]],[[1,3]],[[4,10]]]","testable":true,"templateMeta":{"name":"employeeFreeTime","params":[{"name":"schedule","type":"list<list<Interval>>"}],"return":{"type":"list<Interval>"}}}