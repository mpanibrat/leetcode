{"id":392,"fid":392,"name":"Is Subsequence","slug":"is-subsequence","link":"https://leetcode.com/problems/is-subsequence/description/","percent":45.26046397528294,"level":"Medium","category":"algorithms","totalAC":"68.3K","totalSubmit":"150.8K","desc":"\r\nGiven a string s and a string t, check if s is subsequence of t.\r\n\r\n\r\n\r\nYou may assume that there is only lower case English letters in both s and t. t is potentially a very long (length ~= 500,000) string, and s is a short string (\r\n\r\n\r\nA subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, \"ace\" is a subsequence of \"abcde\" while \"aec\" is not).\r\n\r\n\r\nExample 1:\r\ns = \"abc\", t = \"ahbgdc\"\r\n\r\n\r\nReturn true.\r\n\r\n\r\nExample 2:\r\ns = \"axc\", t = \"ahbgdc\"\r\n\r\n\r\nReturn false.\r\n\r\n\r\nFollow up:\r\nIf there are lots of incoming S, say S1, S2, ... , Sk where k >= 1B, and you want to check one by one to see if T has its subsequence. In this scenario, how would you change your code?\r\n\r\nCredits:Special thanks to @pbrother for adding this problem and creating all test cases.","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool isSubsequence(string s, string t) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isSubsequence(String s, String t) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def isSubsequence(self, s, t):\r\n        \"\"\"\r\n        :type s: str\r\n        :type t: str\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"bool isSubsequence(char* s, char* t) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool IsSubsequence(string s, string t) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @param {string} t\r\n * @return {boolean}\r\n */\r\nvar isSubsequence = function(s, t) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String} t\r\n# @return {Boolean}\r\ndef is_subsequence(s, t)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isSubsequence(_ s: String, _ t: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isSubsequence(s string, t string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isSubsequence(s: String, t: String): Boolean = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isSubsequence(s: String, t: String): Boolean {\n        \n    }\n}"}],"testcase":"\"abc\"\n\"ahbgdc\"","testable":true,"templateMeta":{"name":"isSubsequence","params":[{"name":"s","type":"string"},{"name":"t","type":"string"}],"return":{"type":"boolean"}}}