{"id":804,"fid":788,"name":"Rotated Digits","slug":"rotated-digits","link":"https://leetcode.com/problems/rotated-digits/description/","percent":51.15976331360947,"level":"Easy","category":"algorithms","totalAC":"17.3K","totalSubmit":"33.8K","desc":"X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.\r\n\r\nA number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other; 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.\r\n\r\nNow given a positive number N, how many numbers X from 1 to N are good?\r\n\r\n\r\nExample:\r\nInput: 10\r\nOutput: 4\r\nExplanation: \r\nThere are four good numbers in the range [1, 10] : 2, 5, 6, 9.\r\nNote that 1 and 10 are not good numbers, since they remain unchanged after rotating.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tN  will be in range [1, 10000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int rotatedDigits(int N) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int rotatedDigits(int N) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def rotatedDigits(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def rotatedDigits(self, N):\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int rotatedDigits(int N) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int RotatedDigits(int N) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} N\n * @return {number}\n */\nvar rotatedDigits = function(N) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\n# @return {Integer}\ndef rotated_digits(n)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func rotatedDigits(_ N: Int) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func rotatedDigits(N int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def rotatedDigits(N: Int): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun rotatedDigits(N: Int): Int {\n        \n    }\n}"}],"testcase":"10","testable":true,"templateMeta":{"name":"rotatedDigits","params":[{"name":"N","type":"integer"}],"return":{"type":"integer"}}}