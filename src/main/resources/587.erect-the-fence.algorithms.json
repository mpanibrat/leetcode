{"id":587,"fid":587,"name":"Erect the Fence","slug":"erect-the-fence","link":"https://leetcode.com/problems/erect-the-fence/description/","percent":33.55763095307152,"level":"Hard","category":"algorithms","totalAC":"5.8K","totalSubmit":"17.2K","desc":"There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\r\nOutput: [[1,1],[2,0],[4,2],[3,3],[2,4]]\r\nExplanation:\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1,2],[2,2],[4,2]]\r\nOutput: [[1,2],[2,2],[4,2]]\r\nExplanation:\r\n\r\nEven you only have trees in a line, you need to use rope to enclose them. \r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tAll trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.\r\n\tAll input integers will range from 0 to 100.\r\n\tThe garden has at least one tree.\r\n\tAll coordinates are distinct.\r\n\tInput points have NO order. No order required for output.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for a point.\r\n * struct Point {\r\n *     int x;\r\n *     int y;\r\n *     Point() : x(0), y(0) {}\r\n *     Point(int a, int b) : x(a), y(b) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<Point> outerTrees(vector<Point>& points) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for a point.\r\n * class Point {\r\n *     int x;\r\n *     int y;\r\n *     Point() { x = 0; y = 0; }\r\n *     Point(int a, int b) { x = a; y = b; }\r\n * }\r\n */\r\nclass Solution {\r\n    public List<Point> outerTrees(Point[] points) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for a point.\r\n# class Point(object):\r\n#     def __init__(self, a=0, b=0):\r\n#         self.x = a\r\n#         self.y = b\r\n\r\nclass Solution(object):\r\n    def outerTrees(self, points):\r\n        \"\"\"\r\n        :type points: List[Point]\r\n        :rtype: List[Point]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def outerTrees(self, points):\r\n        \"\"\"\r\n        :type points: List[Point]\r\n        :rtype: List[Point]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for a point.\r\n * struct Point {\r\n *     int x;\r\n *     int y;\r\n * }\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct Point* outerTrees(struct Point* points, int pointsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for a point.\r\n * public class Point {\r\n *     public int x;\r\n *     public int y;\r\n *     public Point() { x = 0; y = 0; }\r\n *     public Point(int a, int b) { x = a; y = b; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<Point> OuterTrees(Point[] points) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for a point.\r\n * function Point(x, y) {\r\n *     this.x = x;\r\n *     this.y = y;\r\n * }\r\n */\r\n/**\r\n * @param {Point[]} points\r\n * @return {Point[]}\r\n */\r\nvar outerTrees = function(points) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for a point.\r\n# class Point\r\n#     attr_accessor :x, :y\r\n#     def initialize(x=0, y=0)\r\n#         @x = x\r\n#         @y = y\r\n#     end\r\n# end\r\n\r\n# @param {Point[]} points\r\n# @return {Point[]}\r\ndef outer_trees(points)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\r\n * Definition for a point.\r\n * public class Point {\r\n *   public var x: Int\r\n *   public var y: Int\r\n *   public init(_ x: Int, _ y: Int) {\r\n *     self.x = x\r\n *     self.y = y\r\n *   }\r\n * }\r\n */\r\nclass Solution {\r\n    func outerTrees(_ points: [Point]) -> [Point] {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for a point.\r\n * type Point struct {\r\n *     X int\r\n *     Y int\r\n * }\r\n */\r\nfunc outerTrees(points []Point) []Point {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for a point.\r\n * class Point(var _x: Int, var _y: Int) {\r\n *     var x: Int = _x\r\n *     var y: Int = _y\r\n * }\r\n */\r\nobject Solution {\r\n    def outerTrees(points: Array[Point]): List[Point] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for a point.\r\n * class Point(\r\n *     var x: Int = 0,\r\n *     var y: Int = 0\r\n * )\r\n */\r\nclass Solution {\r\n    fun outerTrees(points: Array<Point>): List<Point> {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]","testable":true,"templateMeta":{"name":"outerTrees","params":[{"name":"points","type":"Point[]"}],"return":{"type":"list<Point>"}}}