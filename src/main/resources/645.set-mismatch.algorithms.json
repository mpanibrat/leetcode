{"id":645,"fid":645,"name":"Set Mismatch","slug":"set-mismatch","link":"https://leetcode.com/problems/set-mismatch/description/","percent":39.95370218713489,"level":"Easy","category":"algorithms","totalAC":"36.6K","totalSubmit":"91.6K","desc":"\r\nThe set S originally contains numbers from 1 to n. But unfortunately, due to the data error, one of the numbers in the set got duplicated to another number in the set, which results in repetition of one number and loss of another number. \r\n\r\n\r\n\r\nGiven an array nums representing the data status of this set after the error. Your task is to firstly find the number occurs twice and then find the number that is missing. Return them in the form of an array.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: nums = [1,2,2,4]\r\nOutput: [2,3]\r\n\r\n\r\n\r\nNote:\r\n\r\nThe given array size will in the range [2, 10000].\r\nThe given array's numbers won't have any order.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> findErrorNums(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] findErrorNums(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findErrorNums(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findErrorNums(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findErrorNums(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] FindErrorNums(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar findErrorNums = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef find_error_nums(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findErrorNums(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findErrorNums(nums []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findErrorNums(nums: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findErrorNums(nums: IntArray): IntArray {\n        \n    }\n}"}],"testcase":"[1,2,2,4]","testable":true,"templateMeta":{"name":"findErrorNums","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}