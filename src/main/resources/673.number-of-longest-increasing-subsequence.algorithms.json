{"id":673,"fid":673,"name":"Number of Longest Increasing Subsequence","slug":"number-of-longest-increasing-subsequence","link":"https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/","percent":32.29044102011596,"level":"Medium","category":"algorithms","totalAC":"22.8K","totalSubmit":"70.5K","desc":"\r\nGiven an unsorted array of integers, find the number of longest increasing subsequence.\r\n\r\n\r\nExample 1:\r\n\r\nInput: [1,3,5,4,7]\r\nOutput: 2\r\nExplanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].\r\n\r\n\r\n\r\nExample 2:\r\n\r\nInput: [2,2,2,2,2]\r\nOutput: 5\r\nExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.\r\n\r\n\r\n\r\nNote:\r\nLength of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findNumberOfLIS(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findNumberOfLIS(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findNumberOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findNumberOfLIS(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int findNumberOfLIS(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindNumberOfLIS(int[] nums) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findNumberOfLIS = function(nums) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef find_number_of_lis(nums)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findNumberOfLIS(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findNumberOfLIS(nums []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findNumberOfLIS(nums: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findNumberOfLIS(nums: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,3,5,4,7]","testable":true,"templateMeta":{"name":"findNumberOfLIS","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}