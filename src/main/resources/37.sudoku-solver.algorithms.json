{"id":37,"fid":37,"name":"Sudoku Solver","slug":"sudoku-solver","link":"https://leetcode.com/problems/sudoku-solver/description/","percent":34.00178039838807,"level":"Hard","category":"algorithms","totalAC":"106.6K","totalSubmit":"313.4K","desc":"Write a program to solve a Sudoku puzzle by filling the empty cells.\r\n\r\nA sudoku solution must satisfy all of the following rules:\r\n\r\n\r\n\tEach of the digits 1-9 must occur exactly once in each row.\r\n\tEach of the digits 1-9 must occur exactly once in each column.\r\n\tEach of the the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\r\n\r\n\r\nEmpty cells are indicated by the character '.'.\r\n\r\n\r\nA sudoku puzzle...\r\n\r\n\r\n...and its solution numbers marked in red.\r\n\r\nNote:\r\n\r\n\r\n\tThe given board contain only digits 1-9 and the character '.'.\r\n\tYou may assume that the given Sudoku puzzle will have a single unique solution.\r\n\tThe given board size is always 9x9.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    void solveSudoku(vector<vector<char>>& board) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public void solveSudoku(char[][] board) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def solveSudoku(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def solveSudoku(self, board):\r\n        \"\"\"\r\n        :type board: List[List[str]]\r\n        :rtype: void Do not return anything, modify board in-place instead.\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"void solveSudoku(char** board, int boardRowSize, int boardColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public void SolveSudoku(char[,] board) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {character[][]} board\r\n * @return {void} Do not return anything, modify board in-place instead.\r\n */\r\nvar solveSudoku = function(board) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\r\n# @return {Void} Do not return anything, modify board in-place instead.\r\ndef solve_sudoku(board)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func solveSudoku(_ board: inout [[Character]]) {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func solveSudoku(board [][]byte)  {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def solveSudoku(board: Array[Array[Char]]): Unit = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun solveSudoku(board: Array<CharArray>): Unit {\r\n        \r\n    }\r\n}"}],"testcase":"[[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]","testable":true,"templateMeta":{"name":"solveSudoku","params":[{"name":"board","type":"character[][]"}],"return":{"type":"void"},"output":{"paramindex":0}}}