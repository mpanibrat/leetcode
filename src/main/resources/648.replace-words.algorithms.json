{"id":648,"fid":648,"name":"Replace Words","slug":"replace-words","link":"https://leetcode.com/problems/replace-words/description/","percent":49.44065376071089,"level":"Medium","category":"algorithms","totalAC":"24.9K","totalSubmit":"50.4K","desc":"\r\nIn English, we have a concept called root, which can be followed by some other words to form another longer word - let's call this word successor. For example, the root an, followed by other, which can form another word another.\r\n\r\n\r\n\r\n\r\nNow, given a dictionary consisting of many roots and a sentence. You need to replace all the successor in the sentence with the root forming it. If a successor has many roots can form it, replace it with the root with the shortest length.\r\n\r\n\r\n\r\nYou need to output the sentence after the replacement.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: dict = [\"cat\", \"bat\", \"rat\"]\r\nsentence = \"the cattle was rattled by the battery\"\r\nOutput: \"the cat was rat by the bat\"\r\n\r\n\r\n\r\n\r\nNote:\r\n\r\nThe input will only have lower-case letters.\r\n 1 \r\n 1 \r\n 1 \r\n 1 \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string replaceWords(vector<string>& dict, string sentence) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String replaceWords(List<String> dict, String sentence) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def replaceWords(self, dict, sentence):\r\n        \"\"\"\r\n        :type dict: List[str]\r\n        :type sentence: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def replaceWords(self, dict, sentence):\r\n        \"\"\"\r\n        :type dict: List[str]\r\n        :type sentence: str\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* replaceWords(char** dict, int dictSize, char* sentence) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string ReplaceWords(IList<string> dict, string sentence) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} dict\r\n * @param {string} sentence\r\n * @return {string}\r\n */\r\nvar replaceWords = function(dict, sentence) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} dict\r\n# @param {String} sentence\r\n# @return {String}\r\ndef replace_words(dict, sentence)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func replaceWords(_ dict: [String], _ sentence: String) -> String {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func replaceWords(dict []string, sentence string) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def replaceWords(dict: List[String], sentence: String): String = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun replaceWords(dict: List<String>, sentence: String): String {\n        \n    }\n}"}],"testcase":"[\"cat\", \"bat\", \"rat\"]\n\"the cattle was rattled by the battery\"","testable":true,"templateMeta":{"name":"replaceWords","params":[{"name":"dict","type":"list<string>"},{"name":"sentence","type":"string"}],"return":{"type":"string"}}}