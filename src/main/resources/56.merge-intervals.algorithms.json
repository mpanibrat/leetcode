{"id":56,"fid":56,"name":"Merge Intervals","slug":"merge-intervals","link":"https://leetcode.com/problems/merge-intervals/description/","percent":33.492283930587824,"level":"Medium","category":"algorithms","totalAC":"258K","totalSubmit":"770.5K","desc":"Given a collection of intervals, merge all overlapping intervals.\r\n\r\nExample 1:\r\n\r\n\r\nInput: [[1,3],[2,6],[8,10],[15,18]]\r\nOutput: [[1,6],[8,10],[15,18]]\r\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [[1,4],[4,5]]\r\nOutput: [[1,5]]\r\nExplanation: Intervals [1,4] and [4,5] are considerred overlapping.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    vector<Interval> merge(vector<Interval>& intervals) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() { start = 0; end = 0; }\r\n *     Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\nclass Solution {\r\n    public List<Interval> merge(List<Interval> intervals) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for an interval.\r\n# class Interval(object):\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution(object):\r\n    def merge(self, intervals):\r\n        \"\"\"\r\n        :type intervals: List[Interval]\r\n        :rtype: List[Interval]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for an interval.\r\n# class Interval:\r\n#     def __init__(self, s=0, e=0):\r\n#         self.start = s\r\n#         self.end = e\r\n\r\nclass Solution:\r\n    def merge(self, intervals):\r\n        \"\"\"\r\n        :type intervals: List[Interval]\r\n        :rtype: List[Interval]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n * };\r\n */\r\n/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nstruct Interval* merge(struct Interval* intervals, int intervalsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\r\n * Definition for an interval.\r\n * public class Interval {\r\n *     public int start;\r\n *     public int end;\r\n *     public Interval() { start = 0; end = 0; }\r\n *     public Interval(int s, int e) { start = s; end = e; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public IList<Interval> Merge(IList<Interval> intervals) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Definition for an interval.\r\n * function Interval(start, end) {\r\n *     this.start = start;\r\n *     this.end = end;\r\n * }\r\n */\r\n/**\r\n * @param {Interval[]} intervals\r\n * @return {Interval[]}\r\n */\r\nvar merge = function(intervals) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for an interval.\r\n# class Interval\r\n#     attr_accessor :start, :end\r\n#     def initialize(s=0, e=0)\r\n#         @start = s\r\n#         @end = e\r\n#     end\r\n# end\r\n\r\n# @param {Interval[]} intervals\r\n# @return {Interval[]}\r\ndef merge(intervals)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for an interval.\n * public class Interval {\n *   public var start: Int\n *   public var end: Int\n *   public init(_ start: Int, _ end: Int) {\n *     self.start = start\n *     self.end = end\n *   }\n * }\n */\nclass Solution {\n    func merge(_ intervals: [Interval]) -> [Interval] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\r\n * Definition for an interval.\r\n * type Interval struct {\r\n *\t   Start int\r\n *\t   End   int\r\n * }\r\n */\r\nfunc merge(intervals []Interval) []Interval {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"/**\r\n * Definition for an interval.\r\n * class Interval(var _start: Int = 0, var _end: Int = 0) {\r\n *   var start: Int = _start\r\n *   var end: Int = _end\r\n * }\r\n */\r\nobject Solution {\r\n    def merge(intervals: List[Interval]): List[Interval] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\r\n * Definition for an interval.\r\n * class Interval(\r\n *     var start: Int = 0,\r\n *     var end: Int = 0\r\n * )\r\n */\r\nclass Solution {\r\n    fun merge(intervals: List<Interval>): List<Interval> {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,3],[2,6],[8,10],[15,18]]","testable":true,"templateMeta":{"name":"merge","params":[{"name":"intervals","type":"list<Interval>"}],"return":{"type":"list<Interval>"}}}