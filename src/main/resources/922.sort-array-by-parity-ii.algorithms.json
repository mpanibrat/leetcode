{"id":958,"fid":922,"name":"Sort Array By Parity II","slug":"sort-array-by-parity-ii","link":"https://leetcode.com/problems/sort-array-by-parity-ii/description/","percent":66.42100414555505,"level":"Easy","category":"algorithms","totalAC":"10.1K","totalSubmit":"15.2K","desc":"Given an array A of non-negative integers, half of the integers in A are odd, and half of the integers are even.\r\n\r\nSort the array so that whenever A[i] is odd, i is odd; and whenever A[i] is even, i is even.\r\n\r\nYou may return any answer array that satisfies this condition.\r\n\r\n \r\n\r\nExample 1:\r\n\r\n\r\nInput: [4,2,5,7]\r\nOutput: [4,5,2,7]\r\nExplanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t2 <= A.length <= 20000\r\n\tA.length % 2 == 0\r\n\t0 <= A[i] <= 1000\r\n\r\n\r\n\r\n \r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> sortArrayByParityII(vector<int>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] sortArrayByParityII(int[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def sortArrayByParityII(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def sortArrayByParityII(self, A):\n        \"\"\"\n        :type A: List[int]\n        :rtype: List[int]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* sortArrayByParityII(int* A, int ASize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] SortArrayByParityII(int[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @return {number[]}\n */\nvar sortArrayByParityII = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @return {Integer[]}\ndef sort_array_by_parity_ii(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func sortArrayByParityII(_ A: [Int]) -> [Int] {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func sortArrayByParityII(A []int) []int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def sortArrayByParityII(A: Array[Int]): Array[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun sortArrayByParityII(A: IntArray): IntArray {\n        \n    }\n}"}],"testcase":"[4,2,5,7]","testable":true,"templateMeta":{"name":"sortArrayByParityII","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer[]"}}}