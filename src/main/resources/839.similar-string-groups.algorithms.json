{"id":869,"fid":839,"name":"Similar String Groups","slug":"similar-string-groups","link":"https://leetcode.com/problems/similar-string-groups/description/","percent":32.95366295625162,"level":"Hard","category":"algorithms","totalAC":"5.1K","totalSubmit":"15.5K","desc":"Two strings X and Y are similar if we can swap two letters (in different positions) of X, so that it equals Y.\r\n\r\nFor example, \"tars\" and \"rats\" are similar (swapping at positions 0 and 2), and \"rats\" and \"arts\" are similar, but \"star\" is not similar to \"tars\", \"rats\", or \"arts\".\r\n\r\nTogether, these form two connected groups by similarity: {\"tars\", \"rats\", \"arts\"} and {\"star\"}.  Notice that \"tars\" and \"arts\" are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.\r\n\r\nWe are given a list A of strings.  Every string in A is an anagram of every other string in A.  How many groups are there?\r\n\r\nExample 1:\r\n\r\n\r\nInput: [\"tars\",\"rats\",\"arts\",\"star\"]\r\nOutput: 2\r\n\r\nNote:\r\n\r\n\r\n\tA.length <= 2000\r\n\tA[i].length <= 1000\r\n\tA.length * A[i].length <= 20000\r\n\tAll words in A consist of lowercase letters only.\r\n\tAll words in A have the same length and are anagrams of each other.\r\n\tThe judging time limit has been increased for this question.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int numSimilarGroups(vector<string>& A) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int numSimilarGroups(String[] A) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def numSimilarGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def numSimilarGroups(self, A):\n        \"\"\"\n        :type A: List[str]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int numSimilarGroups(char** A, int ASize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int NumSimilarGroups(string[] A) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[]} A\n * @return {number}\n */\nvar numSimilarGroups = function(A) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} a\n# @return {Integer}\ndef num_similar_groups(a)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func numSimilarGroups(_ A: [String]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func numSimilarGroups(A []string) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def numSimilarGroups(A: Array[String]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun numSimilarGroups(A: Array<String>): Int {\n        \n    }\n}"}],"testcase":"[\"tars\",\"rats\",\"arts\",\"star\"]","testable":true,"templateMeta":{"name":"numSimilarGroups","params":[{"name":"A","type":"string[]"}],"return":{"type":"integer"}}}