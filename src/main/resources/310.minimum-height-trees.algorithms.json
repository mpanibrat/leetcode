{"id":310,"fid":310,"name":"Minimum Height Trees","slug":"minimum-height-trees","link":"https://leetcode.com/problems/minimum-height-trees/description/","percent":29.174454143670705,"level":"Medium","category":"algorithms","totalAC":"53.1K","totalSubmit":"181.9K","desc":"For a undirected graph with tree characteristics, we can choose any node as the root. The result graph is then a rooted tree. Among all possible rooted trees, those with minimum height are called minimum height trees (MHTs). Given such a graph, write a function to find all the MHTs and return a list of their root labels.\r\n\r\nFormat\r\nThe graph contains n nodes which are labeled from 0 to n - 1. You will be given the number n and a list of undirected edges (each edge is a pair of labels).\r\n\r\nYou can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.\r\n\r\nExample 1 :\r\n\r\n\r\nInput: n = 4, edges = [[1, 0], [1, 2], [1, 3]]\r\n\r\n        0\r\n        |\r\n        1\r\n       / \\\r\n      2   3 \r\n\r\nOutput: [1]\r\n\r\n\r\nExample 2 :\r\n\r\n\r\nInput: n = 6, edges = [[0, 3], [1, 3], [2, 3], [4, 3], [5, 4]]\r\n\r\n     0  1  2\r\n      \\ | /\r\n        3\r\n        |\r\n        4\r\n        |\r\n        5 \r\n\r\nOutput: [3, 4]\r\n\r\nNote:\r\n\r\n\r\n\tAccording to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”\r\n\tThe height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findMinHeightTrees(int n, vector<pair<int, int>>& edges) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findMinHeightTrees(self, n, edges):\r\n        \"\"\"\r\n        :type n: int\r\n        :type edges: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findMinHeightTrees(self, n, edges):\r\n        \"\"\"\r\n        :type n: int\r\n        :type edges: List[List[int]]\r\n        :rtype: List[int]\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findMinHeightTrees(int n, int** edges, int edgesRowSize, int edgesColSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> FindMinHeightTrees(int n, int[,] edges) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} n\r\n * @param {number[][]} edges\r\n * @return {number[]}\r\n */\r\nvar findMinHeightTrees = function(n, edges) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} n\r\n# @param {Integer[][]} edges\r\n# @return {Integer[]}\r\ndef find_min_height_trees(n, edges)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findMinHeightTrees(_ n: Int, _ edges: [[Int]]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findMinHeightTrees(n int, edges [][]int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findMinHeightTrees(n: Int, edges: Array[Array[Int]]): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findMinHeightTrees(n: Int, edges: Array<IntArray>): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"4\n[[1,0],[1,2],[1,3]]","testable":true,"templateMeta":{"name":"findMinHeightTrees","params":[{"name":"n","type":"integer"},{"name":"edges","type":"pair<integer,integer>[]"}],"return":{"type":"list<integer>"}}}