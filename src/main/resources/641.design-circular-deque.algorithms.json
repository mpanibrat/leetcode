{"id":859,"fid":641,"name":"Design Circular Deque","slug":"design-circular-deque","link":"https://leetcode.com/problems/design-circular-deque/description/","percent":47.89537502165252,"level":"Medium","category":"algorithms","totalAC":"2.8K","totalSubmit":"5.8K","desc":"Design your implementation of the circular double-ended queue (deque).\r\n\r\nYour implementation should support following operations:\r\n\r\n\r\n\tMyCircularDeque(k): Constructor, set the size of the deque to be k.\r\n\tinsertFront(): Adds an item at the front of Deque. Return true if the operation is successful.\r\n\tinsertLast(): Adds an item at the rear of Deque. Return true if the operation is successful.\r\n\tdeleteFront(): Deletes an item from the front of Deque. Return true if the operation is successful.\r\n\tdeleteLast(): Deletes an item from the rear of Deque. Return true if the operation is successful.\r\n\tgetFront(): Gets the front item from the Deque. If the deque is empty, return -1.\r\n\tgetRear(): Gets the last item from Deque. If the deque is empty, return -1.\r\n\tisEmpty(): Checks whether Deque is empty or not. \r\n\tisFull(): Checks whether Deque is full or not.\r\n\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\nMyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\r\ncircularDeque.insertLast(1);\t\t\t// return true\r\ncircularDeque.insertLast(2);\t\t\t// return true\r\ncircularDeque.insertFront(3);\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return false, the queue is full\r\ncircularDeque.getRear();  \t\t\t// return 2\r\ncircularDeque.isFull();\t\t\t\t// return true\r\ncircularDeque.deleteLast();\t\t\t// return true\r\ncircularDeque.insertFront(4);\t\t\t// return true\r\ncircularDeque.getFront();\t\t\t// return 4\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tAll values will be in the range of [0, 1000].\r\n\tThe number of operations will be in the range of [1, 1000].\r\n\tPlease do not use the built-in Deque library.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyCircularDeque {\r\npublic:\r\n    /** Initialize your data structure here. Set the size of the deque to be k. */\r\n    MyCircularDeque(int k) {\r\n        \r\n    }\r\n    \r\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\r\n    bool insertFront(int value) {\r\n        \r\n    }\r\n    \r\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\r\n    bool insertLast(int value) {\r\n        \r\n    }\r\n    \r\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\r\n    bool deleteFront() {\r\n        \r\n    }\r\n    \r\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\r\n    bool deleteLast() {\r\n        \r\n    }\r\n    \r\n    /** Get the front item from the deque. */\r\n    int getFront() {\r\n        \r\n    }\r\n    \r\n    /** Get the last item from the deque. */\r\n    int getRear() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular deque is empty or not. */\r\n    bool isEmpty() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular deque is full or not. */\r\n    bool isFull() {\r\n        \r\n    }\r\n};\r\n\r\n/**\r\n * Your MyCircularDeque object will be instantiated and called as such:\r\n * MyCircularDeque obj = new MyCircularDeque(k);\r\n * bool param_1 = obj.insertFront(value);\r\n * bool param_2 = obj.insertLast(value);\r\n * bool param_3 = obj.deleteFront();\r\n * bool param_4 = obj.deleteLast();\r\n * int param_5 = obj.getFront();\r\n * int param_6 = obj.getRear();\r\n * bool param_7 = obj.isEmpty();\r\n * bool param_8 = obj.isFull();\r\n */"},{"value":"java","text":"Java","defaultCode":"class MyCircularDeque {\r\n\r\n    /** Initialize your data structure here. Set the size of the deque to be k. */\r\n    public MyCircularDeque(int k) {\r\n        \r\n    }\r\n    \r\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\r\n    public boolean insertFront(int value) {\r\n        \r\n    }\r\n    \r\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\r\n    public boolean insertLast(int value) {\r\n        \r\n    }\r\n    \r\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\r\n    public boolean deleteFront() {\r\n        \r\n    }\r\n    \r\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\r\n    public boolean deleteLast() {\r\n        \r\n    }\r\n    \r\n    /** Get the front item from the deque. */\r\n    public int getFront() {\r\n        \r\n    }\r\n    \r\n    /** Get the last item from the deque. */\r\n    public int getRear() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular deque is empty or not. */\r\n    public boolean isEmpty() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular deque is full or not. */\r\n    public boolean isFull() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyCircularDeque object will be instantiated and called as such:\r\n * MyCircularDeque obj = new MyCircularDeque(k);\r\n * boolean param_1 = obj.insertFront(value);\r\n * boolean param_2 = obj.insertLast(value);\r\n * boolean param_3 = obj.deleteFront();\r\n * boolean param_4 = obj.deleteLast();\r\n * int param_5 = obj.getFront();\r\n * int param_6 = obj.getRear();\r\n * boolean param_7 = obj.isEmpty();\r\n * boolean param_8 = obj.isFull();\r\n */"},{"value":"python","text":"Python","defaultCode":"class MyCircularDeque(object):\r\n\r\n    def __init__(self, k):\r\n        \"\"\"\r\n        Initialize your data structure here. Set the size of the deque to be k.\r\n        :type k: int\r\n        \"\"\"\r\n        \r\n\r\n    def insertFront(self, value):\r\n        \"\"\"\r\n        Adds an item at the front of Deque. Return true if the operation is successful.\r\n        :type value: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def insertLast(self, value):\r\n        \"\"\"\r\n        Adds an item at the rear of Deque. Return true if the operation is successful.\r\n        :type value: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def deleteFront(self):\r\n        \"\"\"\r\n        Deletes an item from the front of Deque. Return true if the operation is successful.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def deleteLast(self):\r\n        \"\"\"\r\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def getFront(self):\r\n        \"\"\"\r\n        Get the front item from the deque.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def getRear(self):\r\n        \"\"\"\r\n        Get the last item from the deque.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def isEmpty(self):\r\n        \"\"\"\r\n        Checks whether the circular deque is empty or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def isFull(self):\r\n        \"\"\"\r\n        Checks whether the circular deque is full or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyCircularDeque object will be instantiated and called as such:\r\n# obj = MyCircularDeque(k)\r\n# param_1 = obj.insertFront(value)\r\n# param_2 = obj.insertLast(value)\r\n# param_3 = obj.deleteFront()\r\n# param_4 = obj.deleteLast()\r\n# param_5 = obj.getFront()\r\n# param_6 = obj.getRear()\r\n# param_7 = obj.isEmpty()\r\n# param_8 = obj.isFull()"},{"value":"python3","text":"Python3","defaultCode":"class MyCircularDeque:\r\n\r\n    def __init__(self, k):\r\n        \"\"\"\r\n        Initialize your data structure here. Set the size of the deque to be k.\r\n        :type k: int\r\n        \"\"\"\r\n        \r\n\r\n    def insertFront(self, value):\r\n        \"\"\"\r\n        Adds an item at the front of Deque. Return true if the operation is successful.\r\n        :type value: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def insertLast(self, value):\r\n        \"\"\"\r\n        Adds an item at the rear of Deque. Return true if the operation is successful.\r\n        :type value: int\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def deleteFront(self):\r\n        \"\"\"\r\n        Deletes an item from the front of Deque. Return true if the operation is successful.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def deleteLast(self):\r\n        \"\"\"\r\n        Deletes an item from the rear of Deque. Return true if the operation is successful.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def getFront(self):\r\n        \"\"\"\r\n        Get the front item from the deque.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def getRear(self):\r\n        \"\"\"\r\n        Get the last item from the deque.\r\n        :rtype: int\r\n        \"\"\"\r\n        \r\n\r\n    def isEmpty(self):\r\n        \"\"\"\r\n        Checks whether the circular deque is empty or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n    def isFull(self):\r\n        \"\"\"\r\n        Checks whether the circular deque is full or not.\r\n        :rtype: bool\r\n        \"\"\"\r\n        \r\n\r\n\r\n# Your MyCircularDeque object will be instantiated and called as such:\r\n# obj = MyCircularDeque(k)\r\n# param_1 = obj.insertFront(value)\r\n# param_2 = obj.insertLast(value)\r\n# param_3 = obj.deleteFront()\r\n# param_4 = obj.deleteLast()\r\n# param_5 = obj.getFront()\r\n# param_6 = obj.getRear()\r\n# param_7 = obj.isEmpty()\r\n# param_8 = obj.isFull()"},{"value":"c","text":"C","defaultCode":"typedef struct {\r\n    \r\n} MyCircularDeque;\r\n\r\n/** Initialize your data structure here. Set the size of the deque to be k. */\r\nMyCircularDeque* myCircularDequeCreate(int k) {\r\n    \r\n}\r\n\r\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\r\nbool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {\r\n    \r\n}\r\n\r\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\r\nbool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {\r\n    \r\n}\r\n\r\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\r\nbool myCircularDequeDeleteFront(MyCircularDeque* obj) {\r\n    \r\n}\r\n\r\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\r\nbool myCircularDequeDeleteLast(MyCircularDeque* obj) {\r\n    \r\n}\r\n\r\n/** Get the front item from the deque. */\r\nint myCircularDequeGetFront(MyCircularDeque* obj) {\r\n    \r\n}\r\n\r\n/** Get the last item from the deque. */\r\nint myCircularDequeGetRear(MyCircularDeque* obj) {\r\n    \r\n}\r\n\r\n/** Checks whether the circular deque is empty or not. */\r\nbool myCircularDequeIsEmpty(MyCircularDeque* obj) {\r\n    \r\n}\r\n\r\n/** Checks whether the circular deque is full or not. */\r\nbool myCircularDequeIsFull(MyCircularDeque* obj) {\r\n    \r\n}\r\n\r\nvoid myCircularDequeFree(MyCircularDeque* obj) {\r\n    \r\n}\r\n\r\n/**\r\n * Your MyCircularDeque struct will be instantiated and called as such:\r\n * struct MyCircularDeque* obj = myCircularDequeCreate(k);\r\n * bool param_1 = myCircularDequeInsertFront(obj, value);\r\n * bool param_2 = myCircularDequeInsertLast(obj, value);\r\n * bool param_3 = myCircularDequeDeleteFront(obj);\r\n * bool param_4 = myCircularDequeDeleteLast(obj);\r\n * int param_5 = myCircularDequeGetFront(obj);\r\n * int param_6 = myCircularDequeGetRear(obj);\r\n * bool param_7 = myCircularDequeIsEmpty(obj);\r\n * bool param_8 = myCircularDequeIsFull(obj);\r\n * myCircularDequeFree(obj);\r\n */"},{"value":"csharp","text":"C#","defaultCode":"public class MyCircularDeque {\r\n\r\n    /** Initialize your data structure here. Set the size of the deque to be k. */\r\n    public MyCircularDeque(int k) {\r\n        \r\n    }\r\n    \r\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\r\n    public bool InsertFront(int value) {\r\n        \r\n    }\r\n    \r\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\r\n    public bool InsertLast(int value) {\r\n        \r\n    }\r\n    \r\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\r\n    public bool DeleteFront() {\r\n        \r\n    }\r\n    \r\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\r\n    public bool DeleteLast() {\r\n        \r\n    }\r\n    \r\n    /** Get the front item from the deque. */\r\n    public int GetFront() {\r\n        \r\n    }\r\n    \r\n    /** Get the last item from the deque. */\r\n    public int GetRear() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular deque is empty or not. */\r\n    public bool IsEmpty() {\r\n        \r\n    }\r\n    \r\n    /** Checks whether the circular deque is full or not. */\r\n    public bool IsFull() {\r\n        \r\n    }\r\n}\r\n\r\n/**\r\n * Your MyCircularDeque object will be instantiated and called as such:\r\n * MyCircularDeque obj = new MyCircularDeque(k);\r\n * bool param_1 = obj.InsertFront(value);\r\n * bool param_2 = obj.InsertLast(value);\r\n * bool param_3 = obj.DeleteFront();\r\n * bool param_4 = obj.DeleteLast();\r\n * int param_5 = obj.GetFront();\r\n * int param_6 = obj.GetRear();\r\n * bool param_7 = obj.IsEmpty();\r\n * bool param_8 = obj.IsFull();\r\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * Initialize your data structure here. Set the size of the deque to be k.\r\n * @param {number} k\r\n */\r\nvar MyCircularDeque = function(k) {\r\n    \r\n};\r\n\r\n/**\r\n * Adds an item at the front of Deque. Return true if the operation is successful. \r\n * @param {number} value\r\n * @return {boolean}\r\n */\r\nMyCircularDeque.prototype.insertFront = function(value) {\r\n    \r\n};\r\n\r\n/**\r\n * Adds an item at the rear of Deque. Return true if the operation is successful. \r\n * @param {number} value\r\n * @return {boolean}\r\n */\r\nMyCircularDeque.prototype.insertLast = function(value) {\r\n    \r\n};\r\n\r\n/**\r\n * Deletes an item from the front of Deque. Return true if the operation is successful.\r\n * @return {boolean}\r\n */\r\nMyCircularDeque.prototype.deleteFront = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Deletes an item from the rear of Deque. Return true if the operation is successful.\r\n * @return {boolean}\r\n */\r\nMyCircularDeque.prototype.deleteLast = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the front item from the deque.\r\n * @return {number}\r\n */\r\nMyCircularDeque.prototype.getFront = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Get the last item from the deque.\r\n * @return {number}\r\n */\r\nMyCircularDeque.prototype.getRear = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Checks whether the circular deque is empty or not.\r\n * @return {boolean}\r\n */\r\nMyCircularDeque.prototype.isEmpty = function() {\r\n    \r\n};\r\n\r\n/**\r\n * Checks whether the circular deque is full or not.\r\n * @return {boolean}\r\n */\r\nMyCircularDeque.prototype.isFull = function() {\r\n    \r\n};\r\n\r\n/** \r\n * Your MyCircularDeque object will be instantiated and called as such:\r\n * var obj = Object.create(MyCircularDeque).createNew(k)\r\n * var param_1 = obj.insertFront(value)\r\n * var param_2 = obj.insertLast(value)\r\n * var param_3 = obj.deleteFront()\r\n * var param_4 = obj.deleteLast()\r\n * var param_5 = obj.getFront()\r\n * var param_6 = obj.getRear()\r\n * var param_7 = obj.isEmpty()\r\n * var param_8 = obj.isFull()\r\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyCircularDeque\r\n\r\n=begin\r\n    Initialize your data structure here. Set the size of the deque to be k.\r\n    :type k: Integer\r\n=end\r\n    def initialize(k)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Adds an item at the front of Deque. Return true if the operation is successful.\r\n    :type value: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def insert_front(value)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Adds an item at the rear of Deque. Return true if the operation is successful.\r\n    :type value: Integer\r\n    :rtype: Boolean\r\n=end\r\n    def insert_last(value)\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Deletes an item from the front of Deque. Return true if the operation is successful.\r\n    :rtype: Boolean\r\n=end\r\n    def delete_front()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Deletes an item from the rear of Deque. Return true if the operation is successful.\r\n    :rtype: Boolean\r\n=end\r\n    def delete_last()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the front item from the deque.\r\n    :rtype: Integer\r\n=end\r\n    def get_front()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Get the last item from the deque.\r\n    :rtype: Integer\r\n=end\r\n    def get_rear()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Checks whether the circular deque is empty or not.\r\n    :rtype: Boolean\r\n=end\r\n    def is_empty()\r\n        \r\n    end\r\n\r\n\r\n=begin\r\n    Checks whether the circular deque is full or not.\r\n    :rtype: Boolean\r\n=end\r\n    def is_full()\r\n        \r\n    end\r\n\r\n\r\nend\r\n\r\n# Your MyCircularDeque object will be instantiated and called as such:\r\n# obj = MyCircularDeque.new(k)\r\n# param_1 = obj.insert_front(value)\r\n# param_2 = obj.insert_last(value)\r\n# param_3 = obj.delete_front()\r\n# param_4 = obj.delete_last()\r\n# param_5 = obj.get_front()\r\n# param_6 = obj.get_rear()\r\n# param_7 = obj.is_empty()\r\n# param_8 = obj.is_full()"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyCircularDeque {\n\n    /** Initialize your data structure here. Set the size of the deque to be k. */\n    init(_ k: Int) {\n        \n    }\n    \n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\n    func insertFront(_ value: Int) -> Bool {\n      \n    }\n    \n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\n    func insertLast(_ value: Int) -> Bool {\n      \n    }\n    \n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\n    func deleteFront() -> Bool {\n      \n    }\n    \n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\n    func deleteLast() -> Bool {\n      \n    }\n    \n    /** Get the front item from the deque. */\n    func getFront() -> Int {\n      \n    }\n    \n    /** Get the last item from the deque. */\n    func getRear() -> Int {\n      \n    }\n    \n    /** Checks whether the circular deque is empty or not. */\n    func isEmpty() -> Bool {\n      \n    }\n    \n    /** Checks whether the circular deque is full or not. */\n    func isFull() -> Bool {\n      \n    }\n}\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * let obj = MyCircularDeque(k)\n * let ret_1: Bool = obj.insertFront(value)\n * let ret_2: Bool = obj.insertLast(value)\n * let ret_3: Bool = obj.deleteFront()\n * let ret_4: Bool = obj.deleteLast()\n * let ret_5: Int = obj.getFront()\n * let ret_6: Int = obj.getRear()\n * let ret_7: Bool = obj.isEmpty()\n * let ret_8: Bool = obj.isFull()\n */\n "},{"value":"golang","text":"Go","defaultCode":"type MyCircularDeque struct {\r\n    \r\n}\r\n\r\n\r\n/** Initialize your data structure here. Set the size of the deque to be k. */\r\nfunc Constructor(k int) MyCircularDeque {\r\n    \r\n}\r\n\r\n\r\n/** Adds an item at the front of Deque. Return true if the operation is successful. */\r\nfunc (this *MyCircularDeque) InsertFront(value int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Adds an item at the rear of Deque. Return true if the operation is successful. */\r\nfunc (this *MyCircularDeque) InsertLast(value int) bool {\r\n    \r\n}\r\n\r\n\r\n/** Deletes an item from the front of Deque. Return true if the operation is successful. */\r\nfunc (this *MyCircularDeque) DeleteFront() bool {\r\n    \r\n}\r\n\r\n\r\n/** Deletes an item from the rear of Deque. Return true if the operation is successful. */\r\nfunc (this *MyCircularDeque) DeleteLast() bool {\r\n    \r\n}\r\n\r\n\r\n/** Get the front item from the deque. */\r\nfunc (this *MyCircularDeque) GetFront() int {\r\n    \r\n}\r\n\r\n\r\n/** Get the last item from the deque. */\r\nfunc (this *MyCircularDeque) GetRear() int {\r\n    \r\n}\r\n\r\n\r\n/** Checks whether the circular deque is empty or not. */\r\nfunc (this *MyCircularDeque) IsEmpty() bool {\r\n    \r\n}\r\n\r\n\r\n/** Checks whether the circular deque is full or not. */\r\nfunc (this *MyCircularDeque) IsFull() bool {\r\n    \r\n}\r\n\r\n\r\n/**\r\n * Your MyCircularDeque object will be instantiated and called as such:\r\n * obj := Constructor(k);\r\n * param_1 := obj.InsertFront(value);\r\n * param_2 := obj.InsertLast(value);\r\n * param_3 := obj.DeleteFront();\r\n * param_4 := obj.DeleteLast();\r\n * param_5 := obj.GetFront();\r\n * param_6 := obj.GetRear();\r\n * param_7 := obj.IsEmpty();\r\n * param_8 := obj.IsFull();\r\n */"},{"value":"scala","text":"Scala","defaultCode":"class MyCircularDeque(_k: Int) {\r\n\r\n    /** Initialize your data structure here. Set the size of the deque to be k. */\r\n    \r\n\r\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\r\n    def insertFront(value: Int): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\r\n    def insertLast(value: Int): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\r\n    def deleteFront(): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\r\n    def deleteLast(): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Get the front item from the deque. */\r\n    def getFront(): Int = {\r\n        \r\n    }\r\n\r\n    /** Get the last item from the deque. */\r\n    def getRear(): Int = {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular deque is empty or not. */\r\n    def isEmpty(): Boolean = {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular deque is full or not. */\r\n    def isFull(): Boolean = {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyCircularDeque object will be instantiated and called as such:\r\n * var obj = new MyCircularDeque(k)\r\n * var param_1 = obj.insertFront(value)\r\n * var param_2 = obj.insertLast(value)\r\n * var param_3 = obj.deleteFront()\r\n * var param_4 = obj.deleteLast()\r\n * var param_5 = obj.getFront()\r\n * var param_6 = obj.getRear()\r\n * var param_7 = obj.isEmpty()\r\n * var param_8 = obj.isFull()\r\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyCircularDeque(k: Int) {\r\n\r\n    /** Initialize your data structure here. Set the size of the deque to be k. */\r\n    \r\n\r\n    /** Adds an item at the front of Deque. Return true if the operation is successful. */\r\n    fun insertFront(value: Int): Boolean {\r\n        \r\n    }\r\n\r\n    /** Adds an item at the rear of Deque. Return true if the operation is successful. */\r\n    fun insertLast(value: Int): Boolean {\r\n        \r\n    }\r\n\r\n    /** Deletes an item from the front of Deque. Return true if the operation is successful. */\r\n    fun deleteFront(): Boolean {\r\n        \r\n    }\r\n\r\n    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */\r\n    fun deleteLast(): Boolean {\r\n        \r\n    }\r\n\r\n    /** Get the front item from the deque. */\r\n    fun getFront(): Int {\r\n        \r\n    }\r\n\r\n    /** Get the last item from the deque. */\r\n    fun getRear(): Int {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular deque is empty or not. */\r\n    fun isEmpty(): Boolean {\r\n        \r\n    }\r\n\r\n    /** Checks whether the circular deque is full or not. */\r\n    fun isFull(): Boolean {\r\n        \r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Your MyCircularDeque object will be instantiated and called as such:\r\n * var obj = MyCircularDeque(k)\r\n * var param_1 = obj.insertFront(value)\r\n * var param_2 = obj.insertLast(value)\r\n * var param_3 = obj.deleteFront()\r\n * var param_4 = obj.deleteLast()\r\n * var param_5 = obj.getFront()\r\n * var param_6 = obj.getRear()\r\n * var param_7 = obj.isEmpty()\r\n * var param_8 = obj.isFull()\r\n */"}],"testcase":"[\"MyCircularDeque\",\"insertLast\",\"insertLast\",\"insertFront\",\"insertFront\",\"getRear\",\"isFull\",\"deleteLast\",\"insertFront\",\"getFront\"]\n[[3],[1],[2],[3],[4],[],[],[],[4],[]]","testable":true,"templateMeta":{"classname":"MyCircularDeque","maxbytesperline":400000,"constructor":{"params":[{"type":"integer","name":"k"}],"comment":"Initialize your data structure here. Set the size of the deque to be k."},"methods":[{"name":"insertFront","params":[{"type":"integer","name":"value"}],"return":{"type":"boolean"},"comment":"Adds an item at the front of Deque. Return true if the operation is successful."},{"name":"insertLast","params":[{"type":"integer","name":"value"}],"return":{"type":"boolean"},"comment":"Adds an item at the rear of Deque. Return true if the operation is successful."},{"name":"deleteFront","params":[],"return":{"type":"boolean"},"comment":"Deletes an item from the front of Deque. Return true if the operation is successful."},{"name":"deleteLast","params":[],"return":{"type":"boolean"},"comment":"Deletes an item from the rear of Deque. Return true if the operation is successful."},{"name":"getFront","params":[],"return":{"type":"integer"},"comment":"Get the front item from the deque."},{"name":"getRear","params":[],"return":{"type":"integer"},"comment":"Get the last item from the deque."},{"name":"isEmpty","params":[],"return":{"type":"boolean"},"comment":"Checks whether the circular deque is empty or not."},{"name":"isFull","params":[],"return":{"type":"boolean"},"comment":"Checks whether the circular deque is full or not."}],"systemdesign":true,"params":[{"name":"inputs","type":"integer[]"},{"name":"inputs","type":"integer[]"}],"return":{"type":"list<String>","dealloc":true}}}