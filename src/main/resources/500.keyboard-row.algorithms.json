{"id":500,"fid":500,"name":"Keyboard Row","slug":"keyboard-row","link":"https://leetcode.com/problems/keyboard-row/description/","percent":60.803640965732086,"level":"Easy","category":"algorithms","totalAC":"74.9K","totalSubmit":"123.3K","desc":"Given a List of words, return the words that can be typed using letters of alphabet on only one row's of American keyboard like the image below.\r\n\r\n \r\n\r\n\r\n \r\n\r\nExample:\r\n\r\n\r\nInput: [\"Hello\", \"Alaska\", \"Dad\", \"Peace\"]\r\nOutput: [\"Alaska\", \"Dad\"]\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tYou may use one character in the keyboard more than once.\r\n\tYou may assume the input string will only contain letters of alphabet.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<string> findWords(vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String[] findWords(String[] words) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findWords(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findWords(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: List[str]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nchar** findWords(char** words, int wordsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string[] FindWords(string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n * @return {string[]}\r\n */\r\nvar findWords = function(words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\r\n# @return {String[]}\r\ndef find_words(words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func findWords(_ words: [String]) -> [String] {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func findWords(words []string) []string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def findWords(words: Array[String]): Array[String] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun findWords(words: Array<String>): Array<String> {\r\n        \r\n    }\r\n}"}],"testcase":"[\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]","testable":true,"templateMeta":{"name":"findWords","params":[{"name":"words","type":"string[]"}],"return":{"type":"string[]"}}}