{"id":805,"fid":789,"name":"Escape The Ghosts","slug":"escape-the-ghosts","link":"https://leetcode.com/problems/escape-the-ghosts/description/","percent":53.30425783560024,"level":"Medium","category":"algorithms","totalAC":"7.2K","totalSubmit":"13.5K","desc":"You are playing a simplified Pacman game. You start at the point (0, 0), and your destination is (target[0], target[1]). There are several ghosts on the map, the i-th ghost starts at (ghosts[i][0], ghosts[i][1]).\r\n\r\nEach turn, you and all ghosts simultaneously *may* move in one of 4 cardinal directions: north, east, west, or south, going from the previous point to a new point 1 unit of distance away.\r\n\r\nYou escape if and only if you can reach the target before any ghost reaches you (for any given moves the ghosts may take.)  If you reach any square (including the target) at the same time as a ghost, it doesn't count as an escape.\r\n\r\nReturn True if and only if it is possible to escape.\r\n\r\n\r\nExample 1:\r\nInput: \r\nghosts = [[1, 0], [0, 3]]\r\ntarget = [0, 1]\r\nOutput: true\r\nExplanation: \r\nYou can directly reach the destination (0, 1) at time 1, while the ghosts located at (1, 0) or (0, 3) have no way to catch up with you.\r\n\r\n\r\n\r\nExample 2:\r\nInput: \r\nghosts = [[1, 0]]\r\ntarget = [2, 0]\r\nOutput: false\r\nExplanation: \r\nYou need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\r\n\r\n\r\n\r\nExample 3:\r\nInput: \r\nghosts = [[2, 0]]\r\ntarget = [1, 0]\r\nOutput: false\r\nExplanation: \r\nThe ghost can reach the target at the same time as you.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tAll points have coordinates with absolute value <= 10000.\r\n\tThe number of ghosts will not exceed 100.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool escapeGhosts(vector<vector<int>>& ghosts, vector<int>& target) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean escapeGhosts(int[][] ghosts, int[] target) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def escapeGhosts(self, ghosts, target):\r\n        \"\"\"\r\n        :type ghosts: List[List[int]]\r\n        :type target: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def escapeGhosts(self, ghosts, target):\r\n        \"\"\"\r\n        :type ghosts: List[List[int]]\r\n        :type target: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool escapeGhosts(int** ghosts, int ghostsRowSize, int *ghostsColSizes, int* target, int targetSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool EscapeGhosts(int[][] ghosts, int[] target) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} ghosts\r\n * @param {number[]} target\r\n * @return {boolean}\r\n */\r\nvar escapeGhosts = function(ghosts, target) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} ghosts\r\n# @param {Integer[]} target\r\n# @return {Boolean}\r\ndef escape_ghosts(ghosts, target)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func escapeGhosts(_ ghosts: [[Int]], _ target: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func escapeGhosts(ghosts [][]int, target []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def escapeGhosts(ghosts: Array[Array[Int]], target: Array[Int]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun escapeGhosts(ghosts: Array<IntArray>, target: IntArray): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,0],[0,3]]\n[0,1]","testable":true,"templateMeta":{"name":"escapeGhosts","params":[{"name":"ghosts","type":"integer[][]"},{"name":"target","type":"integer[]"}],"return":{"type":"boolean"}}}