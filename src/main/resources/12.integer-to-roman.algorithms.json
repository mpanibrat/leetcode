{"id":12,"fid":12,"name":"Integer to Roman","slug":"integer-to-roman","link":"https://leetcode.com/problems/integer-to-roman/description/","percent":48.15363224821138,"level":"Medium","category":"algorithms","totalAC":"175.9K","totalSubmit":"365.4K","desc":"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\r\n\r\n\r\nSymbol       Value\r\nI             1\r\nV             5\r\nX             10\r\nL             50\r\nC             100\r\nD             500\r\nM             1000\r\n\r\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\r\n\r\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\r\n\r\n\r\n\tI can be placed before V (5) and X (10) to make 4 and 9. \r\n\tX can be placed before L (50) and C (100) to make 40 and 90. \r\n\tC can be placed before D (500) and M (1000) to make 400 and 900.\r\n\r\n\r\nGiven an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\r\n\r\nExample 1:\r\n\r\n\r\nInput: 3\r\nOutput: \"III\"\r\n\r\nExample 2:\r\n\r\n\r\nInput: 4\r\nOutput: \"IV\"\r\n\r\nExample 3:\r\n\r\n\r\nInput: 9\r\nOutput: \"IX\"\r\n\r\nExample 4:\r\n\r\n\r\nInput: 58\r\nOutput: \"LVIII\"\r\nExplanation: L = 50, V = 5, III = 3.\r\n\r\n\r\nExample 5:\r\n\r\n\r\nInput: 1994\r\nOutput: \"MCMXCIV\"\r\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    string intToRoman(int num) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public String intToRoman(int num) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def intToRoman(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def intToRoman(self, num):\r\n        \"\"\"\r\n        :type num: int\r\n        :rtype: str\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"char* intToRoman(int num) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public string IntToRoman(int num) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number} num\r\n * @return {string}\r\n */\r\nvar intToRoman = function(num) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\r\n# @return {String}\r\ndef int_to_roman(num)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func intToRoman(_ num: Int) -> String {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func intToRoman(num int) string {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def intToRoman(num: Int): String = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun intToRoman(num: Int): String {\r\n        \r\n    }\r\n}"}],"testcase":"3","testable":true,"templateMeta":{"name":"intToRoman","params":[{"name":"num","type":"integer"}],"return":{"type":"string"}}}