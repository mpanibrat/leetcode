{"id":646,"fid":646,"name":"Maximum Length of Pair Chain","slug":"maximum-length-of-pair-chain","link":"https://leetcode.com/problems/maximum-length-of-pair-chain/description/","percent":47.285179095116206,"level":"Medium","category":"algorithms","totalAC":"27.9K","totalSubmit":"59K","desc":"\r\nYou are given n pairs of numbers. In every pair, the first number is always smaller than the second number.\r\n\r\n\r\n\r\nNow, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion. \r\n\r\n\r\n\r\nGiven a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.\r\n\r\n\r\n\r\nExample 1:\r\n\r\nInput: [[1,2], [2,3], [3,4]]\r\nOutput: 2\r\nExplanation: The longest chain is [1,2] -> [3,4]\r\n\r\n\r\n\r\nNote:\r\n\r\nThe number of given pairs will be in the range [1, 1000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int findLongestChain(vector<vector<int>>& pairs) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findLongestChain(int[][] pairs) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findLongestChain(self, pairs):\r\n        \"\"\"\r\n        :type pairs: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findLongestChain(self, pairs):\r\n        \"\"\"\r\n        :type pairs: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int findLongestChain(int** pairs, int pairsRowSize, int pairsColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int FindLongestChain(int[,] pairs) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} pairs\r\n * @return {number}\r\n */\r\nvar findLongestChain = function(pairs) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} pairs\r\n# @return {Integer}\r\ndef find_longest_chain(pairs)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findLongestChain(_ pairs: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findLongestChain(pairs [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findLongestChain(pairs: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findLongestChain(pairs: Array<IntArray>): Int {\n        \n    }\n}"}],"testcase":"[[1,2], [2,3], [3,4]]","testable":true,"templateMeta":{"name":"findLongestChain","params":[{"name":"pairs","type":"integer[][]"}],"return":{"type":"integer"}}}