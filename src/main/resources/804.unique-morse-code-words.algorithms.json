{"id":822,"fid":804,"name":"Unique Morse Code Words","slug":"unique-morse-code-words","link":"https://leetcode.com/problems/unique-morse-code-words/description/","percent":71.65589331469835,"level":"Easy","category":"algorithms","totalAC":"49.2K","totalSubmit":"68.7K","desc":"International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: \"a\" maps to \".-\", \"b\" maps to \"-...\", \"c\" maps to \"-.-.\", and so on.\r\n\r\nFor convenience, the full table for the 26 letters of the English alphabet is given below:\r\n\r\n\r\n[\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\r\n\r\nNow, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, \"cba\" can be written as \"-.-.-....-\", (which is the concatenation \"-.-.\" + \"-...\" + \".-\"). We'll call such a concatenation, the transformationÂ of a word.\r\n\r\nReturn the number of different transformations among all words we have.\r\n\r\n\r\nExample:\r\nInput: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\r\nOutput: 2\r\nExplanation: \r\nThe transformation of each word is:\r\n\"gin\" -> \"--...-.\"\r\n\"zen\" -> \"--...-.\"\r\n\"gig\" -> \"--...--.\"\r\n\"msg\" -> \"--...--.\"\r\n\r\nThere are 2 different transformations, \"--...-.\" and \"--...--.\".\r\n\r\n\r\nNote:\r\n\r\n\r\n\tThe length of words will be at most 100.\r\n\tEach words[i] will have length in range [1, 12].\r\n\twords[i] will only consist of lowercase letters.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int uniqueMorseRepresentations(vector<string>& words) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int uniqueMorseRepresentations(String[] words) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def uniqueMorseRepresentations(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def uniqueMorseRepresentations(self, words):\r\n        \"\"\"\r\n        :type words: List[str]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int uniqueMorseRepresentations(char** words, int wordsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int UniqueMorseRepresentations(string[] words) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string[]} words\r\n * @return {number}\r\n */\r\nvar uniqueMorseRepresentations = function(words) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[]} words\r\n# @return {Integer}\r\ndef unique_morse_representations(words)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\r\n    func uniqueMorseRepresentations(_ words: [String]) -> Int {\r\n\r\n    }\r\n}"},{"value":"golang","text":"Go","defaultCode":"func uniqueMorseRepresentations(words []string) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def uniqueMorseRepresentations(words: Array[String]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun uniqueMorseRepresentations(words: Array<String>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[\"gin\", \"zen\", \"gig\", \"msg\"]","testable":true,"templateMeta":{"name":"uniqueMorseRepresentations","params":[{"name":"words","type":"string[]"}],"return":{"type":"integer"}}}