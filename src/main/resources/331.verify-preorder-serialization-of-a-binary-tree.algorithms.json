{"id":331,"fid":331,"name":"Verify Preorder Serialization of a Binary Tree","slug":"verify-preorder-serialization-of-a-binary-tree","link":"https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree/description/","percent":37.660574564988906,"level":"Medium","category":"algorithms","totalAC":"51.6K","totalSubmit":"137K","desc":"One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.\r\n\r\n\r\n     _9_\r\n    /   \\\r\n   3     2\r\n  / \\   / \\\r\n 4   1  #  6\r\n/ \\ / \\   / \\\r\n# # # #   # #\r\n\r\n\r\nFor example, the above binary tree can be serialized to the string \"9,3,4,#,#,1,#,#,2,#,6,#,#\", where # represents a null node.\r\n\r\nGiven a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.\r\n\r\nEach comma separated value in the string must be either an integer or a character '#' representing null pointer.\r\n\r\nYou may assume that the input format is always valid, for example it could never contain two consecutive commas such as \"1,,3\".\r\n\r\nExample 1:\r\n\r\n\r\nInput: \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\r\nOutput: true\r\n\r\nExample 2:\r\n\r\n\r\nInput: \"1,#\"\r\nOutput: false\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: \"9,#,#,1\"\r\nOutput: false","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool isValidSerialization(string preorder) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean isValidSerialization(String preorder) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def isValidSerialization(self, preorder):\r\n        \"\"\"\r\n        :type preorder: str\r\n        :rtype: bool\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def isValidSerialization(self, preorder):\r\n        \"\"\"\r\n        :type preorder: str\r\n        :rtype: bool\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"bool isValidSerialization(char* preorder) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool IsValidSerialization(string preorder) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} preorder\r\n * @return {boolean}\r\n */\r\nvar isValidSerialization = function(preorder) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} preorder\r\n# @return {Boolean}\r\ndef is_valid_serialization(preorder)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isValidSerialization(_ preorder: String) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func isValidSerialization(preorder string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def isValidSerialization(preorder: String): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun isValidSerialization(preorder: String): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"\"9,3,4,#,#,1,#,#,2,#,6,#,#\"","testable":true,"templateMeta":{"name":"isValidSerialization","params":[{"name":"preorder","type":"string"}],"return":{"type":"boolean"}}}