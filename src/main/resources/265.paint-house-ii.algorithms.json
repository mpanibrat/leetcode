{"id":265,"fid":265,"name":"Paint House II","slug":"paint-house-ii","link":"https://leetcode.com/problems/paint-house-ii/description/","percent":39.81985977361041,"level":"Hard","category":"algorithms","totalAC":"37.7K","totalSubmit":"94.7K","desc":"There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.\r\n\r\nThe cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.\r\n\r\nNote:\r\nAll costs are positive integers.\r\n\r\nExample:\r\n\r\n\r\nInput: [[1,5,3],[2,9,4]]\r\nOutput: 5\r\nExplanation: Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; \r\nÂ             Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5. \r\n\r\n\r\nFollow up:\r\nCould you solve it in O(nk) runtime?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int minCostII(vector<vector<int>>& costs) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int minCostII(int[][] costs) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def minCostII(self, costs):\r\n        \"\"\"\r\n        :type costs: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def minCostII(self, costs):\r\n        \"\"\"\r\n        :type costs: List[List[int]]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int minCostII(int** costs, int costsRowSize, int costsColSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MinCostII(int[,] costs) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} costs\r\n * @return {number}\r\n */\r\nvar minCostII = function(costs) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} costs\r\n# @return {Integer}\r\ndef min_cost_ii(costs)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minCostII(_ costs: [[Int]]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minCostII(costs [][]int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def minCostII(costs: Array[Array[Int]]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun minCostII(costs: Array<IntArray>): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,5,3],[2,9,4]]","testable":true,"templateMeta":{"name":"minCostII","params":[{"name":"costs","type":"integer[][]"}],"return":{"type":"integer"}}}