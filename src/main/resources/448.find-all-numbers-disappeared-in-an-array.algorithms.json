{"id":448,"fid":448,"name":"Find All Numbers Disappeared in an Array","slug":"find-all-numbers-disappeared-in-an-array","link":"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/","percent":51.631199358917286,"level":"Easy","category":"algorithms","totalAC":"116K","totalSubmit":"224.6K","desc":"Given an array of integers where 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.\r\n\r\nFind all the elements of [1, n] inclusive that do not appear in this array.\r\n\r\nCould you do it without extra space and in O(n) runtime? You may assume the returned list does not count as extra space.\r\n\r\nExample:\r\n\r\nInput:\r\n[4,3,2,7,8,2,3,1]\r\n\r\nOutput:\r\n[5,6]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> findDisappearedNumbers(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> findDisappearedNumbers(int[] nums) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def findDisappearedNumbers(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def findDisappearedNumbers(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* findDisappearedNumbers(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> FindDisappearedNumbers(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar findDisappearedNumbers = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef find_disappeared_numbers(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findDisappearedNumbers(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func findDisappearedNumbers(nums []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findDisappearedNumbers(nums: Array[Int]): List[Int] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findDisappearedNumbers(nums: IntArray): List<Int> {\n        \n    }\n}"}],"testcase":"[4,3,2,7,8,2,3,1]","testable":true,"templateMeta":{"name":"findDisappearedNumbers","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<integer>"}}}