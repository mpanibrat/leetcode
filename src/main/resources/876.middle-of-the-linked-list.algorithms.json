{"id":908,"fid":876,"name":"Middle of the Linked List","slug":"middle-of-the-linked-list","link":"https://leetcode.com/problems/middle-of-the-linked-list/description/","percent":62.64592339166416,"level":"Easy","category":"algorithms","totalAC":"27.1K","totalSubmit":"43.3K","desc":"Given a non-empty, singly linked list with head node head, return a middle node of linked list.\r\n\r\nIf there are two middle nodes, return the second middle node.\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [1,2,3,4,5]\r\nOutput: Node 3 from this list (Serialization: [3,4,5])\r\nThe returned node has value 3.  (The judge's serialization of this node is [3,4,5]).\r\nNote that we returned a ListNode object ans, such that:\r\nans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,2,3,4,5,6]\r\nOutput: Node 4 from this list (Serialization: [4,5,6])\r\nSince the list has two middle nodes with values 3 and 4, we return the second one.\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\tThe number of nodes in the given list will be between 1 and 100.\r\n\r\n\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* middleNode(ListNode* head) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution(object):\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def middleNode(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     struct ListNode *next;\n * };\n */\nstruct ListNode* middleNode(struct ListNode* head) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public int val;\n *     public ListNode next;\n *     public ListNode(int x) { val = x; }\n * }\n */\npublic class Solution {\n    public ListNode MiddleNode(ListNode head) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar middleNode = function(head) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# Definition for singly-linked list.\n# class ListNode\n#     attr_accessor :val, :next\n#     def initialize(val)\n#         @val = val\n#         @next = nil\n#     end\n# end\n\n# @param {ListNode} head\n# @return {ListNode}\ndef middle_node(head)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     public var val: Int\n *     public var next: ListNode?\n *     public init(_ val: Int) {\n *         self.val = val\n *         self.next = nil\n *     }\n * }\n */\nclass Solution {\n    func middleNode(_ head: ListNode?) -> ListNode? {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc middleNode(head *ListNode) *ListNode {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"/**\n * Definition for singly-linked list.\n * class ListNode(var _x: Int = 0) {\n *   var next: ListNode = null\n *   var x: Int = _x\n * }\n */\nobject Solution {\n    def middleNode(head: ListNode): ListNode = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * Definition for singly-linked list.\n * class ListNode(var `val`: Int = 0) {\n *     var next: ListNode? = null\n * }\n */\nclass Solution {\n    fun middleNode(head: ListNode?): ListNode? {\n        \n    }\n}"}],"testcase":"[1,2,3,4,5]","testable":true,"templateMeta":{"name":"middleNode","params":[{"name":"head","type":"ListNode"}],"return":{"type":"ListNode"}}}