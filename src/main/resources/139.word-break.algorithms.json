{"id":139,"fid":139,"name":"Word Break","slug":"word-break","link":"https://leetcode.com/problems/word-break/description/","percent":32.97947904483186,"level":"Medium","category":"algorithms","totalAC":"262.8K","totalSubmit":"796.8K","desc":"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\r\n\r\nNote:\r\n\r\n\r\n\tThe same word in the dictionary may be reused multiple times in the segmentation.\r\n\tYou may assume the dictionary does not contain duplicate words.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: s = \"leetcode\", wordDict = [\"leet\", \"code\"]\r\nOutput: true\r\nExplanation: Return true because \"leetcode\" can be segmented as \"leet code\".\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: s = \"applepenapple\", wordDict = [\"apple\", \"pen\"]\r\nOutput: true\r\nExplanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\r\nÂ             Note that you are allowed to reuse a dictionary word.\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: s = \"catsandog\", wordDict = [\"cats\", \"dog\", \"sand\", \"and\", \"cat\"]\r\nOutput: false\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool wordBreak(string s, vector<string>& wordDict) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean wordBreak(String s, List<String> wordDict) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def wordBreak(self, s, wordDict):\r\n        \"\"\"\r\n        :type s: str\r\n        :type wordDict: List[str]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def wordBreak(self, s, wordDict):\r\n        \"\"\"\r\n        :type s: str\r\n        :type wordDict: List[str]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool wordBreak(char* s, char** wordDict, int wordDictSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool WordBreak(string s, IList<string> wordDict) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {string} s\r\n * @param {string[]} wordDict\r\n * @return {boolean}\r\n */\r\nvar wordBreak = function(s, wordDict) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\r\n# @param {String[]} word_dict\r\n# @return {Boolean}\r\ndef word_break(s, word_dict)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func wordBreak(_ s: String, _ wordDict: [String]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func wordBreak(s string, wordDict []string) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def wordBreak(s: String, wordDict: List[String]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun wordBreak(s: String, wordDict: List<String>): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"\"leetcode\"\n[\"leet\",\"code\"]","testable":true,"templateMeta":{"name":"wordBreak","params":[{"name":"s","type":"string"},{"name":"wordDict","type":"list<string>"}],"return":{"type":"boolean"}}}