{"id":819,"fid":801,"name":"Minimum Swaps To Make Sequences Increasing","slug":"minimum-swaps-to-make-sequences-increasing","link":"https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/description/","percent":32.675802879291254,"level":"Medium","category":"algorithms","totalAC":"9.4K","totalSubmit":"28.9K","desc":"We have two integer sequences A and B of the same non-zero length.\r\n\r\nWe are allowed to swap elements A[i] and B[i].  Note that both elements are in the same index position in their respective sequences.\r\n\r\nAt the end of some number of swaps, A and B are both strictly increasing.  (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)\r\n\r\nGiven A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.\r\n\r\n\r\nExample:\r\nInput: A = [1,3,5,4], B = [1,2,3,7]\r\nOutput: 1\r\nExplanation: \r\nSwap A[3] and B[3].  Then the sequences are:\r\nA = [1, 3, 5, 7] and B = [1, 2, 3, 4]\r\nwhich are both strictly increasing.\r\n\r\n\r\nNote:\r\n\r\n\r\n\tA, B are arrays with the same length, and that length will be in the range [1, 1000].\r\n\tA[i], B[i] are integer values in the range [0, 2000].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minSwap(vector<int>& A, vector<int>& B) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minSwap(int[] A, int[] B) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minSwap(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minSwap(self, A, B):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :rtype: int\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"int minSwap(int* A, int ASize, int* B, int BSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinSwap(int[] A, int[] B) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} A\n * @param {number[]} B\n * @return {number}\n */\nvar minSwap = function(A, B) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\n# @param {Integer[]} b\n# @return {Integer}\ndef min_swap(a, b)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minSwap(_ A: [Int], _ B: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func minSwap(A []int, B []int) int {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minSwap(A: Array[Int], B: Array[Int]): Int = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minSwap(A: IntArray, B: IntArray): Int {\n        \n    }\n}"}],"testcase":"[1,3,5,4]\n[1,2,3,7]","testable":true,"templateMeta":{"name":"minSwap","params":[{"name":"A","type":"integer[]"},{"name":"B","type":"integer[]"}],"return":{"type":"integer"}}}