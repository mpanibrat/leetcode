{"id":934,"fid":898,"name":"Bitwise ORs of Subarrays","slug":"bitwise-ors-of-subarrays","link":"https://leetcode.com/problems/bitwise-ors-of-subarrays/description/","percent":31.342446547493868,"level":"Medium","category":"algorithms","totalAC":"4.5K","totalSubmit":"14.3K","desc":"We have an array A of non-negative integers.\r\n\r\nFor every (contiguous) subarray B = [A[i], A[i+1], ..., A[j]] (with i <= j), we take the bitwise OR of all the elements in B, obtaining a result A[i] | A[i+1] | ... | A[j].\r\n\r\nReturn the number of possible results.  (Results that occur more than once are only counted once in the final answer.)\r\n\r\n \r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: [0]\r\nOutput: 1\r\nExplanation: \r\nThere is only one possible result: 0.\r\n\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: [1,1,2]\r\nOutput: 3\r\nExplanation: \r\nThe possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\r\nThese yield the results 1, 1, 2, 1, 3, 3.\r\nThere are 3 unique values, so the answer is 3.\r\n\r\n\r\n\r\nExample 3:\r\n\r\n\r\nInput: [1,2,4]\r\nOutput: 6\r\nExplanation: \r\nThe possible results are 1, 2, 3, 4, 6, and 7.\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\nNote:\r\n\r\n\r\n\t1 <= A.length <= 50000\r\n\t0 <= A[i] <= 10^9\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int subarrayBitwiseORs(vector<int>& A) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int subarrayBitwiseORs(int[] A) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def subarrayBitwiseORs(self, A):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def subarrayBitwiseORs(self, A):\r\n        \"\"\"\r\n        :type A: List[int]\r\n        :rtype: int\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"int subarrayBitwiseORs(int* A, int ASize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int SubarrayBitwiseORs(int[] A) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} A\r\n * @return {number}\r\n */\r\nvar subarrayBitwiseORs = function(A) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} a\r\n# @return {Integer}\r\ndef subarray_bitwise_o_rs(a)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func subarrayBitwiseORs(_ A: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func subarrayBitwiseORs(A []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def subarrayBitwiseORs(A: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun subarrayBitwiseORs(A: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[0]","testable":true,"templateMeta":{"name":"subarrayBitwiseORs","params":[{"name":"A","type":"integer[]"}],"return":{"type":"integer"}}}