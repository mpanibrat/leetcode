{"id":255,"fid":255,"name":"Verify Preorder Sequence in Binary Search Tree","slug":"verify-preorder-sequence-in-binary-search-tree","link":"https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree/description/","percent":42.00519436524292,"level":"Medium","category":"algorithms","totalAC":"29.8K","totalSubmit":"70.8K","desc":"Given an array of numbers, verify whether it is the correct preorder traversal sequence of a binary search tree.\r\n\r\nYou may assume each number in the sequence is unique.\r\n\r\nConsider the following binary search tree: \r\n\r\n\r\n     5\r\n    / \\\r\n   2   6\r\n  / \\\r\n 1   3\r\n\r\nExample 1:\r\n\r\n\r\nInput: [5,2,6,1,3]\r\nOutput: false\r\n\r\nExample 2:\r\n\r\n\r\nInput: [5,2,1,3,6]\r\nOutput: true\r\n\r\nFollow up:\r\nCould you do it using only constant space complexity?\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    bool verifyPreorder(vector<int>& preorder) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public boolean verifyPreorder(int[] preorder) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def verifyPreorder(self, preorder):\r\n        \"\"\"\r\n        :type preorder: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def verifyPreorder(self, preorder):\r\n        \"\"\"\r\n        :type preorder: List[int]\r\n        :rtype: bool\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"bool verifyPreorder(int* preorder, int preorderSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public bool VerifyPreorder(int[] preorder) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} preorder\r\n * @return {boolean}\r\n */\r\nvar verifyPreorder = function(preorder) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} preorder\r\n# @return {Boolean}\r\ndef verify_preorder(preorder)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func verifyPreorder(_ preorder: [Int]) -> Bool {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func verifyPreorder(preorder []int) bool {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def verifyPreorder(preorder: Array[Int]): Boolean = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun verifyPreorder(preorder: IntArray): Boolean {\r\n        \r\n    }\r\n}"}],"testcase":"[5,2,6,1,3]","testable":true,"templateMeta":{"name":"verifyPreorder","params":[{"name":"preorder","type":"integer[]"}],"return":{"type":"boolean"}}}