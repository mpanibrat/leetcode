{"id":40,"fid":40,"name":"Combination Sum II","slug":"combination-sum-ii","link":"https://leetcode.com/problems/combination-sum-ii/description/","percent":38.39598452172206,"level":"Medium","category":"algorithms","totalAC":"180K","totalSubmit":"468.8K","desc":"Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\r\n\r\nEach number in candidates may only be used once in the combination.\r\n\r\nNote:\r\n\r\n\r\n\tAll numbers (including target) will be positive integers.\r\n\tThe solution set must not contain duplicate combinations.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: candidates = [10,1,2,7,6,1,5], target = 8,\r\nA solution set is:\r\n[\r\n  [1, 7],\r\n  [1, 2, 5],\r\n  [2, 6],\r\n  [1, 1, 6]\r\n]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: candidates = [2,5,2,1,2], target = 5,\r\nA solution set is:\r\n[\r\n  [1,2,2],\r\n  [5]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def combinationSum2(self, candidates, target):\r\n        \"\"\"\r\n        :type candidates: List[int]\r\n        :type target: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def combinationSum2(self, candidates, target):\r\n        \"\"\"\r\n        :type candidates: List[int]\r\n        :type target: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combinationSum2(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} candidates\r\n * @param {number} target\r\n * @return {number[][]}\r\n */\r\nvar combinationSum2 = function(candidates, target) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} candidates\r\n# @param {Integer} target\r\n# @return {Integer[][]}\r\ndef combination_sum2(candidates, target)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func combinationSum2(candidates []int, target int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def combinationSum2(candidates: Array[Int], target: Int): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun combinationSum2(candidates: IntArray, target: Int): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"[10,1,2,7,6,1,5]\n8","testable":true,"templateMeta":{"name":"combinationSum2","params":[{"name":"candidates","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"list<list<integer>>","dealloc":true}}}