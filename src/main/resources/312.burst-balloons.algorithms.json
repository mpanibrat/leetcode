{"id":312,"fid":312,"name":"Burst Balloons","slug":"burst-balloons","link":"https://leetcode.com/problems/burst-balloons/description/","percent":44.857119625610956,"level":"Hard","category":"algorithms","totalAC":"49.7K","totalSubmit":"110.7K","desc":"Given n balloons, indexed from 0 to n-1. Each balloon is painted with a number on it represented by array nums. You are asked to burst all the balloons. If the you burst balloon i you will get nums[left] * nums[i] * nums[right] coins. Here left and right are adjacent indices of i. After the burst, the left and right then becomes adjacent.\r\n\r\nFind the maximum coins you can collect by bursting the balloons wisely.\r\n\r\nNote:\r\n\r\n\r\n\tYou may imagine nums[-1] = nums[n] = 1. They are not real therefore you can not burst them.\r\n\t0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100\r\n\r\n\r\nExample:\r\n\r\n\r\nInput: [3,1,5,8]\r\nOutput: 167 \r\nExplanation: nums = [3,1,5,8] --> [3,5,8] -->   [3,8]   -->  [8]  --> []\r\n             coins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    int maxCoins(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public int maxCoins(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def maxCoins(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def maxCoins(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\""},{"value":"c","text":"C","defaultCode":"int maxCoins(int* nums, int numsSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public int MaxCoins(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxCoins = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_coins(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxCoins(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxCoins(nums []int) int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def maxCoins(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun maxCoins(nums: IntArray): Int {\r\n        \r\n    }\r\n}"}],"testcase":"[3,1,5,8]","testable":true,"templateMeta":{"name":"maxCoins","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}