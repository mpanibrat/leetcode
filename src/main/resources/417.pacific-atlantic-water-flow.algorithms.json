{"id":417,"fid":417,"name":"Pacific Atlantic Water Flow","slug":"pacific-atlantic-water-flow","link":"https://leetcode.com/problems/pacific-atlantic-water-flow/description/","percent":35.58719611875758,"level":"Medium","category":"algorithms","totalAC":"33.7K","totalSubmit":"94.8K","desc":"Given an m x n matrix of non-negative integers representing the height of each unit cell in a continent, the \"Pacific ocean\" touches the left and top edges of the matrix and the \"Atlantic ocean\" touches the right and bottom edges.\r\n\r\nWater can only flow in four directions (up, down, left, or right) from a cell to another one with height equal or lower.\r\n\r\nFind the list of grid coordinates where water can flow to both the Pacific and Atlantic ocean.\r\n\r\nNote:\r\n\r\nThe order of returned grid coordinates does not matter.\r\nBoth m and n are less than 150.\r\n\r\n\r\nExample:\r\n\r\nGiven the following 5x5 matrix:\r\n\r\n  Pacific ~   ~   ~   ~   ~ \r\n       ~  1   2   2   3  (5) *\r\n       ~  3   2   3  (4) (4) *\r\n       ~  2   4  (5)  3   1  *\r\n       ~ (6) (7)  1   4   5  *\r\n       ~ (5)  1   1   2   4  *\r\n          *   *   *   *   * Atlantic\r\n\r\nReturn:\r\n\r\n[[0, 4], [1, 3], [1, 4], [2, 2], [3, 0], [3, 1], [4, 0]] (positions with parentheses in above matrix).\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<int[]> pacificAtlantic(int[][] matrix) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def pacificAtlantic(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def pacificAtlantic(self, matrix):\r\n        \"\"\"\r\n        :type matrix: List[List[int]]\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *columnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** pacificAtlantic(int** matrix, int matrixRowSize, int *matrixColSizes, int** columnSizes, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int[]> PacificAtlantic(int[,] matrix) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[][]} matrix\r\n * @return {number[][]}\r\n */\r\nvar pacificAtlantic = function(matrix) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} matrix\r\n# @return {Integer[][]}\r\ndef pacific_atlantic(matrix)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func pacificAtlantic(_ matrix: [[Int]]) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func pacificAtlantic(matrix [][]int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def pacificAtlantic(matrix: Array[Array[Int]]): List[Array[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun pacificAtlantic(matrix: Array<IntArray>): List<IntArray> {\r\n        \r\n    }\r\n}"}],"testcase":"[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]","testable":true,"templateMeta":{"name":"pacificAtlantic","params":[{"name":"matrix","type":"integer[][]"}],"return":{"type":"list<pair<integer,integer>>"}}}