{"id":781,"fid":770,"name":"Basic Calculator IV","slug":"basic-calculator-iv","link":"https://leetcode.com/problems/basic-calculator-iv/description/","percent":41.67827298050139,"level":"Hard","category":"algorithms","totalAC":"1.2K","totalSubmit":"2.9K","desc":"Given an expression such as expression = \"e + 8 - a + 5\" and an evaluation map such as {\"e\": 1} (given in terms of evalvars = [\"e\"] and evalints = [1]), return a list of tokens representing the simplified expression, such as [\"-1*a\",\"14\"]\r\n\r\n\r\n\tAn expression alternates chunks and symbols, with a space separating each chunk and symbol.\r\n\tA chunk is either an expression in parentheses, a variable, or a non-negative integer.\r\n\tA variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like \"2x\" or \"-x\".\r\n\r\n\r\nExpressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, expression = \"1 + 2 * 3\" has an answer of [\"7\"].\r\n\r\nThe format of the output is as follows:\r\n\r\n\r\n\tFor each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like \"b*a*c\", only \"a*b*c\".\r\n\tTerms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, \"a*a*b*c\" has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\r\n\tThe leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)  A leading coefficient of 1 is still printed.\r\n\tAn example of a well formatted answer is [\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"] \r\n\tTerms (including constant terms) with coefficient 0 are not included.  For example, an expression of \"0\" has an output of [].\r\n\r\n\r\nExamples:\r\n\r\n\r\nInput: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\r\nOutput: [\"-1*a\",\"14\"]\r\n\r\nInput: expression = \"e - 8 + temperature - pressure\",\r\nevalvars = [\"e\", \"temperature\"], evalints = [1, 12]\r\nOutput: [\"-1*pressure\",\"5\"]\r\n\r\nInput: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\r\nOutput: [\"1*e*e\",\"-64\"]\r\n\r\nInput: expression = \"7 - 7\", evalvars = [], evalints = []\r\nOutput: []\r\n\r\nInput: expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []\r\nOutput: [\"5*a*b*c\"]\r\n\r\nInput: expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\",\r\nevalvars = [], evalints = []\r\nOutput: [\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]\r\n\r\n\r\nNote:\r\n\r\n\r\n\texpression will have length in range [1, 250].\r\n\tevalvars, evalints will have equal lengths in range [0, 100].\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<string> basicCalculatorIV(string expression, vector<string>& evalvars, vector<int>& evalints) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<String> basicCalculatorIV(String expression, String[] evalvars, int[] evalints) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def basicCalculatorIV(self, expression, evalvars, evalints):\n        \"\"\"\n        :type expression: str\n        :type evalvars: List[str]\n        :type evalints: List[int]\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def basicCalculatorIV(self, expression, evalvars, evalints):\n        \"\"\"\n        :type expression: str\n        :type evalvars: List[str]\n        :type evalints: List[int]\n        :rtype: List[str]\n        \"\"\"\n        "},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of size *returnSize.\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar** basicCalculatorIV(char* expression, char** evalvars, int evalvarsSize, int* evalints, int evalintsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<string> BasicCalculatorIV(string expression, string[] evalvars, int[] evalints) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} expression\n * @param {string[]} evalvars\n * @param {number[]} evalints\n * @return {string[]}\n */\nvar basicCalculatorIV = function(expression, evalvars, evalints) {\n    \n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} expression\n# @param {String[]} evalvars\n# @param {Integer[]} evalints\n# @return {String[]}\ndef basic_calculator_iv(expression, evalvars, evalints)\n    \nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func basicCalculatorIV(_ expression: String, _ evalvars: [String], _ evalints: [Int]) -> [String] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func basicCalculatorIV(expression string, evalvars []string, evalints []int) []string {\n    \n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def basicCalculatorIV(expression: String, evalvars: Array[String], evalints: Array[Int]): List[String] = {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun basicCalculatorIV(expression: String, evalvars: Array<String>, evalints: IntArray): List<String> {\n        \n    }\n}"}],"testcase":"\"e + 8 - a + 5\"\n[\"e\"]\n[1]","testable":true,"templateMeta":{"name":"basicCalculatorIV","params":[{"name":"expression","type":"string"},{"name":"evalvars","type":"string[]"},{"name":"evalints","type":"integer[]"}],"return":{"type":"list<string>"}}}