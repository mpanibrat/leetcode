{"id":39,"fid":39,"name":"Combination Sum","slug":"combination-sum","link":"https://leetcode.com/problems/combination-sum/description/","percent":44.39377834349062,"level":"Medium","category":"algorithms","totalAC":"266.5K","totalSubmit":"600.2K","desc":"Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.\r\n\r\nThe same repeated number may be chosen from candidates unlimited number of times.\r\n\r\nNote:\r\n\r\n\r\n\tAll numbers (including target) will be positive integers.\r\n\tThe solution set must not contain duplicate combinations.\r\n\r\n\r\nExample 1:\r\n\r\n\r\nInput: candidates = [2,3,6,7], target = 7,\r\nA solution set is:\r\n[\r\n  [7],\r\n  [2,2,3]\r\n]\r\n\r\n\r\nExample 2:\r\n\r\n\r\nInput: candidates = [2,3,5], target = 8,\r\nA solution set is:\r\n[\r\n  [2,2,2,2],\r\n  [2,3,3],\r\n  [3,5]\r\n]\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def combinationSum(self, candidates, target):\r\n        \"\"\"\r\n        :type candidates: List[int]\r\n        :type target: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def combinationSum(self, candidates, target):\r\n        \"\"\"\r\n        :type candidates: List[int]\r\n        :type target: int\r\n        :rtype: List[List[int]]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\nint** combinationSum(int* candidates, int candidatesSize, int target, int** columnSizes, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<IList<int>> CombinationSum(int[] candidates, int target) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} candidates\r\n * @param {number} target\r\n * @return {number[][]}\r\n */\r\nvar combinationSum = function(candidates, target) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} candidates\r\n# @param {Integer} target\r\n# @return {Integer[][]}\r\ndef combination_sum(candidates, target)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func combinationSum(_ candidates: [Int], _ target: Int) -> [[Int]] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func combinationSum(candidates []int, target int) [][]int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def combinationSum(candidates: Array[Int], target: Int): List[List[Int]] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun combinationSum(candidates: IntArray, target: Int): List<List<Int>> {\r\n        \r\n    }\r\n}"}],"testcase":"[2,3,6,7]\n7","testable":true,"templateMeta":{"name":"combinationSum","params":[{"name":"candidates","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"list<list<integer>>","dealloc":true}}}