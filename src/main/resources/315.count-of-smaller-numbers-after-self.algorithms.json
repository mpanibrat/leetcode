{"id":315,"fid":315,"name":"Count of Smaller Numbers After Self","slug":"count-of-smaller-numbers-after-self","link":"https://leetcode.com/problems/count-of-smaller-numbers-after-self/description/","percent":35.89134309013339,"level":"Hard","category":"algorithms","totalAC":"59.8K","totalSubmit":"166.6K","desc":"You are given an integer array nums and you have to return a new counts array. The counts array has the property where counts[i] is the number of smaller elements to the right of nums[i].\r\n\r\nExample:\r\n\r\n\r\nInput: [5,2,6,1]\r\nOutput: [2,1,1,0] \r\nExplanation:\r\nTo the right of 5 there are 2 smaller elements (2 and 1).\r\nTo the right of 2 there is only 1 smaller element (1).\r\nTo the right of 6 there is 1 smaller element (1).\r\nTo the right of 1 there is 0 smaller element.\r\n\r\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\r\npublic:\r\n    vector<int> countSmaller(vector<int>& nums) {\r\n        \r\n    }\r\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\r\n    public List<Integer> countSmaller(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\r\n    def countSmaller(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\r\n    def countSmaller(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: List[int]\r\n        \"\"\"\r\n        "},{"value":"c","text":"C","defaultCode":"/**\r\n * Return an array of size *returnSize.\r\n * Note: The returned array must be malloced, assume caller calls free().\r\n */\r\nint* countSmaller(int* nums, int numsSize, int* returnSize) {\r\n    \r\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\r\n    public IList<int> CountSmaller(int[] nums) {\r\n        \r\n    }\r\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\r\n * @param {number[]} nums\r\n * @return {number[]}\r\n */\r\nvar countSmaller = function(nums) {\r\n    \r\n};"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\r\n# @return {Integer[]}\r\ndef count_smaller(nums)\r\n    \r\nend"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countSmaller(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"golang","text":"Go","defaultCode":"func countSmaller(nums []int) []int {\r\n    \r\n}"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\r\n    def countSmaller(nums: Array[Int]): List[Int] = {\r\n        \r\n    }\r\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\r\n    fun countSmaller(nums: IntArray): List<Int> {\r\n        \r\n    }\r\n}"}],"testcase":"[5,2,6,1]","testable":true,"templateMeta":{"name":"countSmaller","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"list<integer>","dealloc":true}}}